!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=152)}([function(e,t,n){(function(e){e.exports=function(){"use strict";var t,r;function a(){return t.apply(null,arguments)}function i(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function o(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function s(e){return void 0===e}function l(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function u(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function d(e,t){var n,r=[];for(n=0;n<e.length;++n)r.push(t(e[n],n));return r}function c(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function f(e,t){for(var n in t)c(t,n)&&(e[n]=t[n]);return c(t,"toString")&&(e.toString=t.toString),c(t,"valueOf")&&(e.valueOf=t.valueOf),e}function h(e,t,n,r){return Ct(e,t,n,r,!0).utc()}function m(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function p(e){if(null==e._isValid){var t=m(e),n=r.call(t.parsedDateParts,function(e){return null!=e}),a=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(a=a&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return a;e._isValid=a}return e._isValid}function _(e){var t=h(NaN);return null!=e?f(m(t),e):m(t).userInvalidated=!0,t}r=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,r=0;r<n;r++)if(r in t&&e.call(this,t[r],r,t))return!0;return!1};var y=a.momentProperties=[];function g(e,t){var n,r,a;if(s(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),s(t._i)||(e._i=t._i),s(t._f)||(e._f=t._f),s(t._l)||(e._l=t._l),s(t._strict)||(e._strict=t._strict),s(t._tzm)||(e._tzm=t._tzm),s(t._isUTC)||(e._isUTC=t._isUTC),s(t._offset)||(e._offset=t._offset),s(t._pf)||(e._pf=m(t)),s(t._locale)||(e._locale=t._locale),y.length>0)for(n=0;n<y.length;n++)r=y[n],s(a=t[r])||(e[r]=a);return e}var v=!1;function M(e){g(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===v&&(v=!0,a.updateOffset(this),v=!1)}function b(e){return e instanceof M||null!=e&&null!=e._isAMomentObject}function L(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function k(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=L(t)),n}function x(e,t,n){var r,a=Math.min(e.length,t.length),i=Math.abs(e.length-t.length),o=0;for(r=0;r<a;r++)(n&&e[r]!==t[r]||!n&&k(e[r])!==k(t[r]))&&o++;return o+i}function w(e){!1===a.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function Y(e,t){var n=!0;return f(function(){if(null!=a.deprecationHandler&&a.deprecationHandler(null,e),n){for(var r,i=[],o=0;o<arguments.length;o++){if(r="","object"==typeof arguments[o]){for(var s in r+="\n["+o+"] ",arguments[0])r+=s+": "+arguments[0][s]+", ";r=r.slice(0,-2)}else r=arguments[o];i.push(r)}w(e+"\nArguments: "+Array.prototype.slice.call(i).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)},t)}var T,D={};function S(e,t){null!=a.deprecationHandler&&a.deprecationHandler(e,t),D[e]||(w(t),D[e]=!0)}function C(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function A(e,t){var n,r=f({},e);for(n in t)c(t,n)&&(o(e[n])&&o(t[n])?(r[n]={},f(r[n],e[n]),f(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)c(e,n)&&!c(t,n)&&o(e[n])&&(r[n]=f({},r[n]));return r}function j(e){null!=e&&this.set(e)}a.suppressDeprecationWarnings=!1,a.deprecationHandler=null,T=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)c(e,t)&&n.push(t);return n};var E={};function P(e,t){var n=e.toLowerCase();E[n]=E[n+"s"]=E[t]=e}function H(e){return"string"==typeof e?E[e]||E[e.toLowerCase()]:void 0}function O(e){var t,n,r={};for(n in e)c(e,n)&&(t=H(n))&&(r[t]=e[n]);return r}var F={};function R(e,t){F[e]=t}function N(e,t,n){var r=""+Math.abs(e),a=t-r.length,i=e>=0;return(i?n?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+r}var I=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,W=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,z={},B={};function U(e,t,n,r){var a=r;"string"==typeof r&&(a=function(){return this[r]()}),e&&(B[e]=a),t&&(B[t[0]]=function(){return N(a.apply(this,arguments),t[1],t[2])}),n&&(B[n]=function(){return this.localeData().ordinal(a.apply(this,arguments),e)})}function V(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|\]$/g,""):e.replace(/\\/g,"")}function q(e,t){return e.isValid()?(t=J(t,e.localeData()),z[t]=z[t]||function(e){var t,n,r=e.match(I);for(t=0,n=r.length;t<n;t++)B[r[t]]?r[t]=B[r[t]]:r[t]=V(r[t]);return function(t){var a,i="";for(a=0;a<n;a++)i+=C(r[a])?r[a].call(t,e):r[a];return i}}(t),z[t](e)):e.localeData().invalidDate()}function J(e,t){var n=5;function r(e){return t.longDateFormat(e)||e}for(W.lastIndex=0;n>=0&&W.test(e);)e=e.replace(W,r),W.lastIndex=0,n-=1;return e}var G=/\d/,$=/\d\d/,K=/\d{3}/,Q=/\d{4}/,Z=/[+-]?\d{6}/,X=/\d\d?/,ee=/\d\d\d\d?/,te=/\d\d\d\d\d\d?/,ne=/\d{1,3}/,re=/\d{1,4}/,ae=/[+-]?\d{1,6}/,ie=/\d+/,oe=/[+-]?\d+/,se=/Z|[+-]\d\d:?\d\d/gi,le=/Z|[+-]\d\d(?::?\d\d)?/gi,ue=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,de={};function ce(e,t,n){de[e]=C(t)?t:function(e,r){return e&&n?n:t}}function fe(e,t){return c(de,e)?de[e](t._strict,t._locale):new RegExp(function(e){return he(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,r,a){return t||n||r||a}))}(e))}function he(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var me={};function pe(e,t){var n,r=t;for("string"==typeof e&&(e=[e]),l(t)&&(r=function(e,n){n[t]=k(e)}),n=0;n<e.length;n++)me[e[n]]=r}function _e(e,t){pe(e,function(e,n,r,a){r._w=r._w||{},t(e,r._w,r,a)})}function ye(e,t,n){null!=t&&c(me,e)&&me[e](t,n._a,n,e)}var ge=0,ve=1,Me=2,be=3,Le=4,ke=5,xe=6,we=7,Ye=8;function Te(e){return De(e)?366:365}function De(e){return e%4==0&&e%100!=0||e%400==0}U("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),U(0,["YY",2],0,function(){return this.year()%100}),U(0,["YYYY",4],0,"year"),U(0,["YYYYY",5],0,"year"),U(0,["YYYYYY",6,!0],0,"year"),P("year","y"),R("year",1),ce("Y",oe),ce("YY",X,$),ce("YYYY",re,Q),ce("YYYYY",ae,Z),ce("YYYYYY",ae,Z),pe(["YYYYY","YYYYYY"],ge),pe("YYYY",function(e,t){t[ge]=2===e.length?a.parseTwoDigitYear(e):k(e)}),pe("YY",function(e,t){t[ge]=a.parseTwoDigitYear(e)}),pe("Y",function(e,t){t[ge]=parseInt(e,10)}),a.parseTwoDigitYear=function(e){return k(e)+(k(e)>68?1900:2e3)};var Se,Ce=Ae("FullYear",!0);function Ae(e,t){return function(n){return null!=n?(Ee(this,e,n),a.updateOffset(this,t),this):je(this,e)}}function je(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function Ee(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&De(e.year())&&1===e.month()&&29===e.date()?e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),Pe(n,e.month())):e._d["set"+(e._isUTC?"UTC":"")+t](n))}function Pe(e,t){if(isNaN(e)||isNaN(t))return NaN;var n=function(e,t){return(e%t+t)%t}(t,12);return e+=(t-n)/12,1===n?De(e)?29:28:31-n%7%2}Se=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},U("M",["MM",2],"Mo",function(){return this.month()+1}),U("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),U("MMMM",0,0,function(e){return this.localeData().months(this,e)}),P("month","M"),R("month",8),ce("M",X),ce("MM",X,$),ce("MMM",function(e,t){return t.monthsShortRegex(e)}),ce("MMMM",function(e,t){return t.monthsRegex(e)}),pe(["M","MM"],function(e,t){t[ve]=k(e)-1}),pe(["MMM","MMMM"],function(e,t,n,r){var a=n._locale.monthsParse(e,r,n._strict);null!=a?t[ve]=a:m(n).invalidMonth=e});var He=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Oe="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Fe="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function Re(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=k(t);else if(!l(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),Pe(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function Ne(e){return null!=e?(Re(this,e),a.updateOffset(this,!0),this):je(this,"Month")}var Ie=ue,We=ue;function ze(){function e(e,t){return t.length-e.length}var t,n,r=[],a=[],i=[];for(t=0;t<12;t++)n=h([2e3,t]),r.push(this.monthsShort(n,"")),a.push(this.months(n,"")),i.push(this.months(n,"")),i.push(this.monthsShort(n,""));for(r.sort(e),a.sort(e),i.sort(e),t=0;t<12;t++)r[t]=he(r[t]),a[t]=he(a[t]);for(t=0;t<24;t++)i[t]=he(i[t]);this._monthsRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function Be(e){var t=new Date(Date.UTC.apply(null,arguments));return e<100&&e>=0&&isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e),t}function Ue(e,t,n){var r=7+t-n,a=(7+Be(e,0,r).getUTCDay()-t)%7;return-a+r-1}function Ve(e,t,n,r,a){var i,o,s=(7+n-r)%7,l=Ue(e,r,a),u=1+7*(t-1)+s+l;return u<=0?o=Te(i=e-1)+u:u>Te(e)?(i=e+1,o=u-Te(e)):(i=e,o=u),{year:i,dayOfYear:o}}function qe(e,t,n){var r,a,i=Ue(e.year(),t,n),o=Math.floor((e.dayOfYear()-i-1)/7)+1;return o<1?(a=e.year()-1,r=o+Je(a,t,n)):o>Je(e.year(),t,n)?(r=o-Je(e.year(),t,n),a=e.year()+1):(a=e.year(),r=o),{week:r,year:a}}function Je(e,t,n){var r=Ue(e,t,n),a=Ue(e+1,t,n);return(Te(e)-r+a)/7}U("w",["ww",2],"wo","week"),U("W",["WW",2],"Wo","isoWeek"),P("week","w"),P("isoWeek","W"),R("week",5),R("isoWeek",5),ce("w",X),ce("ww",X,$),ce("W",X),ce("WW",X,$),_e(["w","ww","W","WW"],function(e,t,n,r){t[r.substr(0,1)]=k(e)}),U("d",0,"do","day"),U("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),U("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),U("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),U("e",0,0,"weekday"),U("E",0,0,"isoWeekday"),P("day","d"),P("weekday","e"),P("isoWeekday","E"),R("day",11),R("weekday",11),R("isoWeekday",11),ce("d",X),ce("e",X),ce("E",X),ce("dd",function(e,t){return t.weekdaysMinRegex(e)}),ce("ddd",function(e,t){return t.weekdaysShortRegex(e)}),ce("dddd",function(e,t){return t.weekdaysRegex(e)}),_e(["dd","ddd","dddd"],function(e,t,n,r){var a=n._locale.weekdaysParse(e,r,n._strict);null!=a?t.d=a:m(n).invalidWeekday=e}),_e(["d","e","E"],function(e,t,n,r){t[r]=k(e)});var Ge="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),$e="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Ke="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Qe=ue,Ze=ue,Xe=ue;function et(){function e(e,t){return t.length-e.length}var t,n,r,a,i,o=[],s=[],l=[],u=[];for(t=0;t<7;t++)n=h([2e3,1]).day(t),r=this.weekdaysMin(n,""),a=this.weekdaysShort(n,""),i=this.weekdays(n,""),o.push(r),s.push(a),l.push(i),u.push(r),u.push(a),u.push(i);for(o.sort(e),s.sort(e),l.sort(e),u.sort(e),t=0;t<7;t++)s[t]=he(s[t]),l[t]=he(l[t]),u[t]=he(u[t]);this._weekdaysRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+o.join("|")+")","i")}function tt(){return this.hours()%12||12}function nt(e,t){U(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function rt(e,t){return t._meridiemParse}U("H",["HH",2],0,"hour"),U("h",["hh",2],0,tt),U("k",["kk",2],0,function(){return this.hours()||24}),U("hmm",0,0,function(){return""+tt.apply(this)+N(this.minutes(),2)}),U("hmmss",0,0,function(){return""+tt.apply(this)+N(this.minutes(),2)+N(this.seconds(),2)}),U("Hmm",0,0,function(){return""+this.hours()+N(this.minutes(),2)}),U("Hmmss",0,0,function(){return""+this.hours()+N(this.minutes(),2)+N(this.seconds(),2)}),nt("a",!0),nt("A",!1),P("hour","h"),R("hour",13),ce("a",rt),ce("A",rt),ce("H",X),ce("h",X),ce("k",X),ce("HH",X,$),ce("hh",X,$),ce("kk",X,$),ce("hmm",ee),ce("hmmss",te),ce("Hmm",ee),ce("Hmmss",te),pe(["H","HH"],be),pe(["k","kk"],function(e,t,n){var r=k(e);t[be]=24===r?0:r}),pe(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),pe(["h","hh"],function(e,t,n){t[be]=k(e),m(n).bigHour=!0}),pe("hmm",function(e,t,n){var r=e.length-2;t[be]=k(e.substr(0,r)),t[Le]=k(e.substr(r)),m(n).bigHour=!0}),pe("hmmss",function(e,t,n){var r=e.length-4,a=e.length-2;t[be]=k(e.substr(0,r)),t[Le]=k(e.substr(r,2)),t[ke]=k(e.substr(a)),m(n).bigHour=!0}),pe("Hmm",function(e,t,n){var r=e.length-2;t[be]=k(e.substr(0,r)),t[Le]=k(e.substr(r))}),pe("Hmmss",function(e,t,n){var r=e.length-4,a=e.length-2;t[be]=k(e.substr(0,r)),t[Le]=k(e.substr(r,2)),t[ke]=k(e.substr(a))});var at,it=Ae("Hours",!0),ot={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Oe,monthsShort:Fe,week:{dow:0,doy:6},weekdays:Ge,weekdaysMin:Ke,weekdaysShort:$e,meridiemParse:/[ap]\.?m?\.?/i},st={},lt={};function ut(e){return e?e.toLowerCase().replace("_","-"):e}function dt(t){var r=null;if(!st[t]&&void 0!==e&&e&&e.exports)try{r=at._abbr,n(229)("./"+t),ct(r)}catch(e){}return st[t]}function ct(e,t){var n;return e&&((n=s(t)?ht(e):ft(e,t))?at=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),at._abbr}function ft(e,t){if(null!==t){var n,r=ot;if(t.abbr=e,null!=st[e])S("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=st[e]._config;else if(null!=t.parentLocale)if(null!=st[t.parentLocale])r=st[t.parentLocale]._config;else{if(null==(n=dt(t.parentLocale)))return lt[t.parentLocale]||(lt[t.parentLocale]=[]),lt[t.parentLocale].push({name:e,config:t}),null;r=n._config}return st[e]=new j(A(r,t)),lt[e]&&lt[e].forEach(function(e){ft(e.name,e.config)}),ct(e),st[e]}return delete st[e],null}function ht(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return at;if(!i(e)){if(t=dt(e))return t;e=[e]}return function(e){for(var t,n,r,a,i=0;i<e.length;){for(a=ut(e[i]).split("-"),t=a.length,n=(n=ut(e[i+1]))?n.split("-"):null;t>0;){if(r=dt(a.slice(0,t).join("-")))return r;if(n&&n.length>=t&&x(a,n,!0)>=t-1)break;t--}i++}return at}(e)}function mt(e){var t,n=e._a;return n&&-2===m(e).overflow&&(t=n[ve]<0||n[ve]>11?ve:n[Me]<1||n[Me]>Pe(n[ge],n[ve])?Me:n[be]<0||n[be]>24||24===n[be]&&(0!==n[Le]||0!==n[ke]||0!==n[xe])?be:n[Le]<0||n[Le]>59?Le:n[ke]<0||n[ke]>59?ke:n[xe]<0||n[xe]>999?xe:-1,m(e)._overflowDayOfYear&&(t<ge||t>Me)&&(t=Me),m(e)._overflowWeeks&&-1===t&&(t=we),m(e)._overflowWeekday&&-1===t&&(t=Ye),m(e).overflow=t),e}function pt(e,t,n){return null!=e?e:null!=t?t:n}function _t(e){var t,n,r,i,o,s=[];if(!e._d){for(r=function(e){var t=new Date(a.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[Me]&&null==e._a[ve]&&function(e){var t,n,r,a,i,o,s,l;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)i=1,o=4,n=pt(t.GG,e._a[ge],qe(At(),1,4).year),r=pt(t.W,1),((a=pt(t.E,1))<1||a>7)&&(l=!0);else{i=e._locale._week.dow,o=e._locale._week.doy;var u=qe(At(),i,o);n=pt(t.gg,e._a[ge],u.year),r=pt(t.w,u.week),null!=t.d?((a=t.d)<0||a>6)&&(l=!0):null!=t.e?(a=t.e+i,(t.e<0||t.e>6)&&(l=!0)):a=i}r<1||r>Je(n,i,o)?m(e)._overflowWeeks=!0:null!=l?m(e)._overflowWeekday=!0:(s=Ve(n,r,a,i,o),e._a[ge]=s.year,e._dayOfYear=s.dayOfYear)}(e),null!=e._dayOfYear&&(o=pt(e._a[ge],r[ge]),(e._dayOfYear>Te(o)||0===e._dayOfYear)&&(m(e)._overflowDayOfYear=!0),n=Be(o,0,e._dayOfYear),e._a[ve]=n.getUTCMonth(),e._a[Me]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=s[t]=r[t];for(;t<7;t++)e._a[t]=s[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[be]&&0===e._a[Le]&&0===e._a[ke]&&0===e._a[xe]&&(e._nextDay=!0,e._a[be]=0),e._d=(e._useUTC?Be:function(e,t,n,r,a,i,o){var s=new Date(e,t,n,r,a,i,o);return e<100&&e>=0&&isFinite(s.getFullYear())&&s.setFullYear(e),s}).apply(null,s),i=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[be]=24),e._w&&void 0!==e._w.d&&e._w.d!==i&&(m(e).weekdayMismatch=!0)}}var yt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,gt=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,vt=/Z|[+-]\d\d(?::?\d\d)?/,Mt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],bt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Lt=/^\/?Date\((\-?\d+)/i;function kt(e){var t,n,r,a,i,o,s=e._i,l=yt.exec(s)||gt.exec(s);if(l){for(m(e).iso=!0,t=0,n=Mt.length;t<n;t++)if(Mt[t][1].exec(l[1])){a=Mt[t][0],r=!1!==Mt[t][2];break}if(null==a)return void(e._isValid=!1);if(l[3]){for(t=0,n=bt.length;t<n;t++)if(bt[t][1].exec(l[3])){i=(l[2]||" ")+bt[t][0];break}if(null==i)return void(e._isValid=!1)}if(!r&&null!=i)return void(e._isValid=!1);if(l[4]){if(!vt.exec(l[4]))return void(e._isValid=!1);o="Z"}e._f=a+(i||"")+(o||""),Dt(e)}else e._isValid=!1}var xt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function wt(e,t,n,r,a,i){var o=[function(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}(e),Fe.indexOf(t),parseInt(n,10),parseInt(r,10),parseInt(a,10)];return i&&o.push(parseInt(i,10)),o}var Yt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Tt(e){var t=xt.exec(function(e){return e.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,"")}(e._i));if(t){var n=wt(t[4],t[3],t[2],t[5],t[6],t[7]);if(!function(e,t,n){if(e){var r=$e.indexOf(e),a=new Date(t[0],t[1],t[2]).getDay();if(r!==a)return m(n).weekdayMismatch=!0,n._isValid=!1,!1}return!0}(t[1],n,e))return;e._a=n,e._tzm=function(e,t,n){if(e)return Yt[e];if(t)return 0;var r=parseInt(n,10),a=r%100,i=(r-a)/100;return 60*i+a}(t[8],t[9],t[10]),e._d=Be.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),m(e).rfc2822=!0}else e._isValid=!1}function Dt(e){if(e._f!==a.ISO_8601)if(e._f!==a.RFC_2822){e._a=[],m(e).empty=!0;var t,n,r,i,o,s=""+e._i,l=s.length,u=0;for(r=J(e._f,e._locale).match(I)||[],t=0;t<r.length;t++)i=r[t],(n=(s.match(fe(i,e))||[])[0])&&((o=s.substr(0,s.indexOf(n))).length>0&&m(e).unusedInput.push(o),s=s.slice(s.indexOf(n)+n.length),u+=n.length),B[i]?(n?m(e).empty=!1:m(e).unusedTokens.push(i),ye(i,n,e)):e._strict&&!n&&m(e).unusedTokens.push(i);m(e).charsLeftOver=l-u,s.length>0&&m(e).unusedInput.push(s),e._a[be]<=12&&!0===m(e).bigHour&&e._a[be]>0&&(m(e).bigHour=void 0),m(e).parsedDateParts=e._a.slice(0),m(e).meridiem=e._meridiem,e._a[be]=function(e,t,n){var r;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((r=e.isPM(n))&&t<12&&(t+=12),r||12!==t||(t=0),t):t}(e._locale,e._a[be],e._meridiem),_t(e),mt(e)}else Tt(e);else kt(e)}function St(e){var t=e._i,n=e._f;return e._locale=e._locale||ht(e._l),null===t||void 0===n&&""===t?_({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),b(t)?new M(mt(t)):(u(t)?e._d=t:i(n)?function(e){var t,n,r,a,i;if(0===e._f.length)return m(e).invalidFormat=!0,void(e._d=new Date(NaN));for(a=0;a<e._f.length;a++)i=0,t=g({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[a],Dt(t),p(t)&&(i+=m(t).charsLeftOver,i+=10*m(t).unusedTokens.length,m(t).score=i,(null==r||i<r)&&(r=i,n=t));f(e,n||t)}(e):n?Dt(e):function(e){var t=e._i;s(t)?e._d=new Date(a.now()):u(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=Lt.exec(e._i);null===t?(kt(e),!1===e._isValid&&(delete e._isValid,Tt(e),!1===e._isValid&&(delete e._isValid,a.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):i(t)?(e._a=d(t.slice(0),function(e){return parseInt(e,10)}),_t(e)):o(t)?function(e){if(!e._d){var t=O(e._i);e._a=d([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),_t(e)}}(e):l(t)?e._d=new Date(t):a.createFromInputFallback(e)}(e),p(e)||(e._d=null),e))}function Ct(e,t,n,r,a){var s={};return!0!==n&&!1!==n||(r=n,n=void 0),(o(e)&&function(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(e.hasOwnProperty(t))return!1;return!0}(e)||i(e)&&0===e.length)&&(e=void 0),s._isAMomentObject=!0,s._useUTC=s._isUTC=a,s._l=n,s._i=e,s._f=t,s._strict=r,function(e){var t=new M(mt(St(e)));return t._nextDay&&(t.add(1,"d"),t._nextDay=void 0),t}(s)}function At(e,t,n,r){return Ct(e,t,n,r,!1)}a.createFromInputFallback=Y("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),a.ISO_8601=function(){},a.RFC_2822=function(){};var jt=Y("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=At.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:_()}),Et=Y("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=At.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:_()});function Pt(e,t){var n,r;if(1===t.length&&i(t[0])&&(t=t[0]),!t.length)return At();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}var Ht=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Ot(e){var t=O(e),n=t.year||0,r=t.quarter||0,a=t.month||0,i=t.week||0,o=t.day||0,s=t.hour||0,l=t.minute||0,u=t.second||0,d=t.millisecond||0;this._isValid=function(e){for(var t in e)if(-1===Se.call(Ht,t)||null!=e[t]&&isNaN(e[t]))return!1;for(var n=!1,r=0;r<Ht.length;++r)if(e[Ht[r]]){if(n)return!1;parseFloat(e[Ht[r]])!==k(e[Ht[r]])&&(n=!0)}return!0}(t),this._milliseconds=+d+1e3*u+6e4*l+1e3*s*60*60,this._days=+o+7*i,this._months=+a+3*r+12*n,this._data={},this._locale=ht(),this._bubble()}function Ft(e){return e instanceof Ot}function Rt(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Nt(e,t){U(e,0,0,function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+N(~~(e/60),2)+t+N(~~e%60,2)})}Nt("Z",":"),Nt("ZZ",""),ce("Z",le),ce("ZZ",le),pe(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Wt(le,e)});var It=/([\+\-]|\d\d)/gi;function Wt(e,t){var n=(t||"").match(e);if(null===n)return null;var r=n[n.length-1]||[],a=(r+"").match(It)||["-",0,0],i=60*a[1]+k(a[2]);return 0===i?0:"+"===a[0]?i:-i}function zt(e,t){var n,r;return t._isUTC?(n=t.clone(),r=(b(e)||u(e)?e.valueOf():At(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+r),a.updateOffset(n,!1),n):At(e).local()}function Bt(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function Ut(){return!!this.isValid()&&this._isUTC&&0===this._offset}a.updateOffset=function(){};var Vt=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,qt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Jt(e,t){var n,r,a,i=e,o=null;return Ft(e)?i={ms:e._milliseconds,d:e._days,M:e._months}:l(e)?(i={},t?i[t]=e:i.milliseconds=e):(o=Vt.exec(e))?(n="-"===o[1]?-1:1,i={y:0,d:k(o[Me])*n,h:k(o[be])*n,m:k(o[Le])*n,s:k(o[ke])*n,ms:k(Rt(1e3*o[xe]))*n}):(o=qt.exec(e))?(n="-"===o[1]?-1:(o[1],1),i={y:Gt(o[2],n),M:Gt(o[3],n),w:Gt(o[4],n),d:Gt(o[5],n),h:Gt(o[6],n),m:Gt(o[7],n),s:Gt(o[8],n)}):null==i?i={}:"object"==typeof i&&("from"in i||"to"in i)&&(a=function(e,t){var n;return e.isValid()&&t.isValid()?(t=zt(t,e),e.isBefore(t)?n=$t(e,t):((n=$t(t,e)).milliseconds=-n.milliseconds,n.months=-n.months),n):{milliseconds:0,months:0}}(At(i.from),At(i.to)),(i={}).ms=a.milliseconds,i.M=a.months),r=new Ot(i),Ft(e)&&c(e,"_locale")&&(r._locale=e._locale),r}function Gt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function $t(e,t){var n={milliseconds:0,months:0};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Kt(e,t){return function(n,r){var a;return null===r||isNaN(+r)||(S(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=n,n=r,r=a),Qt(this,Jt(n="string"==typeof n?+n:n,r),e),this}}function Qt(e,t,n,r){var i=t._milliseconds,o=Rt(t._days),s=Rt(t._months);e.isValid()&&(r=null==r||r,s&&Re(e,je(e,"Month")+s*n),o&&Ee(e,"Date",je(e,"Date")+o*n),i&&e._d.setTime(e._d.valueOf()+i*n),r&&a.updateOffset(e,o||s))}Jt.fn=Ot.prototype,Jt.invalid=function(){return Jt(NaN)};var Zt=Kt(1,"add"),Xt=Kt(-1,"subtract");function en(e,t){var n,r,a=12*(t.year()-e.year())+(t.month()-e.month()),i=e.clone().add(a,"months");return t-i<0?(n=e.clone().add(a-1,"months"),r=(t-i)/(i-n)):(n=e.clone().add(a+1,"months"),r=(t-i)/(n-i)),-(a+r)||0}function tn(e){var t;return void 0===e?this._locale._abbr:(null!=(t=ht(e))&&(this._locale=t),this)}a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",a.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var nn=Y("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});function rn(){return this._locale}function an(e,t){U(0,[e,e.length],0,t)}function on(e,t,n,r,a){var i;return null==e?qe(this,r,a).year:(i=Je(e,r,a),t>i&&(t=i),function(e,t,n,r,a){var i=Ve(e,t,n,r,a),o=Be(i.year,0,i.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}.call(this,e,t,n,r,a))}U(0,["gg",2],0,function(){return this.weekYear()%100}),U(0,["GG",2],0,function(){return this.isoWeekYear()%100}),an("gggg","weekYear"),an("ggggg","weekYear"),an("GGGG","isoWeekYear"),an("GGGGG","isoWeekYear"),P("weekYear","gg"),P("isoWeekYear","GG"),R("weekYear",1),R("isoWeekYear",1),ce("G",oe),ce("g",oe),ce("GG",X,$),ce("gg",X,$),ce("GGGG",re,Q),ce("gggg",re,Q),ce("GGGGG",ae,Z),ce("ggggg",ae,Z),_e(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,r){t[r.substr(0,2)]=k(e)}),_e(["gg","GG"],function(e,t,n,r){t[r]=a.parseTwoDigitYear(e)}),U("Q",0,"Qo","quarter"),P("quarter","Q"),R("quarter",7),ce("Q",G),pe("Q",function(e,t){t[ve]=3*(k(e)-1)}),U("D",["DD",2],"Do","date"),P("date","D"),R("date",9),ce("D",X),ce("DD",X,$),ce("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),pe(["D","DD"],Me),pe("Do",function(e,t){t[Me]=k(e.match(X)[0])});var sn=Ae("Date",!0);U("DDD",["DDDD",3],"DDDo","dayOfYear"),P("dayOfYear","DDD"),R("dayOfYear",4),ce("DDD",ne),ce("DDDD",K),pe(["DDD","DDDD"],function(e,t,n){n._dayOfYear=k(e)}),U("m",["mm",2],0,"minute"),P("minute","m"),R("minute",14),ce("m",X),ce("mm",X,$),pe(["m","mm"],Le);var ln=Ae("Minutes",!1);U("s",["ss",2],0,"second"),P("second","s"),R("second",15),ce("s",X),ce("ss",X,$),pe(["s","ss"],ke);var un,dn=Ae("Seconds",!1);for(U("S",0,0,function(){return~~(this.millisecond()/100)}),U(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),U(0,["SSS",3],0,"millisecond"),U(0,["SSSS",4],0,function(){return 10*this.millisecond()}),U(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),U(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),U(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),U(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),U(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),P("millisecond","ms"),R("millisecond",16),ce("S",ne,G),ce("SS",ne,$),ce("SSS",ne,K),un="SSSS";un.length<=9;un+="S")ce(un,ie);function cn(e,t){t[xe]=k(1e3*("0."+e))}for(un="S";un.length<=9;un+="S")pe(un,cn);var fn=Ae("Milliseconds",!1);U("z",0,0,"zoneAbbr"),U("zz",0,0,"zoneName");var hn=M.prototype;function mn(e){return e}hn.add=Zt,hn.calendar=function(e,t){var n=e||At(),r=zt(n,this).startOf("day"),i=a.calendarFormat(this,r)||"sameElse",o=t&&(C(t[i])?t[i].call(this,n):t[i]);return this.format(o||this.localeData().calendar(i,this,At(n)))},hn.clone=function(){return new M(this)},hn.diff=function(e,t,n){var r,a,i;if(!this.isValid())return NaN;if(!(r=zt(e,this)).isValid())return NaN;switch(a=6e4*(r.utcOffset()-this.utcOffset()),t=H(t)){case"year":i=en(this,r)/12;break;case"month":i=en(this,r);break;case"quarter":i=en(this,r)/3;break;case"second":i=(this-r)/1e3;break;case"minute":i=(this-r)/6e4;break;case"hour":i=(this-r)/36e5;break;case"day":i=(this-r-a)/864e5;break;case"week":i=(this-r-a)/6048e5;break;default:i=this-r}return n?i:L(i)},hn.endOf=function(e){return void 0===(e=H(e))||"millisecond"===e?this:("date"===e&&(e="day"),this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms"))},hn.format=function(e){e||(e=this.isUtc()?a.defaultFormatUtc:a.defaultFormat);var t=q(this,e);return this.localeData().postformat(t)},hn.from=function(e,t){return this.isValid()&&(b(e)&&e.isValid()||At(e).isValid())?Jt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},hn.fromNow=function(e){return this.from(At(),e)},hn.to=function(e,t){return this.isValid()&&(b(e)&&e.isValid()||At(e).isValid())?Jt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},hn.toNow=function(e){return this.to(At(),e)},hn.get=function(e){return C(this[e=H(e)])?this[e]():this},hn.invalidAt=function(){return m(this).overflow},hn.isAfter=function(e,t){var n=b(e)?e:At(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=H(s(t)?"millisecond":t))?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},hn.isBefore=function(e,t){var n=b(e)?e:At(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=H(s(t)?"millisecond":t))?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},hn.isBetween=function(e,t,n,r){return("("===(r=r||"()")[0]?this.isAfter(e,n):!this.isBefore(e,n))&&(")"===r[1]?this.isBefore(t,n):!this.isAfter(t,n))},hn.isSame=function(e,t){var n,r=b(e)?e:At(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=H(t||"millisecond"))?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},hn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},hn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},hn.isValid=function(){return p(this)},hn.lang=nn,hn.locale=tn,hn.localeData=rn,hn.max=Et,hn.min=jt,hn.parsingFlags=function(){return f({},m(this))},hn.set=function(e,t){if("object"==typeof e)for(var n=function(e){var t=[];for(var n in e)t.push({unit:n,priority:F[n]});return t.sort(function(e,t){return e.priority-t.priority}),t}(e=O(e)),r=0;r<n.length;r++)this[n[r].unit](e[n[r].unit]);else if(C(this[e=H(e)]))return this[e](t);return this},hn.startOf=function(e){switch(e=H(e)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":case"date":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===e&&this.weekday(0),"isoWeek"===e&&this.isoWeekday(1),"quarter"===e&&this.month(3*Math.floor(this.month()/3)),this},hn.subtract=Xt,hn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},hn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},hn.toDate=function(){return new Date(this.valueOf())},hn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?q(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):C(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",q(n,"Z")):q(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},hn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var n="["+e+'("]',r=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",a=t+'[")]';return this.format(n+r+"-MM-DD[T]HH:mm:ss.SSS"+a)},hn.toJSON=function(){return this.isValid()?this.toISOString():null},hn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},hn.unix=function(){return Math.floor(this.valueOf()/1e3)},hn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},hn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},hn.year=Ce,hn.isLeapYear=function(){return De(this.year())},hn.weekYear=function(e){return on.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},hn.isoWeekYear=function(e){return on.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},hn.quarter=hn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},hn.month=Ne,hn.daysInMonth=function(){return Pe(this.year(),this.month())},hn.week=hn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},hn.isoWeek=hn.isoWeeks=function(e){var t=qe(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},hn.weeksInYear=function(){var e=this.localeData()._week;return Je(this.year(),e.dow,e.doy)},hn.isoWeeksInYear=function(){return Je(this.year(),1,4)},hn.date=sn,hn.day=hn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},hn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},hn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},hn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},hn.hour=hn.hours=it,hn.minute=hn.minutes=ln,hn.second=hn.seconds=dn,hn.millisecond=hn.milliseconds=fn,hn.utcOffset=function(e,t,n){var r,i=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Wt(le,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(r=Bt(this)),this._offset=e,this._isUTC=!0,null!=r&&this.add(r,"m"),i!==e&&(!t||this._changeInProgress?Qt(this,Jt(e-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?i:Bt(this)},hn.utc=function(e){return this.utcOffset(0,e)},hn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Bt(this),"m")),this},hn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Wt(se,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},hn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?At(e).utcOffset():0,(this.utcOffset()-e)%60==0)},hn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},hn.isLocal=function(){return!!this.isValid()&&!this._isUTC},hn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},hn.isUtc=Ut,hn.isUTC=Ut,hn.zoneAbbr=function(){return this._isUTC?"UTC":""},hn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},hn.dates=Y("dates accessor is deprecated. Use date instead.",sn),hn.months=Y("months accessor is deprecated. Use month instead",Ne),hn.years=Y("years accessor is deprecated. Use year instead",Ce),hn.zone=Y("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}),hn.isDSTShifted=Y("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",function(){if(!s(this._isDSTShifted))return this._isDSTShifted;var e={};if(g(e,this),(e=St(e))._a){var t=e._isUTC?h(e._a):At(e._a);this._isDSTShifted=this.isValid()&&x(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted});var pn=j.prototype;function _n(e,t,n,r){var a=ht(),i=h().set(r,t);return a[n](i,e)}function yn(e,t,n){if(l(e)&&(t=e,e=void 0),e=e||"",null!=t)return _n(e,t,n,"month");var r,a=[];for(r=0;r<12;r++)a[r]=_n(e,r,n,"month");return a}function gn(e,t,n,r){"boolean"==typeof e?(l(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,l(t)&&(n=t,t=void 0),t=t||"");var a,i=ht(),o=e?i._week.dow:0;if(null!=n)return _n(t,(n+o)%7,r,"day");var s=[];for(a=0;a<7;a++)s[a]=_n(t,(a+o)%7,r,"day");return s}pn.calendar=function(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return C(r)?r.call(t,n):r},pn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])},pn.invalidDate=function(){return this._invalidDate},pn.ordinal=function(e){return this._ordinal.replace("%d",e)},pn.preparse=mn,pn.postformat=mn,pn.relativeTime=function(e,t,n,r){var a=this._relativeTime[n];return C(a)?a(e,t,n,r):a.replace(/%d/i,e)},pn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return C(n)?n(t):n.replace(/%s/i,t)},pn.set=function(e){var t,n;for(n in e)C(t=e[n])?this[n]=t:this["_"+n]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},pn.months=function(e,t){return e?i(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||He).test(t)?"format":"standalone"][e.month()]:i(this._months)?this._months:this._months.standalone},pn.monthsShort=function(e,t){return e?i(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[He.test(t)?"format":"standalone"][e.month()]:i(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},pn.monthsParse=function(e,t,n){var r,a,i;if(this._monthsParseExact)return function(e,t,n){var r,a,i,o=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)i=h([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(i,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(i,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(a=Se.call(this._shortMonthsParse,o))?a:null:-1!==(a=Se.call(this._longMonthsParse,o))?a:null:"MMM"===t?-1!==(a=Se.call(this._shortMonthsParse,o))?a:-1!==(a=Se.call(this._longMonthsParse,o))?a:null:-1!==(a=Se.call(this._longMonthsParse,o))?a:-1!==(a=Se.call(this._shortMonthsParse,o))?a:null}.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(a=h([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(i="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[r]=new RegExp(i.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}},pn.monthsRegex=function(e){return this._monthsParseExact?(c(this,"_monthsRegex")||ze.call(this),e?this._monthsStrictRegex:this._monthsRegex):(c(this,"_monthsRegex")||(this._monthsRegex=We),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},pn.monthsShortRegex=function(e){return this._monthsParseExact?(c(this,"_monthsRegex")||ze.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(c(this,"_monthsShortRegex")||(this._monthsShortRegex=Ie),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},pn.week=function(e){return qe(e,this._week.dow,this._week.doy).week},pn.firstDayOfYear=function(){return this._week.doy},pn.firstDayOfWeek=function(){return this._week.dow},pn.weekdays=function(e,t){return e?i(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(t)?"format":"standalone"][e.day()]:i(this._weekdays)?this._weekdays:this._weekdays.standalone},pn.weekdaysMin=function(e){return e?this._weekdaysMin[e.day()]:this._weekdaysMin},pn.weekdaysShort=function(e){return e?this._weekdaysShort[e.day()]:this._weekdaysShort},pn.weekdaysParse=function(e,t,n){var r,a,i;if(this._weekdaysParseExact)return function(e,t,n){var r,a,i,o=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)i=h([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(i,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(i,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(i,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(a=Se.call(this._weekdaysParse,o))?a:null:"ddd"===t?-1!==(a=Se.call(this._shortWeekdaysParse,o))?a:null:-1!==(a=Se.call(this._minWeekdaysParse,o))?a:null:"dddd"===t?-1!==(a=Se.call(this._weekdaysParse,o))?a:-1!==(a=Se.call(this._shortWeekdaysParse,o))?a:-1!==(a=Se.call(this._minWeekdaysParse,o))?a:null:"ddd"===t?-1!==(a=Se.call(this._shortWeekdaysParse,o))?a:-1!==(a=Se.call(this._weekdaysParse,o))?a:-1!==(a=Se.call(this._minWeekdaysParse,o))?a:null:-1!==(a=Se.call(this._minWeekdaysParse,o))?a:-1!==(a=Se.call(this._weekdaysParse,o))?a:-1!==(a=Se.call(this._shortWeekdaysParse,o))?a:null}.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(a=h([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(a,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(a,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(a,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(i="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[r]=new RegExp(i.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}},pn.weekdaysRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||et.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(c(this,"_weekdaysRegex")||(this._weekdaysRegex=Qe),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},pn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||et.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(c(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Ze),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},pn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||et.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(c(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Xe),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},pn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},pn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},ct("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,n=1===k(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}}),a.lang=Y("moment.lang is deprecated. Use moment.locale instead.",ct),a.langData=Y("moment.langData is deprecated. Use moment.localeData instead.",ht);var vn=Math.abs;function Mn(e,t,n,r){var a=Jt(t,n);return e._milliseconds+=r*a._milliseconds,e._days+=r*a._days,e._months+=r*a._months,e._bubble()}function bn(e){return e<0?Math.floor(e):Math.ceil(e)}function Ln(e){return 4800*e/146097}function kn(e){return 146097*e/4800}function xn(e){return function(){return this.as(e)}}var wn=xn("ms"),Yn=xn("s"),Tn=xn("m"),Dn=xn("h"),Sn=xn("d"),Cn=xn("w"),An=xn("M"),jn=xn("y");function En(e){return function(){return this.isValid()?this._data[e]:NaN}}var Pn=En("milliseconds"),Hn=En("seconds"),On=En("minutes"),Fn=En("hours"),Rn=En("days"),Nn=En("months"),In=En("years"),Wn=Math.round,zn={ss:44,s:45,m:45,h:22,d:26,M:11},Bn=Math.abs;function Un(e){return(e>0)-(e<0)||+e}function Vn(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n=Bn(this._milliseconds)/1e3,r=Bn(this._days),a=Bn(this._months);e=L(n/60),t=L(e/60),n%=60,e%=60;var i=L(a/12),o=a%=12,s=r,l=t,u=e,d=n?n.toFixed(3).replace(/\.?0+$/,""):"",c=this.asSeconds();if(!c)return"P0D";var f=c<0?"-":"",h=Un(this._months)!==Un(c)?"-":"",m=Un(this._days)!==Un(c)?"-":"",p=Un(this._milliseconds)!==Un(c)?"-":"";return f+"P"+(i?h+i+"Y":"")+(o?h+o+"M":"")+(s?m+s+"D":"")+(l||u||d?"T":"")+(l?p+l+"H":"")+(u?p+u+"M":"")+(d?p+d+"S":"")}var qn=Ot.prototype;return qn.isValid=function(){return this._isValid},qn.abs=function(){var e=this._data;return this._milliseconds=vn(this._milliseconds),this._days=vn(this._days),this._months=vn(this._months),e.milliseconds=vn(e.milliseconds),e.seconds=vn(e.seconds),e.minutes=vn(e.minutes),e.hours=vn(e.hours),e.months=vn(e.months),e.years=vn(e.years),this},qn.add=function(e,t){return Mn(this,e,t,1)},qn.subtract=function(e,t){return Mn(this,e,t,-1)},qn.as=function(e){if(!this.isValid())return NaN;var t,n,r=this._milliseconds;if("month"===(e=H(e))||"year"===e)return t=this._days+r/864e5,n=this._months+Ln(t),"month"===e?n:n/12;switch(t=this._days+Math.round(kn(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}},qn.asMilliseconds=wn,qn.asSeconds=Yn,qn.asMinutes=Tn,qn.asHours=Dn,qn.asDays=Sn,qn.asWeeks=Cn,qn.asMonths=An,qn.asYears=jn,qn.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*k(this._months/12):NaN},qn._bubble=function(){var e,t,n,r,a,i=this._milliseconds,o=this._days,s=this._months,l=this._data;return i>=0&&o>=0&&s>=0||i<=0&&o<=0&&s<=0||(i+=864e5*bn(kn(s)+o),o=0,s=0),l.milliseconds=i%1e3,e=L(i/1e3),l.seconds=e%60,t=L(e/60),l.minutes=t%60,n=L(t/60),l.hours=n%24,o+=L(n/24),a=L(Ln(o)),s+=a,o-=bn(kn(a)),r=L(s/12),s%=12,l.days=o,l.months=s,l.years=r,this},qn.clone=function(){return Jt(this)},qn.get=function(e){return e=H(e),this.isValid()?this[e+"s"]():NaN},qn.milliseconds=Pn,qn.seconds=Hn,qn.minutes=On,qn.hours=Fn,qn.days=Rn,qn.weeks=function(){return L(this.days()/7)},qn.months=Nn,qn.years=In,qn.humanize=function(e){if(!this.isValid())return this.localeData().invalidDate();var t=this.localeData(),n=function(e,t,n){var r=Jt(e).abs(),a=Wn(r.as("s")),i=Wn(r.as("m")),o=Wn(r.as("h")),s=Wn(r.as("d")),l=Wn(r.as("M")),u=Wn(r.as("y")),d=a<=zn.ss&&["s",a]||a<zn.s&&["ss",a]||i<=1&&["m"]||i<zn.m&&["mm",i]||o<=1&&["h"]||o<zn.h&&["hh",o]||s<=1&&["d"]||s<zn.d&&["dd",s]||l<=1&&["M"]||l<zn.M&&["MM",l]||u<=1&&["y"]||["yy",u];return d[2]=t,d[3]=+e>0,d[4]=n,function(e,t,n,r,a){return a.relativeTime(t||1,!!n,e,r)}.apply(null,d)}(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)},qn.toISOString=Vn,qn.toString=Vn,qn.toJSON=Vn,qn.locale=tn,qn.localeData=rn,qn.toIsoString=Y("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Vn),qn.lang=nn,U("X",0,0,"unix"),U("x",0,0,"valueOf"),ce("x",oe),ce("X",/[+-]?\d+(\.\d{1,3})?/),pe("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),pe("x",function(e,t,n){n._d=new Date(k(e))}),a.version="2.22.2",function(e){t=e}(At),a.fn=hn,a.min=function(){return Pt("isBefore",[].slice.call(arguments,0))},a.max=function(){return Pt("isAfter",[].slice.call(arguments,0))},a.now=function(){return Date.now?Date.now():+new Date},a.utc=h,a.unix=function(e){return At(1e3*e)},a.months=function(e,t){return yn(e,t,"months")},a.isDate=u,a.locale=ct,a.invalid=_,a.duration=Jt,a.isMoment=b,a.weekdays=function(e,t,n){return gn(e,t,n,"weekdays")},a.parseZone=function(){return At.apply(null,arguments).parseZone()},a.localeData=ht,a.isDuration=Ft,a.monthsShort=function(e,t){return yn(e,t,"monthsShort")},a.weekdaysMin=function(e,t,n){return gn(e,t,n,"weekdaysMin")},a.defineLocale=ft,a.updateLocale=function(e,t){if(null!=t){var n,r,a=ot;null!=(r=dt(e))&&(a=r._config),t=A(a,t),(n=new j(t)).parentLocale=st[e],st[e]=n,ct(e)}else null!=st[e]&&(null!=st[e].parentLocale?st[e]=st[e].parentLocale:null!=st[e]&&delete st[e]);return st[e]},a.locales=function(){return T(st)},a.weekdaysShort=function(e,t,n){return gn(e,t,n,"weekdaysShort")},a.normalizeUnits=H,a.relativeTimeRounding=function(e){return void 0===e?Wn:"function"==typeof e&&(Wn=e,!0)},a.relativeTimeThreshold=function(e,t){return void 0!==zn[e]&&(void 0===t?zn[e]:(zn[e]=t,"s"===e&&(zn.ss=t-1),!0))},a.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},a.prototype=hn,a.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"YYYY-[W]WW",MONTH:"YYYY-MM"},a}()}).call(this,n(228)(e))},function(e,t,n){e.exports=n(165)()},function(e,t,n){"use strict";e.exports=n(153)},function(e,t,n){"use strict";e.exports=n(14),e.exports.easing=n(202),e.exports.canvas=n(203),e.exports.options=n(204)},function(e,t,n){"use strict";var r=n(3);e.exports={_set:function(e,t){return r.merge(this[e]||(this[e]={}),t)}}},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){"use strict";e.exports=function(e,t,n,r,a,i,o,s){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,a,i,o,s],d=0;(l=new Error(t.replace(/%s/g,function(){return u[d++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";e.exports=function(){}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var a=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(r),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},a=0;a<this.length;a++){var i=this[a][0];"number"==typeof i&&(r[i]=!0)}for(a=0;a<e.length;a++){var o=e[a];"number"==typeof o[0]&&r[o[0]]||(n&&!o[2]?o[2]=n:n&&(o[2]="("+o[2]+") and ("+n+")"),t.push(o))}},t}},function(e,t,n){var r={},a=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),i=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),o=null,s=0,l=[],u=n(171);function d(e,t){for(var n=0;n<e.length;n++){var a=e[n],i=r[a.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](a.parts[o]);for(;o<a.parts.length;o++)i.parts.push(_(a.parts[o],t))}else{var s=[];for(o=0;o<a.parts.length;o++)s.push(_(a.parts[o],t));r[a.id]={id:a.id,refs:1,parts:s}}}}function c(e,t){for(var n=[],r={},a=0;a<e.length;a++){var i=e[a],o=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[o]?r[o].parts.push(s):n.push(r[o]={id:o,parts:[s]})}return n}function f(e,t){var n=i(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),l.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var a=i(e.insertAt.before,n);n.insertBefore(t,a)}}function h(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=l.indexOf(e);t>=0&&l.splice(t,1)}function m(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return p(t,e.attrs),f(e,t),t}function p(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function _(e,t){var n,r,a,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var l=s++;n=o||(o=m(t)),r=g.bind(null,n,l,!1),a=g.bind(null,n,l,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",p(t,e.attrs),f(e,t),t}(t),r=function(e,t,n){var r=n.css,a=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&a;(t.convertToAbsoluteUrls||i)&&(r=u(r));a&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */");var o=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(o),s&&URL.revokeObjectURL(s)}.bind(null,n,t),a=function(){h(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),a=function(){h(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=c(e,t);return d(n,t),function(e){for(var a=[],i=0;i<n.length;i++){var o=n[i];(s=r[o.id]).refs--,a.push(s)}e&&d(c(e,t),t);for(i=0;i<a.length;i++){var s;if(0===(s=a[i]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete r[s.id]}}}};var y=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function g(e,t,n,r){var a=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=y(t,a);else{var i=document.createTextNode(a),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(i,o[t]):e.appendChild(i)}}},function(e,t,n){"use strict";var r=n(24),a=n(3);var i=function(e){a.extend(this,e),this.initialize.apply(this,arguments)};a.extend(i.prototype,{initialize:function(){this.hidden=!1},pivot:function(){var e=this;return e._view||(e._view=a.clone(e._model)),e._start={},e},transition:function(e){var t=this,n=t._model,a=t._start,i=t._view;return n&&1!==e?(i||(i=t._view={}),a||(a=t._start={}),function(e,t,n,a){var i,o,s,l,u,d,c,f,h,m=Object.keys(n);for(i=0,o=m.length;i<o;++i)if(d=n[s=m[i]],t.hasOwnProperty(s)||(t[s]=d),(l=t[s])!==d&&"_"!==s[0]){if(e.hasOwnProperty(s)||(e[s]=l),(c=typeof d)==typeof(u=e[s]))if("string"===c){if((f=r(u)).valid&&(h=r(d)).valid){t[s]=h.mix(f,a).rgbString();continue}}else if("number"===c&&isFinite(u)&&isFinite(d)){t[s]=u+(d-u)*a;continue}t[s]=d}}(a,i,n,e),t):(t._view=n,t._start=null,t)},tooltipPosition:function(){return{x:this._model.x,y:this._model.y}},hasValue:function(){return a.isNumber(this._model.x)&&a.isNumber(this._model.y)}}),i.extend=a.inherits,e.exports=i},function(e,t,n){"use strict";e.exports={},e.exports.Arc=n(210),e.exports.Line=n(211),e.exports.Point=n(212),e.exports.Rectangle=n(213)},function(e,t,n){"use strict";var r=n(3);function a(e,t){return r.where(e,function(e){return e.position===t})}function i(e,t){e.forEach(function(e,t){return e._tmpIndex_=t,e}),e.sort(function(e,n){var r=t?n:e,a=t?e:n;return r.weight===a.weight?r._tmpIndex_-a._tmpIndex_:r.weight-a.weight}),e.forEach(function(e){delete e._tmpIndex_})}e.exports={defaults:{},addBox:function(e,t){e.boxes||(e.boxes=[]),t.fullWidth=t.fullWidth||!1,t.position=t.position||"top",t.weight=t.weight||0,e.boxes.push(t)},removeBox:function(e,t){var n=e.boxes?e.boxes.indexOf(t):-1;-1!==n&&e.boxes.splice(n,1)},configure:function(e,t,n){for(var r,a=["fullWidth","position","weight"],i=a.length,o=0;o<i;++o)r=a[o],n.hasOwnProperty(r)&&(t[r]=n[r])},update:function(e,t,n){if(e){var o=e.options.layout||{},s=r.options.toPadding(o.padding),l=s.left,u=s.right,d=s.top,c=s.bottom,f=a(e.boxes,"left"),h=a(e.boxes,"right"),m=a(e.boxes,"top"),p=a(e.boxes,"bottom"),_=a(e.boxes,"chartArea");i(f,!0),i(h,!1),i(m,!0),i(p,!1);var y=t-l-u,g=n-d-c,v=g/2,M=(t-y/2)/(f.length+h.length),b=(n-v)/(m.length+p.length),L=y,k=g,x=[];r.each(f.concat(h,m,p),function(e){var t,n=e.isHorizontal();n?(t=e.update(e.fullWidth?y:L,b),k-=t.height):(t=e.update(M,k),L-=t.width),x.push({horizontal:n,minSize:t,box:e})});var w=0,Y=0,T=0,D=0;r.each(m.concat(p),function(e){if(e.getPadding){var t=e.getPadding();w=Math.max(w,t.left),Y=Math.max(Y,t.right)}}),r.each(f.concat(h),function(e){if(e.getPadding){var t=e.getPadding();T=Math.max(T,t.top),D=Math.max(D,t.bottom)}});var S=l,C=u,A=d,j=c;r.each(f.concat(h),N),r.each(f,function(e){S+=e.width}),r.each(h,function(e){C+=e.width}),r.each(m.concat(p),N),r.each(m,function(e){A+=e.height}),r.each(p,function(e){j+=e.height}),r.each(f.concat(h),function(e){var t=r.findNextWhere(x,function(t){return t.box===e}),n={left:0,right:0,top:A,bottom:j};t&&e.update(t.minSize.width,k,n)}),S=l,C=u,A=d,j=c,r.each(f,function(e){S+=e.width}),r.each(h,function(e){C+=e.width}),r.each(m,function(e){A+=e.height}),r.each(p,function(e){j+=e.height});var E=Math.max(w-S,0);S+=E,C+=Math.max(Y-C,0);var P=Math.max(T-A,0);A+=P,j+=Math.max(D-j,0);var H=n-A-j,O=t-S-C;O===L&&H===k||(r.each(f,function(e){e.height=H}),r.each(h,function(e){e.height=H}),r.each(m,function(e){e.fullWidth||(e.width=O)}),r.each(p,function(e){e.fullWidth||(e.width=O)}),k=H,L=O);var F=l+E,R=d+P;r.each(f.concat(m),I),F+=L,R+=k,r.each(h,I),r.each(p,I),e.chartArea={left:S,top:A,right:S+L,bottom:A+k},r.each(_,function(t){t.left=e.chartArea.left,t.top=e.chartArea.top,t.right=e.chartArea.right,t.bottom=e.chartArea.bottom,t.update(L,k)})}function N(e){var t=r.findNextWhere(x,function(t){return t.box===e});if(t)if(e.isHorizontal()){var n={left:Math.max(S,w),right:Math.max(C,Y),top:0,bottom:0};e.update(e.fullWidth?y:L,g/2,n)}else e.update(t.minSize.width,k)}function I(e){e.isHorizontal()?(e.left=e.fullWidth?l:S,e.right=e.fullWidth?t-u:S+L,e.top=R,e.bottom=R+e.height,R=e.bottom):(e.left=F,e.right=F+e.width,e.top=A,e.bottom=A+k,F=e.right)}}}},function(e,t,n){"use strict";var r=n(3);e.exports={formatters:{values:function(e){return r.isArray(e)?e:""+e},linear:function(e,t,n){var a=n.length>3?n[2]-n[1]:n[1]-n[0];Math.abs(a)>1&&e!==Math.floor(e)&&(a=e-Math.floor(e));var i=r.log10(Math.abs(a)),o="";if(0!==e){var s=-1*Math.floor(i);s=Math.max(Math.min(s,20),0),o=e.toFixed(s)}else o="0";return o},logarithmic:function(e,t,n){var a=e/Math.pow(10,Math.floor(r.log10(e)));return 0===e?"0":1===a||2===a||5===a||0===t||t===n.length-1?e.toExponential():""}}}},function(e,t,n){"use strict";var r={noop:function(){},uid:function(){var e=0;return function(){return e++}}(),isNullOrUndef:function(e){return null===e||void 0===e},isArray:Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},isObject:function(e){return null!==e&&"[object Object]"===Object.prototype.toString.call(e)},valueOrDefault:function(e,t){return void 0===e?t:e},valueAtIndexOrDefault:function(e,t,n){return r.valueOrDefault(r.isArray(e)?e[t]:e,n)},callback:function(e,t,n){if(e&&"function"==typeof e.call)return e.apply(n,t)},each:function(e,t,n,a){var i,o,s;if(r.isArray(e))if(o=e.length,a)for(i=o-1;i>=0;i--)t.call(n,e[i],i);else for(i=0;i<o;i++)t.call(n,e[i],i);else if(r.isObject(e))for(o=(s=Object.keys(e)).length,i=0;i<o;i++)t.call(n,e[s[i]],s[i])},arrayEquals:function(e,t){var n,a,i,o;if(!e||!t||e.length!==t.length)return!1;for(n=0,a=e.length;n<a;++n)if(i=e[n],o=t[n],i instanceof Array&&o instanceof Array){if(!r.arrayEquals(i,o))return!1}else if(i!==o)return!1;return!0},clone:function(e){if(r.isArray(e))return e.map(r.clone);if(r.isObject(e)){for(var t={},n=Object.keys(e),a=n.length,i=0;i<a;++i)t[n[i]]=r.clone(e[n[i]]);return t}return e},_merger:function(e,t,n,a){var i=t[e],o=n[e];r.isObject(i)&&r.isObject(o)?r.merge(i,o,a):t[e]=r.clone(o)},_mergerIf:function(e,t,n){var a=t[e],i=n[e];r.isObject(a)&&r.isObject(i)?r.mergeIf(a,i):t.hasOwnProperty(e)||(t[e]=r.clone(i))},merge:function(e,t,n){var a,i,o,s,l,u=r.isArray(t)?t:[t],d=u.length;if(!r.isObject(e))return e;for(a=(n=n||{}).merger||r._merger,i=0;i<d;++i)if(t=u[i],r.isObject(t))for(l=0,s=(o=Object.keys(t)).length;l<s;++l)a(o[l],e,t,n);return e},mergeIf:function(e,t){return r.merge(e,t,{merger:r._mergerIf})},extend:function(e){for(var t=function(t,n){e[n]=t},n=1,a=arguments.length;n<a;++n)r.each(arguments[n],t);return e},inherits:function(e){var t=this,n=e&&e.hasOwnProperty("constructor")?e.constructor:function(){return t.apply(this,arguments)},a=function(){this.constructor=n};return a.prototype=t.prototype,n.prototype=new a,n.extend=r.inherits,e&&r.extend(n.prototype,e),n.__super__=t.prototype,n}};e.exports=r,r.callCallback=r.callback,r.indexOf=function(e,t,n){return Array.prototype.indexOf.call(e,t,n)},r.getValueOrDefault=r.valueOrDefault,r.getValueAtIndexOrDefault=r.valueAtIndexOrDefault},function(e,t,n){"use strict";n.r(t);var r=n(5),a=n.n(r),i=n(2),o=n.n(i),s=n(1),l=n.n(s),u=n(7),d=n.n(u),c=n(6),f=n.n(c);function h(e){return"/"===e.charAt(0)}function m(e,t){for(var n=t,r=n+1,a=e.length;r<a;n+=1,r+=1)e[n]=e[r];e.pop()}var p=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],r=t&&t.split("/")||[],a=e&&h(e),i=t&&h(t),o=a||i;if(e&&h(e)?r=n:n.length&&(r.pop(),r=r.concat(n)),!r.length)return"/";var s=void 0;if(r.length){var l=r[r.length-1];s="."===l||".."===l||""===l}else s=!1;for(var u=0,d=r.length;d>=0;d--){var c=r[d];"."===c?m(r,d):".."===c?(m(r,d),u++):u&&(m(r,d),u--)}if(!o)for(;u--;u)r.unshift("..");!o||""===r[0]||r[0]&&h(r[0])||r.unshift("");var f=r.join("/");return s&&"/"!==f.substr(-1)&&(f+="/"),f},_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var y=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var r=void 0===t?"undefined":_(t);if(r!==(void 0===n?"undefined":_(n)))return!1;if("object"===r){var a=t.valueOf(),i=n.valueOf();if(a!==t||i!==n)return e(a,i);var o=Object.keys(t),s=Object.keys(n);return o.length===s.length&&o.every(function(r){return e(t[r],n[r])})}return!1},g=function(e){return"/"===e.charAt(0)?e:"/"+e},v=function(e){return"/"===e.charAt(0)?e.substr(1):e},M=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)},b=function(e,t){return M(e,t)?e.substr(t.length):e},L=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},k=function(e){var t=e.pathname,n=e.search,r=e.hash,a=t||"/";return n&&"?"!==n&&(a+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(a+="#"===r.charAt(0)?r:"#"+r),a},x=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},w=function(e,t,n,r){var a=void 0;"string"==typeof e?(a=function(e){var t=e||"/",n="",r="",a=t.indexOf("#");-1!==a&&(r=t.substr(a),t=t.substr(0,a));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(a=x({},e)).pathname&&(a.pathname=""),a.search?"?"!==a.search.charAt(0)&&(a.search="?"+a.search):a.search="",a.hash?"#"!==a.hash.charAt(0)&&(a.hash="#"+a.hash):a.hash="",void 0!==t&&void 0===a.state&&(a.state=t));try{a.pathname=decodeURI(a.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+a.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(a.key=n),r?a.pathname?"/"!==a.pathname.charAt(0)&&(a.pathname=p(a.pathname,r.pathname)):a.pathname=r.pathname:a.pathname||(a.pathname="/"),a},Y=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&y(e.state,t.state)},T=function(){var e=null,t=[];return{setPrompt:function(t){return d()(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,a){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,a):(d()(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),a(!0)):a(!1!==i)}else a(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}},D=!("undefined"==typeof window||!window.document||!window.document.createElement),S=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},C=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},A=function(e,t){return t(window.confirm(e))},j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},E=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},P=function(){try{return window.history.state||{}}catch(e){return{}}},H=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};f()(D,"Browser history needs a DOM");var t=window.history,n=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history}(),r=!(-1===window.navigator.userAgent.indexOf("Trident")),a=e.forceRefresh,i=void 0!==a&&a,o=e.getUserConfirmation,s=void 0===o?A:o,l=e.keyLength,u=void 0===l?6:l,c=e.basename?L(g(e.basename)):"",h=function(e){var t=e||{},n=t.key,r=t.state,a=window.location,i=a.pathname+a.search+a.hash;return d()(!c||M(i,c),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+i+'" to begin with "'+c+'".'),c&&(i=b(i,c)),w(i,r,n)},m=function(){return Math.random().toString(36).substr(2,u)},p=T(),_=function(e){E(B,e),B.length=t.length,p.notifyListeners(B.location,B.action)},y=function(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||Y(h(e.state))},v=function(){Y(h(P()))},x=!1,Y=function(e){x?(x=!1,_()):p.confirmTransitionTo(e,"POP",s,function(t){t?_({action:"POP",location:e}):H(e)})},H=function(e){var t=B.location,n=F.indexOf(t.key);-1===n&&(n=0);var r=F.indexOf(e.key);-1===r&&(r=0);var a=n-r;a&&(x=!0,N(a))},O=h(P()),F=[O.key],R=function(e){return c+k(e)},N=function(e){t.go(e)},I=0,W=function(e){1===(I+=e)?(S(window,"popstate",y),r&&S(window,"hashchange",v)):0===I&&(C(window,"popstate",y),r&&C(window,"hashchange",v))},z=!1,B={length:t.length,action:"POP",location:O,createHref:R,push:function(e,r){d()(!("object"===(void 0===e?"undefined":j(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var a=w(e,r,m(),B.location);p.confirmTransitionTo(a,"PUSH",s,function(e){if(e){var r=R(a),o=a.key,s=a.state;if(n)if(t.pushState({key:o,state:s},null,r),i)window.location.href=r;else{var l=F.indexOf(B.location.key),u=F.slice(0,-1===l?0:l+1);u.push(a.key),F=u,_({action:"PUSH",location:a})}else d()(void 0===s,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,r){d()(!("object"===(void 0===e?"undefined":j(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var a=w(e,r,m(),B.location);p.confirmTransitionTo(a,"REPLACE",s,function(e){if(e){var r=R(a),o=a.key,s=a.state;if(n)if(t.replaceState({key:o,state:s},null,r),i)window.location.replace(r);else{var l=F.indexOf(B.location.key);-1!==l&&(F[l]=a.key),_({action:"REPLACE",location:a})}else d()(void 0===s,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:N,goBack:function(){return N(-1)},goForward:function(){return N(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=p.setPrompt(e);return z||(W(1),z=!0),function(){return z&&(z=!1,W(-1)),t()}},listen:function(e){var t=p.appendListener(e);return W(1),function(){W(-1),t()}}};return B},O=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},F={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+v(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:v,decodePath:g},slash:{encodePath:g,decodePath:g}},R=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},N=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)},I=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};f()(D,"Hash history needs a DOM");var t=window.history,n=-1===window.navigator.userAgent.indexOf("Firefox"),r=e.getUserConfirmation,a=void 0===r?A:r,i=e.hashType,o=void 0===i?"slash":i,s=e.basename?L(g(e.basename)):"",l=F[o],u=l.encodePath,c=l.decodePath,h=function(){var e=c(R());return d()(!s||M(e,s),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+s+'".'),s&&(e=b(e,s)),w(e)},m=T(),p=function(e){O(V,e),V.length=t.length,m.notifyListeners(V.location,V.action)},_=!1,y=null,v=function(){var e=R(),t=u(e);if(e!==t)N(t);else{var n=h(),r=V.location;if(!_&&Y(r,n))return;if(y===k(n))return;y=null,x(n)}},x=function(e){_?(_=!1,p()):m.confirmTransitionTo(e,"POP",a,function(t){t?p({action:"POP",location:e}):j(e)})},j=function(e){var t=V.location,n=I.lastIndexOf(k(t));-1===n&&(n=0);var r=I.lastIndexOf(k(e));-1===r&&(r=0);var a=n-r;a&&(_=!0,W(a))},E=R(),P=u(E);E!==P&&N(P);var H=h(),I=[k(H)],W=function(e){d()(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},z=0,B=function(e){1===(z+=e)?S(window,"hashchange",v):0===z&&C(window,"hashchange",v)},U=!1,V={length:t.length,action:"POP",location:H,createHref:function(e){return"#"+u(s+k(e))},push:function(e,t){d()(void 0===t,"Hash history cannot push state; it is ignored");var n=w(e,void 0,void 0,V.location);m.confirmTransitionTo(n,"PUSH",a,function(e){if(e){var t=k(n),r=u(s+t);if(R()!==r){y=t,function(e){window.location.hash=e}(r);var a=I.lastIndexOf(k(V.location)),i=I.slice(0,-1===a?0:a+1);i.push(t),I=i,p({action:"PUSH",location:n})}else d()(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),p()}})},replace:function(e,t){d()(void 0===t,"Hash history cannot replace state; it is ignored");var n=w(e,void 0,void 0,V.location);m.confirmTransitionTo(n,"REPLACE",a,function(e){if(e){var t=k(n),r=u(s+t);R()!==r&&(y=t,N(r));var a=I.indexOf(k(V.location));-1!==a&&(I[a]=t),p({action:"REPLACE",location:n})}})},go:W,goBack:function(){return W(-1)},goForward:function(){return W(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=m.setPrompt(e);return U||(B(1),U=!0),function(){return U&&(U=!1,B(-1)),t()}},listen:function(e){var t=m.appendListener(e);return B(1),function(){B(-1),t()}}};return V},W="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},z=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},B=function(e,t,n){return Math.min(Math.max(e,t),n)},U=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,r=void 0===n?["/"]:n,a=e.initialIndex,i=void 0===a?0:a,o=e.keyLength,s=void 0===o?6:o,l=T(),u=function(e){z(_,e),_.length=_.entries.length,l.notifyListeners(_.location,_.action)},c=function(){return Math.random().toString(36).substr(2,s)},f=B(i,0,r.length-1),h=r.map(function(e){return w(e,void 0,"string"==typeof e?c():e.key||c())}),m=k,p=function(e){var n=B(_.index+e,0,_.entries.length-1),r=_.entries[n];l.confirmTransitionTo(r,"POP",t,function(e){e?u({action:"POP",location:r,index:n}):u()})},_={length:h.length,action:"POP",location:h[f],index:f,entries:h,createHref:m,push:function(e,n){d()(!("object"===(void 0===e?"undefined":W(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var r=w(e,n,c(),_.location);l.confirmTransitionTo(r,"PUSH",t,function(e){if(e){var t=_.index+1,n=_.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),u({action:"PUSH",location:r,index:t,entries:n})}})},replace:function(e,n){d()(!("object"===(void 0===e?"undefined":W(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var r=w(e,n,c(),_.location);l.confirmTransitionTo(r,"REPLACE",t,function(e){e&&(_.entries[_.index]=r,u({action:"REPLACE",location:r}))})},go:p,goBack:function(){return p(-1)},goForward:function(){return p(1)},canGo:function(e){var t=_.index+e;return t>=0&&t<_.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return l.setPrompt(e)},listen:function(e){return l.appendListener(e)}};return _},V=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function q(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var J=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),o=0;o<a;o++)i[o]=arguments[o];return n=r=q(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props.history.location.pathname)},q(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:V({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;f()(null==n||1===o.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){e.setState({match:e.computeMatch(r.location.pathname)})})},t.prototype.componentWillReceiveProps=function(e){a()(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?o.a.Children.only(e):null},t}(o.a.Component);J.propTypes={history:l.a.object.isRequired,children:l.a.node},J.contextTypes={router:l.a.object},J.childContextTypes={router:l.a.object.isRequired};var G=J,$=G;function K(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var Q=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),o=0;o<a;o++)i[o]=arguments[o];return n=r=K(this,e.call.apply(e,[this].concat(i))),r.history=H(r.props),K(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){a()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return o.a.createElement($,{history:this.history,children:this.props.children})},t}(o.a.Component);Q.propTypes={basename:l.a.string,forceRefresh:l.a.bool,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var Z=Q;function X(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ee=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),o=0;o<a;o++)i[o]=arguments[o];return n=r=X(this,e.call.apply(e,[this].concat(i))),r.history=I(r.props),X(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){a()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return o.a.createElement($,{history:this.history,children:this.props.children})},t}(o.a.Component);ee.propTypes={basename:l.a.string,getUserConfirmation:l.a.func,hashType:l.a.oneOf(["hashbang","noslash","slash"]),children:l.a.node};var te=ee,ne=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function re(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ae=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},ie=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),o=0;o<a;o++)i[o]=arguments[o];return n=r=re(this,e.call.apply(e,[this].concat(i))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!ae(e)){e.preventDefault();var t=r.context.router.history,n=r.props,a=n.replace,i=n.to;a?t.replace(i):t.push(i)}},re(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);f()(this.context.router,"You should not use <Link> outside a <Router>"),f()(void 0!==t,'You must specify the "to" property');var a=this.context.router.history,i="string"==typeof t?w(t,null,null,a.location):t,s=a.createHref(i);return o.a.createElement("a",ne({},r,{onClick:this.handleClick,href:s,ref:n}))},t}(o.a.Component);ie.propTypes={onClick:l.a.func,target:l.a.string,replace:l.a.bool,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired,innerRef:l.a.oneOfType([l.a.string,l.a.func])},ie.defaultProps={replace:!1},ie.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired,createHref:l.a.func.isRequired}).isRequired}).isRequired};var oe=ie;function se(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var le=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),o=0;o<a;o++)i[o]=arguments[o];return n=r=se(this,e.call.apply(e,[this].concat(i))),r.history=U(r.props),se(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){a()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return o.a.createElement(G,{history:this.history,children:this.props.children})},t}(o.a.Component);le.propTypes={initialEntries:l.a.array,initialIndex:l.a.number,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var ue=le,de=n(16),ce=n.n(de),fe={},he=0,me=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];"string"==typeof t&&(t={path:t});var r=t,a=r.path,i=r.exact,o=void 0!==i&&i,s=r.strict,l=void 0!==s&&s,u=r.sensitive,d=void 0!==u&&u;if(null==a)return n;var c=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=fe[n]||(fe[n]={});if(r[e])return r[e];var a=[],i={re:ce()(e,a,t),keys:a};return he<1e4&&(r[e]=i,he++),i}(a,{end:o,strict:l,sensitive:d}),f=c.re,h=c.keys,m=f.exec(e);if(!m)return null;var p=m[0],_=m.slice(1),y=e===p;return o&&!y?null:{path:a,url:"/"===a&&""===p?"/":p,isExact:y,params:h.reduce(function(e,t,n){return e[t.name]=_[n],e},{})}},pe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function _e(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ye=function(e){return 0===o.a.Children.count(e)},ge=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),o=0;o<a;o++)i[o]=arguments[o];return n=r=_e(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props,r.context.router)},_e(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:pe({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,a=e.path,i=e.strict,o=e.exact,s=e.sensitive;if(n)return n;f()(t,"You should not use <Route> or withRouter() outside a <Router>");var l=t.route,u=(r||l.location).pathname;return me(u,{path:a,strict:i,exact:o,sensitive:s},l.match)},t.prototype.componentWillMount=function(){a()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),a()(!(this.props.component&&this.props.children&&!ye(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),a()(!(this.props.render&&this.props.children&&!ye(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){a()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),a()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,a=t.render,i=this.context.router,s=i.history,l=i.route,u=i.staticContext,d={match:e,location:this.props.location||l.location,history:s,staticContext:u};return r?e?o.a.createElement(r,d):null:a?e?a(d):null:"function"==typeof n?n(d):n&&!ye(n)?o.a.Children.only(n):null},t}(o.a.Component);ge.propTypes={computedMatch:l.a.object,path:l.a.string,exact:l.a.bool,strict:l.a.bool,sensitive:l.a.bool,component:l.a.func,render:l.a.func,children:l.a.oneOfType([l.a.func,l.a.node]),location:l.a.object},ge.contextTypes={router:l.a.shape({history:l.a.object.isRequired,route:l.a.object.isRequired,staticContext:l.a.object})},ge.childContextTypes={router:l.a.object.isRequired};var ve=ge,Me=ve,be=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Le="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var ke=function(e){var t=e.to,n=e.exact,r=e.strict,a=e.location,i=e.activeClassName,s=e.className,l=e.activeStyle,u=e.style,d=e.isActive,c=e["aria-current"],f=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","aria-current"]),h="object"===(void 0===t?"undefined":Le(t))?t.pathname:t,m=h&&h.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1");return o.a.createElement(Me,{path:m,exact:n,strict:r,location:a,children:function(e){var n=e.location,r=e.match,a=!!(d?d(r,n):r);return o.a.createElement(oe,be({to:t,className:a?[s,i].filter(function(e){return e}).join(" "):s,style:a?be({},u,l):u,"aria-current":a&&c||null},f))}})};ke.propTypes={to:oe.propTypes.to,exact:l.a.bool,strict:l.a.bool,location:l.a.object,activeClassName:l.a.string,className:l.a.string,activeStyle:l.a.object,style:l.a.object,isActive:l.a.func,"aria-current":l.a.oneOf(["page","step","location","date","time","true"])},ke.defaultProps={activeClassName:"active","aria-current":"page"};var xe=ke;var we=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){f()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(o.a.Component);we.propTypes={when:l.a.bool,message:l.a.oneOfType([l.a.func,l.a.string]).isRequired},we.defaultProps={when:!0},we.contextTypes={router:l.a.shape({history:l.a.shape({block:l.a.func.isRequired}).isRequired}).isRequired};var Ye=we,Te={},De=0,Se=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"/"===e?e:function(e){var t=e,n=Te[t]||(Te[t]={});if(n[e])return n[e];var r=ce.a.compile(e);return De<1e4&&(n[e]=r,De++),r}(e)(t,{pretty:!0})},Ce=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var Ae=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){f()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=w(e.to),n=w(this.props.to);Y(t,n)?a()(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},t.prototype.computeTo=function(e){var t=e.computedMatch,n=e.to;return t?"string"==typeof n?Se(n,t.params):Ce({},n,{pathname:Se(n.pathname,t.params)}):n},t.prototype.perform=function(){var e=this.context.router.history,t=this.props.push,n=this.computeTo(this.props);t?e.push(n):e.replace(n)},t.prototype.render=function(){return null},t}(o.a.Component);Ae.propTypes={computedMatch:l.a.object,push:l.a.bool,from:l.a.string,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired},Ae.defaultProps={push:!1},Ae.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired}).isRequired,staticContext:l.a.object}).isRequired};var je=Ae,Ee=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function Pe(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var He=function(e){return"/"===e.charAt(0)?e:"/"+e},Oe=function(e,t){return e?Ee({},t,{pathname:He(e)+t.pathname}):t},Fe=function(e){return"string"==typeof e?e:k(e)},Re=function(e){return function(){f()(!1,"You cannot %s with <StaticRouter>",e)}},Ne=function(){},Ie=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),o=0;o<a;o++)i[o]=arguments[o];return n=r=Pe(this,e.call.apply(e,[this].concat(i))),r.createHref=function(e){return He(r.props.basename+Fe(e))},r.handlePush=function(e){var t=r.props,n=t.basename,a=t.context;a.action="PUSH",a.location=Oe(n,w(e)),a.url=Fe(a.location)},r.handleReplace=function(e){var t=r.props,n=t.basename,a=t.context;a.action="REPLACE",a.location=Oe(n,w(e)),a.url=Fe(a.location)},r.handleListen=function(){return Ne},r.handleBlock=function(){return Ne},Pe(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){a()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var e=this.props,t=e.basename,n=(e.context,e.location),r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["basename","context","location"]),a={createHref:this.createHref,action:"POP",location:function(e,t){if(!e)return t;var n=He(e);return 0!==t.pathname.indexOf(n)?t:Ee({},t,{pathname:t.pathname.substr(n.length)})}(t,w(n)),push:this.handlePush,replace:this.handleReplace,go:Re("go"),goBack:Re("goBack"),goForward:Re("goForward"),listen:this.handleListen,block:this.handleBlock};return o.a.createElement(G,Ee({},r,{history:a}))},t}(o.a.Component);Ie.propTypes={basename:l.a.string,context:l.a.object.isRequired,location:l.a.oneOfType([l.a.string,l.a.object])},Ie.defaultProps={basename:"",location:"/"},Ie.childContextTypes={router:l.a.object.isRequired};var We=Ie;var ze=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){f()(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){a()(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),a()(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,r=void 0,a=void 0;return o.a.Children.forEach(t,function(t){if(null==r&&o.a.isValidElement(t)){var i=t.props,s=i.path,l=i.exact,u=i.strict,d=i.sensitive,c=i.from,f=s||c;a=t,r=me(n.pathname,{path:f,exact:l,strict:u,sensitive:d},e.match)}}),r?o.a.cloneElement(a,{location:n,computedMatch:r}):null},t}(o.a.Component);ze.contextTypes={router:l.a.shape({route:l.a.object.isRequired}).isRequired},ze.propTypes={children:l.a.node,location:l.a.object};var Be=ze,Ue=Se,Ve=me,qe=n(151),Je=n.n(qe),Ge=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var $e=function(e){var t=function(t){var n=t.wrappedComponentRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["wrappedComponentRef"]);return o.a.createElement(ve,{children:function(t){return o.a.createElement(e,Ge({},r,t,{ref:n}))}})};return t.displayName="withRouter("+(e.displayName||e.name)+")",t.WrappedComponent=e,t.propTypes={wrappedComponentRef:l.a.func},Je()(t,e)};n.d(t,"BrowserRouter",function(){return Z}),n.d(t,"HashRouter",function(){return te}),n.d(t,"Link",function(){return oe}),n.d(t,"MemoryRouter",function(){return ue}),n.d(t,"NavLink",function(){return xe}),n.d(t,"Prompt",function(){return Ye}),n.d(t,"Redirect",function(){return je}),n.d(t,"Route",function(){return Me}),n.d(t,"Router",function(){return $}),n.d(t,"StaticRouter",function(){return We}),n.d(t,"Switch",function(){return Be}),n.d(t,"generatePath",function(){return Ue}),n.d(t,"matchPath",function(){return Ve}),n.d(t,"withRouter",function(){return $e})},function(e,t,n){var r=n(172);e.exports=m,e.exports.parse=i,e.exports.compile=function(e,t){return l(i(e,t))},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=h;var a=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,o=0,s="",l=t&&t.delimiter||"/";null!=(n=a.exec(e));){var c=n[0],f=n[1],h=n.index;if(s+=e.slice(o,h),o=h+c.length,f)s+=f[1];else{var m=e[o],p=n[2],_=n[3],y=n[4],g=n[5],v=n[6],M=n[7];s&&(r.push(s),s="");var b=null!=p&&null!=m&&m!==p,L="+"===v||"*"===v,k="?"===v||"*"===v,x=n[2]||l,w=y||g;r.push({name:_||i++,prefix:p||"",delimiter:x,optional:k,repeat:L,partial:b,asterisk:!!M,pattern:w?d(w):M?".*":"[^"+u(x)+"]+?"})}}return o<e.length&&(s+=e.substr(o)),s&&r.push(s),r}function o(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function s(e){return encodeURI(e).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function l(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,a){for(var i="",l=n||{},u=(a||{}).pretty?o:encodeURIComponent,d=0;d<e.length;d++){var c=e[d];if("string"!=typeof c){var f,h=l[c.name];if(null==h){if(c.optional){c.partial&&(i+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(h)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(h)+"`");if(0===h.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var m=0;m<h.length;m++){if(f=u(h[m]),!t[d].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===m?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?s(h):u(h),!t[d].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');i+=c.prefix+f}}else i+=c}return i}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function d(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e.sensitive?"":"i"}function h(e,t,n){r(t)||(n=t||n,t=[]);for(var a=(n=n||{}).strict,i=!1!==n.end,o="",s=0;s<e.length;s++){var l=e[s];if("string"==typeof l)o+=u(l);else{var d=u(l.prefix),h="(?:"+l.pattern+")";t.push(l),l.repeat&&(h+="(?:"+d+h+")*"),o+=h=l.optional?l.partial?d+"("+h+")?":"(?:"+d+"("+h+"))?":d+"("+h+")"}}var m=u(n.delimiter||"/"),p=o.slice(-m.length)===m;return a||(o=(p?o.slice(0,-m.length):o)+"(?:"+m+"(?=$))?"),o+=i?"$":a&&p?"":"(?="+m+"|$)",c(new RegExp("^"+o,f(n)),t)}function m(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],a=0;a<e.length;a++)r.push(m(e[a],t,n).source);return c(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return h(i(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,o,s=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var u in n=Object(arguments[l]))a.call(n,u)&&(s[u]=n[u]);if(r){o=r(n);for(var d=0;d<o.length;d++)i.call(n,o[d])&&(s[o[d]]=n[o[d]])}}return s}},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,a,i,o,s,l){if(r(t),!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var d=[n,a,i,o,s,l],c=0;(u=new Error(t.replace(/%s/g,function(){return d[c++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";function r(e){return function(){return e}}var a=function(){};a.thatReturns=r,a.thatReturnsFalse=r(!1),a.thatReturnsTrue=r(!0),a.thatReturnsNull=r(null),a.thatReturnsThis=function(){return this},a.thatReturnsArgument=function(e){return e},e.exports=a},function(e,t,n){"use strict";const r=n(167),a=n(168);function i(e,t){return t.encode?t.strict?r(e):encodeURIComponent(e):e}function o(e,t){return t.decode?a(e):e}function s(e){const t=e.indexOf("?");return-1===t?"":e.slice(t+1)}function l(e,t){const n=function(e){let t;switch(e.arrayFormat){case"index":return(e,n,r)=>{t=/\[(\d*)\]$/.exec(e),e=e.replace(/\[\d*\]$/,""),t?(void 0===r[e]&&(r[e]={}),r[e][t[1]]=n):r[e]=n};case"bracket":return(e,n,r)=>{t=/(\[\])$/.exec(e),e=e.replace(/\[\]$/,""),t?void 0!==r[e]?r[e]=[].concat(r[e],n):r[e]=[n]:r[e]=n};default:return(e,t,n)=>{void 0!==n[e]?n[e]=[].concat(n[e],t):n[e]=t}}}(t=Object.assign({decode:!0,arrayFormat:"none"},t)),r=Object.create(null);if("string"!=typeof e)return r;if(!(e=e.trim().replace(/^[?#&]/,"")))return r;for(const a of e.split("&")){let[e,i]=a.replace(/\+/g," ").split("=");i=void 0===i?null:o(i,t),n(o(e,t),i,r)}return Object.keys(r).sort().reduce((e,t)=>{const n=r[t];return Boolean(n)&&"object"==typeof n&&!Array.isArray(n)?e[t]=function e(t){return Array.isArray(t)?t.sort():"object"==typeof t?e(Object.keys(t)).sort((e,t)=>Number(e)-Number(t)).map(e=>t[e]):t}(n):e[t]=n,e},Object.create(null))}t.extract=s,t.parse=l,t.stringify=((e,t)=>{!1===(t=Object.assign({encode:!0,strict:!0,arrayFormat:"none"},t)).sort&&(t.sort=(()=>{}));const n=function(e){switch(e.arrayFormat){case"index":return(t,n,r)=>null===n?[i(t,e),"[",r,"]"].join(""):[i(t,e),"[",i(r,e),"]=",i(n,e)].join("");case"bracket":return(t,n)=>null===n?[i(t,e),"[]"].join(""):[i(t,e),"[]=",i(n,e)].join("");default:return(t,n)=>null===n?i(t,e):[i(t,e),"=",i(n,e)].join("")}}(t);return e?Object.keys(e).sort(t.sort).map(r=>{const a=e[r];if(void 0===a)return"";if(null===a)return i(r,t);if(Array.isArray(a)){const e=[];for(const t of a.slice())void 0!==t&&e.push(n(r,t,e.length));return e.join("&")}return i(r,t)+"="+i(a,t)}).filter(e=>e.length>0).join("&"):""}),t.parseUrl=((e,t)=>({url:e.split("?")[0]||"",query:l(s(e),t)}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getSectorData=function(e){return a(`https://api.iextrading.com/1.0/stock/market/collection/sector?collectionName=${e}`)},t.getStockData=function(e){return a(`https://api.iextrading.com/1.0/stock/${e}/batch?types=company,book,news,chart`)};const r=e=>{throw e},a=e=>fetch(e).then(e=>e.ok?e.json():e.json().then(r))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.removeFavorite=t.getFavorite=t.getFavorites=t.addFavorite=void 0;var r=n(191);const a="https://alchemy-lab-965b5.firebaseio.com/favorites",i=e=>`${a}/id-${e}.json`;t.addFavorite=(({symbol:e,companyName:t})=>{const n=i(e);return(0,r.put)(n,{symbol:e,companyName:t})}),t.getFavorites=(()=>(0,r.get)(`${a}.json`).then(e=>Object.keys(e).map(t=>e[t]))),t.getFavorite=(e=>{const t=i(e);return(0,r.get)(t)}),t.removeFavorite=(e=>{const t=i(e);return(0,r.del)(t)})},function(e,t,n){var r=n(206),a=n(208),i=function(e){return e instanceof i?e:this instanceof i?(this.valid=!1,this.values={rgb:[0,0,0],hsl:[0,0,0],hsv:[0,0,0],hwb:[0,0,0],cmyk:[0,0,0,0],alpha:1},void("string"==typeof e?(t=a.getRgba(e))?this.setValues("rgb",t):(t=a.getHsla(e))?this.setValues("hsl",t):(t=a.getHwb(e))&&this.setValues("hwb",t):"object"==typeof e&&(void 0!==(t=e).r||void 0!==t.red?this.setValues("rgb",t):void 0!==t.l||void 0!==t.lightness?this.setValues("hsl",t):void 0!==t.v||void 0!==t.value?this.setValues("hsv",t):void 0!==t.w||void 0!==t.whiteness?this.setValues("hwb",t):void 0===t.c&&void 0===t.cyan||this.setValues("cmyk",t)))):new i(e);var t};i.prototype={isValid:function(){return this.valid},rgb:function(){return this.setSpace("rgb",arguments)},hsl:function(){return this.setSpace("hsl",arguments)},hsv:function(){return this.setSpace("hsv",arguments)},hwb:function(){return this.setSpace("hwb",arguments)},cmyk:function(){return this.setSpace("cmyk",arguments)},rgbArray:function(){return this.values.rgb},hslArray:function(){return this.values.hsl},hsvArray:function(){return this.values.hsv},hwbArray:function(){var e=this.values;return 1!==e.alpha?e.hwb.concat([e.alpha]):e.hwb},cmykArray:function(){return this.values.cmyk},rgbaArray:function(){var e=this.values;return e.rgb.concat([e.alpha])},hslaArray:function(){var e=this.values;return e.hsl.concat([e.alpha])},alpha:function(e){return void 0===e?this.values.alpha:(this.setValues("alpha",e),this)},red:function(e){return this.setChannel("rgb",0,e)},green:function(e){return this.setChannel("rgb",1,e)},blue:function(e){return this.setChannel("rgb",2,e)},hue:function(e){return e&&(e=(e%=360)<0?360+e:e),this.setChannel("hsl",0,e)},saturation:function(e){return this.setChannel("hsl",1,e)},lightness:function(e){return this.setChannel("hsl",2,e)},saturationv:function(e){return this.setChannel("hsv",1,e)},whiteness:function(e){return this.setChannel("hwb",1,e)},blackness:function(e){return this.setChannel("hwb",2,e)},value:function(e){return this.setChannel("hsv",2,e)},cyan:function(e){return this.setChannel("cmyk",0,e)},magenta:function(e){return this.setChannel("cmyk",1,e)},yellow:function(e){return this.setChannel("cmyk",2,e)},black:function(e){return this.setChannel("cmyk",3,e)},hexString:function(){return a.hexString(this.values.rgb)},rgbString:function(){return a.rgbString(this.values.rgb,this.values.alpha)},rgbaString:function(){return a.rgbaString(this.values.rgb,this.values.alpha)},percentString:function(){return a.percentString(this.values.rgb,this.values.alpha)},hslString:function(){return a.hslString(this.values.hsl,this.values.alpha)},hslaString:function(){return a.hslaString(this.values.hsl,this.values.alpha)},hwbString:function(){return a.hwbString(this.values.hwb,this.values.alpha)},keyword:function(){return a.keyword(this.values.rgb,this.values.alpha)},rgbNumber:function(){var e=this.values.rgb;return e[0]<<16|e[1]<<8|e[2]},luminosity:function(){for(var e=this.values.rgb,t=[],n=0;n<e.length;n++){var r=e[n]/255;t[n]=r<=.03928?r/12.92:Math.pow((r+.055)/1.055,2.4)}return.2126*t[0]+.7152*t[1]+.0722*t[2]},contrast:function(e){var t=this.luminosity(),n=e.luminosity();return t>n?(t+.05)/(n+.05):(n+.05)/(t+.05)},level:function(e){var t=this.contrast(e);return t>=7.1?"AAA":t>=4.5?"AA":""},dark:function(){var e=this.values.rgb;return(299*e[0]+587*e[1]+114*e[2])/1e3<128},light:function(){return!this.dark()},negate:function(){for(var e=[],t=0;t<3;t++)e[t]=255-this.values.rgb[t];return this.setValues("rgb",e),this},lighten:function(e){var t=this.values.hsl;return t[2]+=t[2]*e,this.setValues("hsl",t),this},darken:function(e){var t=this.values.hsl;return t[2]-=t[2]*e,this.setValues("hsl",t),this},saturate:function(e){var t=this.values.hsl;return t[1]+=t[1]*e,this.setValues("hsl",t),this},desaturate:function(e){var t=this.values.hsl;return t[1]-=t[1]*e,this.setValues("hsl",t),this},whiten:function(e){var t=this.values.hwb;return t[1]+=t[1]*e,this.setValues("hwb",t),this},blacken:function(e){var t=this.values.hwb;return t[2]+=t[2]*e,this.setValues("hwb",t),this},greyscale:function(){var e=this.values.rgb,t=.3*e[0]+.59*e[1]+.11*e[2];return this.setValues("rgb",[t,t,t]),this},clearer:function(e){var t=this.values.alpha;return this.setValues("alpha",t-t*e),this},opaquer:function(e){var t=this.values.alpha;return this.setValues("alpha",t+t*e),this},rotate:function(e){var t=this.values.hsl,n=(t[0]+e)%360;return t[0]=n<0?360+n:n,this.setValues("hsl",t),this},mix:function(e,t){var n=e,r=void 0===t?.5:t,a=2*r-1,i=this.alpha()-n.alpha(),o=((a*i==-1?a:(a+i)/(1+a*i))+1)/2,s=1-o;return this.rgb(o*this.red()+s*n.red(),o*this.green()+s*n.green(),o*this.blue()+s*n.blue()).alpha(this.alpha()*r+n.alpha()*(1-r))},toJSON:function(){return this.rgb()},clone:function(){var e,t,n=new i,r=this.values,a=n.values;for(var o in r)r.hasOwnProperty(o)&&(e=r[o],"[object Array]"===(t={}.toString.call(e))?a[o]=e.slice(0):"[object Number]"===t?a[o]=e:console.error("unexpected color value:",e));return n}},i.prototype.spaces={rgb:["red","green","blue"],hsl:["hue","saturation","lightness"],hsv:["hue","saturation","value"],hwb:["hue","whiteness","blackness"],cmyk:["cyan","magenta","yellow","black"]},i.prototype.maxes={rgb:[255,255,255],hsl:[360,100,100],hsv:[360,100,100],hwb:[360,100,100],cmyk:[100,100,100,100]},i.prototype.getValues=function(e){for(var t=this.values,n={},r=0;r<e.length;r++)n[e.charAt(r)]=t[e][r];return 1!==t.alpha&&(n.a=t.alpha),n},i.prototype.setValues=function(e,t){var n,a,i=this.values,o=this.spaces,s=this.maxes,l=1;if(this.valid=!0,"alpha"===e)l=t;else if(t.length)i[e]=t.slice(0,e.length),l=t[e.length];else if(void 0!==t[e.charAt(0)]){for(n=0;n<e.length;n++)i[e][n]=t[e.charAt(n)];l=t.a}else if(void 0!==t[o[e][0]]){var u=o[e];for(n=0;n<e.length;n++)i[e][n]=t[u[n]];l=t.alpha}if(i.alpha=Math.max(0,Math.min(1,void 0===l?i.alpha:l)),"alpha"===e)return!1;for(n=0;n<e.length;n++)a=Math.max(0,Math.min(s[e][n],i[e][n])),i[e][n]=Math.round(a);for(var d in o)d!==e&&(i[d]=r[e][d](i[e]));return!0},i.prototype.setSpace=function(e,t){var n=t[0];return void 0===n?this.getValues(e):("number"==typeof n&&(n=Array.prototype.slice.call(t)),this.setValues(e,n),this)},i.prototype.setChannel=function(e,t,n){var r=this.values[e];return void 0===n?r[t]:n===r[t]?this:(r[t]=n,this.setValues(e,r),this)},"undefined"!=typeof window&&(window.Color=i),e.exports=i},function(e,t,n){"use strict";var r=n(3);function a(e,t){return e.native?{x:e.x,y:e.y}:r.getRelativePosition(e,t)}function i(e,t){var n,r,a,i,o;for(r=0,i=e.data.datasets.length;r<i;++r)if(e.isDatasetVisible(r))for(a=0,o=(n=e.getDatasetMeta(r)).data.length;a<o;++a){var s=n.data[a];s._view.skip||t(s)}}function o(e,t){var n=[];return i(e,function(e){e.inRange(t.x,t.y)&&n.push(e)}),n}function s(e,t,n,r){var a=Number.POSITIVE_INFINITY,o=[];return i(e,function(e){if(!n||e.inRange(t.x,t.y)){var i=e.getCenterPoint(),s=r(t,i);s<a?(o=[e],a=s):s===a&&o.push(e)}}),o}function l(e){var t=-1!==e.indexOf("x"),n=-1!==e.indexOf("y");return function(e,r){var a=t?Math.abs(e.x-r.x):0,i=n?Math.abs(e.y-r.y):0;return Math.sqrt(Math.pow(a,2)+Math.pow(i,2))}}function u(e,t,n){var r=a(t,e);n.axis=n.axis||"x";var i=l(n.axis),u=n.intersect?o(e,r):s(e,r,!1,i),d=[];return u.length?(e.data.datasets.forEach(function(t,n){if(e.isDatasetVisible(n)){var r=e.getDatasetMeta(n).data[u[0]._index];r&&!r._view.skip&&d.push(r)}}),d):[]}e.exports={modes:{single:function(e,t){var n=a(t,e),r=[];return i(e,function(e){if(e.inRange(n.x,n.y))return r.push(e),r}),r.slice(0,1)},label:u,index:u,dataset:function(e,t,n){var r=a(t,e);n.axis=n.axis||"xy";var i=l(n.axis),u=n.intersect?o(e,r):s(e,r,!1,i);return u.length>0&&(u=e.getDatasetMeta(u[0]._datasetIndex).data),u},"x-axis":function(e,t){return u(e,t,{intersect:!1})},point:function(e,t){return o(e,a(t,e))},nearest:function(e,t,n){var r=a(t,e);n.axis=n.axis||"xy";var i=l(n.axis),o=s(e,r,n.intersect,i);return o.length>1&&o.sort(function(e,t){var n=e.getArea()-t.getArea();return 0===n&&(n=e._datasetIndex-t._datasetIndex),n}),o.slice(0,1)},x:function(e,t,n){var r=a(t,e),o=[],s=!1;return i(e,function(e){e.inXRange(r.x)&&o.push(e),e.inRange(r.x,r.y)&&(s=!0)}),n.intersect&&!s&&(o=[]),o},y:function(e,t,n){var r=a(t,e),o=[],s=!1;return i(e,function(e){e.inYRange(r.y)&&o.push(e),e.inRange(r.x,r.y)&&(s=!0)}),n.intersect&&!s&&(o=[]),o}}}},function(e,t,n){"use strict";var r=n(3),a=n(214),i=n(215),o=i._enabled?i:a;e.exports=r.extend({initialize:function(){},acquireContext:function(){},releaseContext:function(){},addEventListener:function(){},removeEventListener:function(){}},o)},function(e,t,n){"use strict";var r=n(4),a=n(3);r._set("global",{plugins:{}}),e.exports={_plugins:[],_cacheId:0,register:function(e){var t=this._plugins;[].concat(e).forEach(function(e){-1===t.indexOf(e)&&t.push(e)}),this._cacheId++},unregister:function(e){var t=this._plugins;[].concat(e).forEach(function(e){var n=t.indexOf(e);-1!==n&&t.splice(n,1)}),this._cacheId++},clear:function(){this._plugins=[],this._cacheId++},count:function(){return this._plugins.length},getAll:function(){return this._plugins},notify:function(e,t,n){var r,a,i,o,s,l=this.descriptors(e),u=l.length;for(r=0;r<u;++r)if("function"==typeof(s=(i=(a=l[r]).plugin)[t])&&((o=[e].concat(n||[])).push(a.options),!1===s.apply(i,o)))return!1;return!0},descriptors:function(e){var t=e.$plugins||(e.$plugins={});if(t.id===this._cacheId)return t.descriptors;var n=[],i=[],o=e&&e.config||{},s=o.options&&o.options.plugins||{};return this._plugins.concat(o.plugins||[]).forEach(function(e){if(-1===n.indexOf(e)){var t=e.id,o=s[t];!1!==o&&(!0===o&&(o=a.clone(r.global.plugins[t])),n.push(e),i.push({plugin:e,options:o||{}}))}}),t.descriptors=i,t.id=this._cacheId,i},_invalidate:function(e){delete e.$plugins}}},function(e,t,n){!function(e){"use strict";e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},a={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},i=function(e){return function(t,n,i,o){var s=r(t),l=a[e][r(t)];return 2===s&&(l=l[n?0:1]),l.replace(/%d/i,t)}},o=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:o,monthsShort:o,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:i("s"),ss:i("s"),m:i("m"),mm:i("m"),h:i("h"),hh:i("h"),d:i("d"),dd:i("d"),M:i("M"),MM:i("M"),y:i("y"),yy:i("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-dz",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"أح_إث_ثلا_أر_خم_جم_سب".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(e){return function(t,a,i,o){var s=n(t),l=r[e][n(t)];return 2===s&&(l=l[a?0:1]),l.replace(/%d/i,t)}},i=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),ss:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"birneçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10,r=e%100-n,a=e>=100?100:null;return e+(t[n]||t[r]||t[a])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"};return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+function(e,t){var n=e.split("_");return t%10==1&&t%100!=11?n[0]:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?n[1]:n[2]}(r[n],+e)}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}e.defineLocale("br",{months:"Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h[e]mm A",LTS:"h[e]mm:ss A",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY h[e]mm A",LLLL:"dddd, D [a viz] MMMM YYYY h[e]mm A"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warc'hoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Dec'h da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s 'zo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(function e(t){return t>9?e(t%10):t}(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){var t=1===e?"añ":"vet";return e+t},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_");function r(e){return e>1&&e<5&&1!=~~(e/10)}function a(e,t,n,a){var i=e+" ";switch(n){case"s":return t||a?"pár sekund":"pár sekundami";case"ss":return t||a?i+(r(e)?"sekundy":"sekund"):i+"sekundami";case"m":return t?"minuta":a?"minutu":"minutou";case"mm":return t||a?i+(r(e)?"minuty":"minut"):i+"minutami";case"h":return t?"hodina":a?"hodinu":"hodinou";case"hh":return t||a?i+(r(e)?"hodiny":"hodin"):i+"hodinami";case"d":return t||a?"den":"dnem";case"dd":return t||a?i+(r(e)?"dny":"dní"):i+"dny";case"M":return t||a?"měsíc":"měsícem";case"MM":return t||a?i+(r(e)?"měsíce":"měsíců"):i+"měsíci";case"y":return t||a?"rok":"rokem";case"yy":return t||a?i+(r(e)?"roky":"let"):i+"lety"}}e.defineLocale("cs",{months:t,monthsShort:n,monthsParse:function(e,t){var n,r=[];for(n=0;n<12;n++)r[n]=new RegExp("^"+e[n]+"$|^"+t[n]+"$","i");return r}(t,n),shortMonthsParse:function(e){var t,n=[];for(t=0;t<12;t++)n[t]=new RegExp("^"+e[t]+"$","i");return n}(n),longMonthsParse:function(e){var t,n=[];for(t=0;t<12;t++)n[t]=new RegExp("^"+e[t]+"$","i");return n}(t),weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){var t=/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран";return e+t},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t=e,n="";return t>20?n=40===t||50===t||60===t||80===t||100===t?"fed":"ain":t>0&&(n=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][t]),e+n},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n=this._calendarEl[e],r=t&&t.hours();return function(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}(n)&&(n=n.apply(t)),n.replace("{}",r%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D[-a de] MMMM, YYYY",LLL:"D[-a de] MMMM, YYYY HH:mm",LLLL:"dddd, [la] D[-a de] MMMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd [je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasinta] dddd [je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"sekundoj",ss:"%d sekundoj",m:"minuto",mm:"%d minutoj",h:"horo",hh:"%d horoj",d:"tago",dd:"%d tagoj",M:"monato",MM:"%d monatoj",y:"jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_");e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"MMMM [de] D [de] YYYY",LLL:"MMMM [de] D [de] YYYY h:mm A",LLLL:"dddd, MMMM [de] D [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?a[n][2]?a[n][2]:a[n][1]:r?a[n][0]:a[n][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"ثانیه d%",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function r(e,r,a,i){var o="";switch(a){case"s":return i?"muutaman sekunnin":"muutama sekunti";case"ss":return i?"sekunnin":"sekuntia";case"m":return i?"minuutin":"minuutti";case"mm":o=i?"minuutin":"minuuttia";break;case"h":return i?"tunnin":"tunti";case"hh":o=i?"tunnin":"tuntia";break;case"d":return i?"päivän":"päivä";case"dd":o=i?"päivän":"päivää";break;case"M":return i?"kuukauden":"kuukausi";case"MM":o=i?"kuukauden":"kuukautta";break;case"y":return i?"vuoden":"vuosi";case"yy":o=i?"vuoden":"vuotta"}return o=function(e,r){return e<10?r?n[e]:t[e]:e}(e,i)+" "+o}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minutt",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaði",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){var t=1===e?"d":e%10==2?"na":"mh";return e+t},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["thodde secondanim","thodde second"],ss:[e+" secondanim",e+" second"],m:["eka mintan","ek minute"],mm:[e+" mintanim",e+" mintam"],h:["eka horan","ek hor"],hh:[e+" horanim",e+" horam"],d:["eka disan","ek dis"],dd:[e+" disanim",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineanim",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsanim",e+" vorsam"]};return t?a[n][0]:a[n][1]}e.defineLocale("gom-latn",{months:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Ieta to] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fatlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){switch(t){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:1,doy:4},meridiemParse:/rati|sokalli|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokalli"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokalli":e<16?"donparam":e<20?"sanje":"rati"}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પેહલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(e,t,n,r){var a=e;switch(n){case"s":return r||t?"néhány másodperc":"néhány másodperce";case"ss":return a+(r||t)?" másodperc":" másodperce";case"m":return"egy"+(r||t?" perc":" perce");case"mm":return a+(r||t?" perc":" perce");case"h":return"egy"+(r||t?" óra":" órája");case"hh":return a+(r||t?" óra":" órája");case"d":return"egy"+(r||t?" nap":" napja");case"dd":return a+(r||t?" nap":" napja");case"M":return"egy"+(r||t?" hónap":" hónapja");case"MM":return a+(r||t?" hónap":" hónapja");case"y":return"egy"+(r||t?" év":" éve");case"yy":return a+(r||t?" év":" éve")}return""}function r(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return r.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return r.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e){return e%100==11||e%10!=1}function n(e,n,r,a){var i=e+" ";switch(r){case"s":return n||a?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?i+(n||a?"sekúndur":"sekúndum"):i+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?i+(n||a?"mínútur":"mínútum"):n?i+"mínúta":i+"mínútu";case"hh":return t(e)?i+(n||a?"klukkustundir":"klukkustundum"):i+"klukkustund";case"d":return n?"dagur":a?"dag":"degi";case"dd":return t(e)?n?i+"dagar":i+(a?"daga":"dögum"):n?i+"dagur":i+(a?"dag":"degi");case"M":return n?"mánuður":a?"mánuð":"mánuði";case"MM":return t(e)?n?i+"mánuðir":i+(a?"mánuði":"mánuðum"):n?i+"mánuður":i+(a?"mánuð":"mánuði");case"y":return n||a?"ár":"ári";case"yy":return t(e)?i+(n||a?"ár":"árum"):i+(n||a?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ja",{months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()<this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()<e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ka",{months:{standalone:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),format:"იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")},monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return/(წამი|წუთი|საათი|წელი)/.test(e)?e.replace(/ი$/,"ში"):e+"ში"},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):void 0},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){var n=e%10,r=e>=100?100:null;return e+(t[e]||t[n]||t[r])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,n){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кече саат] LT",lastWeek:"[Өткен аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){var n=e%10,r=e>=100?100:null;return e+(t[e]||t[n]||t[r])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?a[n][0]:a[n][1]}function n(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10,r=e/10;return n(0===t?r:t)}if(e<1e4){for(;e>=10;)e/=10;return n(e)}return n(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return n(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return n(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(e,t,n,r){return t?a(n)[0]:r?a(n)[1]:a(n)[2]}function r(e){return e%10==0||e>10&&e<20}function a(e){return t[e].split("_")}function i(e,t,i,o){var s=e+" ";return 1===e?s+n(0,t,i[0],o):t?s+(r(e)?a(i)[1]:a(i)[0]):o?s+a(i)[1]:s+(r(e)?a(i)[1]:a(i)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,n,r){return t?"kelios sekundės":r?"kelių sekundžių":"kelias sekundes"},ss:i,m:n,mm:i,h:n,hh:i,d:n,dd:i,M:n,MM:i,y:n,yy:i},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function r(e,r,a){return e+" "+n(t[a],e,r)}function a(e,r,a){return n(t[a],e,r)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:r,m:a,mm:r,h:a,hh:r,d:a,dd:r,M:a,MM:r,y:a,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"после %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",M:"месец",MM:"%d месеци",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){switch(n){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,n){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function r(e,t,n,r){var a="";if(t)switch(n){case"s":a="काही सेकंद";break;case"ss":a="%d सेकंद";break;case"m":a="एक मिनिट";break;case"mm":a="%d मिनिटे";break;case"h":a="एक तास";break;case"hh":a="%d तास";break;case"d":a="एक दिवस";break;case"dd":a="%d दिवस";break;case"M":a="एक महिना";break;case"MM":a="%d महिने";break;case"y":a="एक वर्ष";break;case"yy":a="%d वर्षे"}else switch(n){case"s":a="काही सेकंदां";break;case"ss":a="%d सेकंदां";break;case"m":a="एका मिनिटा";break;case"mm":a="%d मिनिटां";break;case"h":a="एका तासा";break;case"hh":a="%d तासां";break;case"d":a="एका दिवसा";break;case"dd":a="%d दिवसां";break;case"M":a="एका महिन्या";break;case"MM":a="%d महिन्यां";break;case"y":a="एका वर्षा";break;case"yy":a="%d वर्षां"}return a.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/रात्री|सकाळी|दुपारी|सायंकाळी/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात्री"===t?e<4?e:e+12:"सकाळी"===t?e:"दुपारी"===t?e>=10?e:e+12:"सायंकाळी"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात्री":e<10?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"sun_mån_tys_ons_tor_fre_lau".split("_"),weekdaysMin:"su_må_ty_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");function r(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function a(e,t,n){var a=e+" ";switch(n){case"ss":return a+(r(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return a+(r(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return a+(r(e)?"godziny":"godzin");case"MM":return a+(r(e)?"miesiące":"miesięcy");case"yy":return a+(r(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,r){return e?""===r?"("+n[e.month()]+"|"+t[e.month()]+")":/D MMMM/.test(r)?n[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:a,m:a,mm:a,h:a,hh:a,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:a,y:"rok",yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("pt",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("pt-br",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº"})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=" ";return(e%100>=20||e>=100&&e%100==0)&&(r=" de "),e+r+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"}[n]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"};return"m"===n?t?"минута":"минуту":e+" "+function(e,t){var n=e.split("_");return t%10==1&&t%100!=11?n[0]:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?n[1]:n[2]}(r[n],+e)}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function r(e){return e>1&&e<5}function a(e,t,n,a){var i=e+" ";switch(n){case"s":return t||a?"pár sekúnd":"pár sekundami";case"ss":return t||a?i+(r(e)?"sekundy":"sekúnd"):i+"sekundami";case"m":return t?"minúta":a?"minútu":"minútou";case"mm":return t||a?i+(r(e)?"minúty":"minút"):i+"minútami";case"h":return t?"hodina":a?"hodinu":"hodinou";case"hh":return t||a?i+(r(e)?"hodiny":"hodín"):i+"hodinami";case"d":return t||a?"deň":"dňom";case"dd":return t||a?i+(r(e)?"dni":"dní"):i+"dňami";case"M":return t||a?"mesiac":"mesiacom";case"MM":return t||a?i+(r(e)?"mesiace":"mesiacov"):i+"mesiacmi";case"y":return t||a?"rok":"rokom";case"yy":return t||a?i+(r(e)?"roky":"rokov"):i+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"nekaj sekund":"nekaj sekundami";case"ss":return a+=1===e?t?"sekundo":"sekundi":2===e?t||r?"sekundi":"sekundah":e<5?t||r?"sekunde":"sekundah":"sekund";case"m":return t?"ena minuta":"eno minuto";case"mm":return a+=1===e?t?"minuta":"minuto":2===e?t||r?"minuti":"minutama":e<5?t||r?"minute":"minutami":t||r?"minut":"minutami";case"h":return t?"ena ura":"eno uro";case"hh":return a+=1===e?t?"ura":"uro":2===e?t||r?"uri":"urama":e<5?t||r?"ure":"urami":t||r?"ur":"urami";case"d":return t||r?"en dan":"enim dnem";case"dd":return a+=1===e?t||r?"dan":"dnem":2===e?t||r?"dni":"dnevoma":t||r?"dni":"dnevi";case"M":return t||r?"en mesec":"enim mesecem";case"MM":return a+=1===e?t||r?"mesec":"mesecem":2===e?t||r?"meseca":"mesecema":e<5?t||r?"mesece":"meseci":t||r?"mesecev":"meseci";case"y":return t||r?"eno leto":"enim letom";case"yy":return a+=1===e?t||r?"leto":"letom":2===e?t||r?"leti":"letoma":e<5?t||r?"leta":"leti":t||r?"let":"leti"}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"дан",dd:t.translate,M:"месец",MM:t.translate,y:"годину",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"e":1===t?"a":2===t?"a":"e";return e+n},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"masiku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t?e:"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"minutu balun",ss:"minutu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Пагоҳ соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){var n=e%10,r=e>=100?100:null;return e+(t[e]||t[n]||t[r])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(e,n,r,a){var i=function(e){var n=Math.floor(e%1e3/100),r=Math.floor(e%100/10),a=e%10,i="";return n>0&&(i+=t[n]+"vatlh"),r>0&&(i+=(""!==i?" ":"")+t[r]+"maH"),a>0&&(i+=(""!==i?" ":"")+t[a]),""===i?"pagh":i}(e);switch(r){case"ss":return i+" lup";case"mm":return i+" tup";case"hh":return i+" rep";case"dd":return i+" jaj";case"MM":return i+" jar";case"yy":return i+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var r=e%10,a=e%100-r,i=e>=100?100:null;return e+(t[r]||t[a]||t[i])}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return r?a[n][0]:t?a[n][0]:a[n][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"يېرىم كېچە":r<900?"سەھەر":r<1130?"چۈشتىن بۇرۇن":r<1230?"چۈش":r<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"};return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+function(e,t){var n=e.split("_");return t%10==1&&t%100!=11?n[0]:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?n[1]:n[2]}(r[n],+e)}function n(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};if(!e)return n.nominative;var r=/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative";return n[r][e.day()]},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(e,t,n){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i=Object.defineProperty,o=Object.getOwnPropertyNames,s=Object.getOwnPropertySymbols,l=Object.getOwnPropertyDescriptor,u=Object.getPrototypeOf,d=u&&u(Object);e.exports=function e(t,n,c){if("string"!=typeof n){if(d){var f=u(n);f&&f!==d&&e(t,f,c)}var h=o(n);s&&(h=h.concat(s(n)));for(var m=0;m<h.length;++m){var p=h[m];if(!(r[p]||a[p]||c&&c[p])){var _=l(n,p);try{i(t,p,_)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";var r=o(n(2)),a=o(n(154)),i=o(n(162));function o(e){return e&&e.__esModule?e:{default:e}}a.default.render(r.default.createElement(i.default,null),document.getElementById("root"))},function(e,t,n){"use strict";
/** @license React v16.4.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(17),a=n(18),i=n(19),o=n(20),s="function"==typeof Symbol&&Symbol.for,l=s?Symbol.for("react.element"):60103,u=s?Symbol.for("react.portal"):60106,d=s?Symbol.for("react.fragment"):60107,c=s?Symbol.for("react.strict_mode"):60108,f=s?Symbol.for("react.profiler"):60114,h=s?Symbol.for("react.provider"):60109,m=s?Symbol.for("react.context"):60110,p=s?Symbol.for("react.async_mode"):60111,_=s?Symbol.for("react.forward_ref"):60112;s&&Symbol.for("react.timeout");var y="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);a(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var v={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function M(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||v}function b(){}function L(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||v}M.prototype.isReactComponent={},M.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&g("85"),this.updater.enqueueSetState(this,e,t,"setState")},M.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=M.prototype;var k=L.prototype=new b;k.constructor=L,r(k,M.prototype),k.isPureReactComponent=!0;var x={current:null},w=Object.prototype.hasOwnProperty,Y={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,n){var r=void 0,a={},i=null,o=null;if(null!=t)for(r in void 0!==t.ref&&(o=t.ref),void 0!==t.key&&(i=""+t.key),t)w.call(t,r)&&!Y.hasOwnProperty(r)&&(a[r]=t[r]);var s=arguments.length-2;if(1===s)a.children=n;else if(1<s){for(var u=Array(s),d=0;d<s;d++)u[d]=arguments[d+2];a.children=u}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===a[r]&&(a[r]=s[r]);return{$$typeof:l,type:e,key:i,ref:o,props:a,_owner:x.current}}function D(e){return"object"==typeof e&&null!==e&&e.$$typeof===l}var S=/\/+/g,C=[];function A(e,t,n,r){if(C.length){var a=C.pop();return a.result=e,a.keyPrefix=t,a.func=n,a.context=r,a.count=0,a}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function j(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>C.length&&C.push(e)}function E(e,t,n,r){var a=typeof e;"undefined"!==a&&"boolean"!==a||(e=null);var i=!1;if(null===e)i=!0;else switch(a){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case l:case u:i=!0}}if(i)return n(r,e,""===t?"."+P(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var o=0;o<e.length;o++){var s=t+P(a=e[o],o);i+=E(a,s,n,r)}else if(null===e||void 0===e?s=null:s="function"==typeof(s=y&&e[y]||e["@@iterator"])?s:null,"function"==typeof s)for(e=s.call(e),o=0;!(a=e.next()).done;)i+=E(a=a.value,s=t+P(a,o++),n,r);else"object"===a&&g("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return i}function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function H(e,t){e.func.call(e.context,t,e.count++)}function O(e,t,n){var r=e.result,a=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?F(e,r,n,o.thatReturnsArgument):null!=e&&(D(e)&&(t=a+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(S,"$&/")+"/")+n,e={$$typeof:l,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function F(e,t,n,r,a){var i="";null!=n&&(i=(""+n).replace(S,"$&/")+"/"),t=A(t,i,r,a),null==e||E(e,"",O,t),j(t)}var R={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return F(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=A(null,null,t,n),null==e||E(e,"",H,t),j(t)},count:function(e){return null==e?0:E(e,"",o.thatReturnsNull,null)},toArray:function(e){var t=[];return F(e,t,null,o.thatReturnsArgument),t},only:function(e){return D(e)||g("143"),e}},createRef:function(){return{current:null}},Component:M,PureComponent:L,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:m,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_currentValue2:e,_changedBits:0,_changedBits2:0,Provider:null,Consumer:null}).Provider={$$typeof:h,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:_,render:e}},Fragment:d,StrictMode:c,unstable_AsyncMode:p,unstable_Profiler:f,createElement:T,cloneElement:function(e,t,n){(null===e||void 0===e)&&g("267",e);var a=void 0,i=r({},e.props),o=e.key,s=e.ref,u=e._owner;if(null!=t){void 0!==t.ref&&(s=t.ref,u=x.current),void 0!==t.key&&(o=""+t.key);var d=void 0;for(a in e.type&&e.type.defaultProps&&(d=e.type.defaultProps),t)w.call(t,a)&&!Y.hasOwnProperty(a)&&(i[a]=void 0===t[a]&&void 0!==d?d[a]:t[a])}if(1===(a=arguments.length-2))i.children=n;else if(1<a){d=Array(a);for(var c=0;c<a;c++)d[c]=arguments[c+2];i.children=d}return{$$typeof:l,type:e.type,key:o,ref:s,props:i,_owner:u}},createFactory:function(e){var t=T.bind(null,e);return t.type=e,t},isValidElement:D,version:"16.4.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:x,assign:r}},N={default:R},I=N&&R||N;e.exports=I.default?I.default:I},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(155)},function(e,t,n){"use strict";
/** @license React v16.4.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(18),a=n(2),i=n(156),o=n(17),s=n(20),l=n(157),u=n(158),d=n(159),c=n(19);function f(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,a=0;a<t;a++)n+="&args[]="+encodeURIComponent(arguments[a+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}a||f("227");var h={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,a,i,o,s,l){(function(e,t,n,r,a,i,o,s,l){this._hasCaughtError=!1,this._caughtError=null;var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(h,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,a,i,o,s,l){if(h.invokeGuardedCallback.apply(this,arguments),h.hasCaughtError()){var u=h.clearCaughtError();h._hasRethrowError||(h._hasRethrowError=!0,h._rethrowError=u)}},rethrowCaughtError:function(){return function(){if(h._hasRethrowError){var e=h._rethrowError;throw h._rethrowError=null,h._hasRethrowError=!1,e}}.apply(h,arguments)},hasCaughtError:function(){return h._hasCaughtError},clearCaughtError:function(){if(h._hasCaughtError){var e=h._caughtError;return h._caughtError=null,h._hasCaughtError=!1,e}f("198")}};var m=null,p={};function _(){if(m)for(var e in p){var t=p[e],n=m.indexOf(e);if(-1<n||f("96",e),!g[n])for(var r in t.extractEvents||f("97",e),g[n]=t,n=t.eventTypes){var a=void 0,i=n[r],o=t,s=r;v.hasOwnProperty(s)&&f("99",s),v[s]=i;var l=i.phasedRegistrationNames;if(l){for(a in l)l.hasOwnProperty(a)&&y(l[a],o,s);a=!0}else i.registrationName?(y(i.registrationName,o,s),a=!0):a=!1;a||f("98",r,e)}}}function y(e,t,n){M[e]&&f("100",e),M[e]=t,b[e]=t.eventTypes[n].dependencies}var g=[],v={},M={},b={};function L(e){m&&f("101"),m=Array.prototype.slice.call(e),_()}function k(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];p.hasOwnProperty(t)&&p[t]===r||(p[t]&&f("102",t),p[t]=r,n=!0)}n&&_()}var x={plugins:g,eventNameDispatchConfigs:v,registrationNameModules:M,registrationNameDependencies:b,possibleRegistrationNames:null,injectEventPluginOrder:L,injectEventPluginsByName:k},w=null,Y=null,T=null;function D(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=T(r),h.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function S(e,t){return null==t&&f("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function C(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var A=null;function j(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var a=0;a<n.length&&!e.isPropagationStopped();a++)D(e,t,n[a],r[a]);else n&&D(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function E(e){return j(e,!0)}function P(e){return j(e,!1)}var H={injectEventPluginOrder:L,injectEventPluginsByName:k};function O(e,t){var n=e.stateNode;if(!n)return null;var r=w(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&f("231",t,typeof n),n)}function F(e,t){null!==e&&(A=S(A,e)),e=A,A=null,e&&(C(e,t?E:P),A&&f("95"),h.rethrowCaughtError())}function R(e,t,n,r){for(var a=null,i=0;i<g.length;i++){var o=g[i];o&&(o=o.extractEvents(e,t,n,r))&&(a=S(a,o))}F(a,!1)}var N={injection:H,getListener:O,runEventsInBatch:F,runExtractedEventsInBatch:R},I=Math.random().toString(36).slice(2),W="__reactInternalInstance$"+I,z="__reactEventHandlers$"+I;function B(e){if(e[W])return e[W];for(;!e[W];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[W]).tag||6===e.tag?e:null}function U(e){if(5===e.tag||6===e.tag)return e.stateNode;f("33")}function V(e){return e[z]||null}var q={precacheFiberNode:function(e,t){t[W]=e},getClosestInstanceFromNode:B,getInstanceFromNode:function(e){return!(e=e[W])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:U,getFiberCurrentPropsFromNode:V,updateFiberProps:function(e,t){e[z]=t}};function J(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function G(e,t,n){for(var r=[];e;)r.push(e),e=J(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function $(e,t,n){(t=O(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=S(n._dispatchListeners,t),n._dispatchInstances=S(n._dispatchInstances,e))}function K(e){e&&e.dispatchConfig.phasedRegistrationNames&&G(e._targetInst,$,e)}function Q(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;G(t=t?J(t):null,$,e)}}function Z(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=O(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=S(n._dispatchListeners,t),n._dispatchInstances=S(n._dispatchInstances,e))}function X(e){e&&e.dispatchConfig.registrationName&&Z(e._targetInst,null,e)}function ee(e){C(e,K)}function te(e,t,n,r){if(n&&r)e:{for(var a=n,i=r,o=0,s=a;s;s=J(s))o++;s=0;for(var l=i;l;l=J(l))s++;for(;0<o-s;)a=J(a),o--;for(;0<s-o;)i=J(i),s--;for(;o--;){if(a===i||a===i.alternate)break e;a=J(a),i=J(i)}a=null}else a=null;for(i=a,a=[];n&&n!==i&&(null===(o=n.alternate)||o!==i);)a.push(n),n=J(n);for(n=[];r&&r!==i&&(null===(o=r.alternate)||o!==i);)n.push(r),r=J(r);for(r=0;r<a.length;r++)Z(a[r],"bubbled",e);for(e=n.length;0<e--;)Z(n[e],"captured",t)}var ne={accumulateTwoPhaseDispatches:ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){C(e,Q)},accumulateEnterLeaveDispatches:te,accumulateDirectDispatches:function(e){C(e,X)}};function re(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var ae={animationend:re("Animation","AnimationEnd"),animationiteration:re("Animation","AnimationIteration"),animationstart:re("Animation","AnimationStart"),transitionend:re("Transition","TransitionEnd")},ie={},oe={};function se(e){if(ie[e])return ie[e];if(!ae[e])return e;var t,n=ae[e];for(t in n)if(n.hasOwnProperty(t)&&t in oe)return ie[e]=n[t];return e}i.canUseDOM&&(oe=document.createElement("div").style,"AnimationEvent"in window||(delete ae.animationend.animation,delete ae.animationiteration.animation,delete ae.animationstart.animation),"TransitionEvent"in window||delete ae.transitionend.transition);var le=se("animationend"),ue=se("animationiteration"),de=se("animationstart"),ce=se("transitionend"),fe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),he=null;function me(){return!he&&i.canUseDOM&&(he="textContent"in document.documentElement?"textContent":"innerText"),he}var pe={_root:null,_startText:null,_fallbackText:null};function _e(){if(pe._fallbackText)return pe._fallbackText;var e,t,n=pe._startText,r=n.length,a=ye(),i=a.length;for(e=0;e<r&&n[e]===a[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===a[i-t];t++);return pe._fallbackText=a.slice(e,1<t?1-t:void 0),pe._fallbackText}function ye(){return"value"in pe._root?pe._root.value:pe._root[me()]}var ge="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),ve={type:null,target:null,currentTarget:s.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function Me(e,t,n,r){for(var a in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(a)&&((t=e[a])?this[a]=t(n):"target"===a?this.target=r:this[a]=n[a]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?s.thatReturnsTrue:s.thatReturnsFalse,this.isPropagationStopped=s.thatReturnsFalse,this}function be(e,t,n,r){if(this.eventPool.length){var a=this.eventPool.pop();return this.call(a,e,t,n,r),a}return new this(e,t,n,r)}function Le(e){e instanceof this||f("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function ke(e){e.eventPool=[],e.getPooled=be,e.release=Le}o(Me.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=s.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=s.thatReturnsTrue)},persist:function(){this.isPersistent=s.thatReturnsTrue},isPersistent:s.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<ge.length;t++)this[ge[t]]=null}}),Me.Interface=ve,Me.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var a=new t;return o(a,n.prototype),n.prototype=a,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,ke(n),n},ke(Me);var xe=Me.extend({data:null}),we=Me.extend({data:null}),Ye=[9,13,27,32],Te=i.canUseDOM&&"CompositionEvent"in window,De=null;i.canUseDOM&&"documentMode"in document&&(De=document.documentMode);var Se=i.canUseDOM&&"TextEvent"in window&&!De,Ce=i.canUseDOM&&(!Te||De&&8<De&&11>=De),Ae=String.fromCharCode(32),je={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Ee=!1;function Pe(e,t){switch(e){case"keyup":return-1!==Ye.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function He(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Oe=!1;var Fe={eventTypes:je,extractEvents:function(e,t,n,r){var a=void 0,i=void 0;if(Te)e:{switch(e){case"compositionstart":a=je.compositionStart;break e;case"compositionend":a=je.compositionEnd;break e;case"compositionupdate":a=je.compositionUpdate;break e}a=void 0}else Oe?Pe(e,n)&&(a=je.compositionEnd):"keydown"===e&&229===n.keyCode&&(a=je.compositionStart);return a?(Ce&&(Oe||a!==je.compositionStart?a===je.compositionEnd&&Oe&&(i=_e()):(pe._root=r,pe._startText=ye(),Oe=!0)),a=xe.getPooled(a,t,n,r),i?a.data=i:null!==(i=He(n))&&(a.data=i),ee(a),i=a):i=null,(e=Se?function(e,t){switch(e){case"compositionend":return He(t);case"keypress":return 32!==t.which?null:(Ee=!0,Ae);case"textInput":return(e=t.data)===Ae&&Ee?null:e;default:return null}}(e,n):function(e,t){if(Oe)return"compositionend"===e||!Te&&Pe(e,t)?(e=_e(),pe._root=null,pe._startText=null,pe._fallbackText=null,Oe=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ce?null:t.data;default:return null}}(e,n))?((t=we.getPooled(je.beforeInput,t,n,r)).data=e,ee(t)):t=null,null===i?t:null===t?i:[i,t]}},Re=null,Ne={injectFiberControlledHostComponent:function(e){Re=e}},Ie=null,We=null;function ze(e){if(e=Y(e)){Re&&"function"==typeof Re.restoreControlledState||f("194");var t=w(e.stateNode);Re.restoreControlledState(e.stateNode,e.type,t)}}function Be(e){Ie?We?We.push(e):We=[e]:Ie=e}function Ue(){return null!==Ie||null!==We}function Ve(){if(Ie){var e=Ie,t=We;if(We=Ie=null,ze(e),t)for(e=0;e<t.length;e++)ze(t[e])}}var qe={injection:Ne,enqueueStateRestore:Be,needsStateRestore:Ue,restoreStateIfNeeded:Ve};function Je(e,t){return e(t)}function Ge(e,t,n){return e(t,n)}function $e(){}var Ke=!1;function Qe(e,t){if(Ke)return e(t);Ke=!0;try{return Je(e,t)}finally{Ke=!1,Ue()&&($e(),Ve())}}var Ze={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Xe(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ze[e.type]:"textarea"===t}function et(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function tt(e,t){return!(!i.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function nt(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function rt(e){e._valueTracker||(e._valueTracker=function(e){var t=nt(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function at(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=nt(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var it=a.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,ot="function"==typeof Symbol&&Symbol.for,st=ot?Symbol.for("react.element"):60103,lt=ot?Symbol.for("react.portal"):60106,ut=ot?Symbol.for("react.fragment"):60107,dt=ot?Symbol.for("react.strict_mode"):60108,ct=ot?Symbol.for("react.profiler"):60114,ft=ot?Symbol.for("react.provider"):60109,ht=ot?Symbol.for("react.context"):60110,mt=ot?Symbol.for("react.async_mode"):60111,pt=ot?Symbol.for("react.forward_ref"):60112,_t=ot?Symbol.for("react.timeout"):60113,yt="function"==typeof Symbol&&Symbol.iterator;function gt(e){return null===e||void 0===e?null:"function"==typeof(e=yt&&e[yt]||e["@@iterator"])?e:null}function vt(e){var t=e.type;if("function"==typeof t)return t.displayName||t.name;if("string"==typeof t)return t;switch(t){case mt:return"AsyncMode";case ht:return"Context.Consumer";case ut:return"ReactFragment";case lt:return"ReactPortal";case ct:return"Profiler("+e.pendingProps.id+")";case ft:return"Context.Provider";case dt:return"StrictMode";case _t:return"Timeout"}if("object"==typeof t&&null!==t)switch(t.$$typeof){case pt:return""!==(e=t.render.displayName||t.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function Mt(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,a=vt(e),i=null;n&&(i=vt(n)),n=r,a="\n    in "+(a||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":i?" (created by "+i+")":"");break e;default:a=""}t+=a,e=e.return}while(e);return t}var bt=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Lt=Object.prototype.hasOwnProperty,kt={},xt={};function wt(e,t,n,r,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t}var Yt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){Yt[e]=new wt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];Yt[t]=new wt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){Yt[e]=new wt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){Yt[e]=new wt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){Yt[e]=new wt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){Yt[e]=new wt(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){Yt[e]=new wt(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){Yt[e]=new wt(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){Yt[e]=new wt(e,5,!1,e.toLowerCase(),null)});var Tt=/[\-:]([a-z])/g;function Dt(e){return e[1].toUpperCase()}function St(e,t,n,r){var a=Yt.hasOwnProperty(t)?Yt[t]:null;(null!==a?0===a.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!Lt.call(xt,e)||!Lt.call(kt,e)&&(bt.test(e)?xt[e]=!0:(kt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function Ct(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function At(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Ot(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function jt(e,t){null!=(t=t.checked)&&St(e,"checked",t,!1)}function Et(e,t){jt(e,t);var n=Ot(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?Ht(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ht(e,t.type,Ot(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Pt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){t=""+e._wrapperState.initialValue;var r=e.value;n||t===r||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==n&&(e.name=n)}function Ht(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Ot(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Tt,Dt);Yt[t]=new wt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Tt,Dt);Yt[t]=new wt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Tt,Dt);Yt[t]=new wt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),Yt.tabIndex=new wt("tabIndex",1,!1,"tabindex",null);var Ft={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Rt(e,t,n){return(e=Me.getPooled(Ft.change,e,t,n)).type="change",Be(n),ee(e),e}var Nt=null,It=null;function Wt(e){F(e,!1)}function zt(e){if(at(U(e)))return e}function Bt(e,t){if("change"===e)return t}var Ut=!1;function Vt(){Nt&&(Nt.detachEvent("onpropertychange",qt),It=Nt=null)}function qt(e){"value"===e.propertyName&&zt(It)&&Qe(Wt,e=Rt(It,e,et(e)))}function Jt(e,t,n){"focus"===e?(Vt(),It=n,(Nt=t).attachEvent("onpropertychange",qt)):"blur"===e&&Vt()}function Gt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return zt(It)}function $t(e,t){if("click"===e)return zt(t)}function Kt(e,t){if("input"===e||"change"===e)return zt(t)}i.canUseDOM&&(Ut=tt("input")&&(!document.documentMode||9<document.documentMode));var Qt={eventTypes:Ft,_isInputEventSupported:Ut,extractEvents:function(e,t,n,r){var a=t?U(t):window,i=void 0,o=void 0,s=a.nodeName&&a.nodeName.toLowerCase();if("select"===s||"input"===s&&"file"===a.type?i=Bt:Xe(a)?Ut?i=Kt:(i=Gt,o=Jt):(s=a.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===a.type||"radio"===a.type)&&(i=$t),i&&(i=i(e,t)))return Rt(i,n,r);o&&o(e,a,t),"blur"===e&&(e=a._wrapperState)&&e.controlled&&"number"===a.type&&Ht(a,"number",a.value)}},Zt=Me.extend({view:null,detail:null}),Xt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function en(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Xt[e])&&!!t[e]}function tn(){return en}var nn=Zt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:tn,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),rn=nn.extend({pointerId:null,width:null,height:null,pressure:null,tiltX:null,tiltY:null,pointerType:null,isPrimary:null}),an={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},on={eventTypes:an,extractEvents:function(e,t,n,r){var a="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(a&&(n.relatedTarget||n.fromElement)||!i&&!a)return null;if(a=r.window===r?r:(a=r.ownerDocument)?a.defaultView||a.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?B(t):null):i=null,i===t)return null;var o=void 0,s=void 0,l=void 0,u=void 0;return"mouseout"===e||"mouseover"===e?(o=nn,s=an.mouseLeave,l=an.mouseEnter,u="mouse"):"pointerout"!==e&&"pointerover"!==e||(o=rn,s=an.pointerLeave,l=an.pointerEnter,u="pointer"),e=null==i?a:U(i),a=null==t?a:U(t),(s=o.getPooled(s,i,n,r)).type=u+"leave",s.target=e,s.relatedTarget=a,(n=o.getPooled(l,t,n,r)).type=u+"enter",n.target=a,n.relatedTarget=e,te(s,n,i,t),[s,n]}};function sn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function ln(e){2!==sn(e)&&f("188")}function un(e){var t=e.alternate;if(!t)return 3===(t=sn(e))&&f("188"),1===t?null:e;for(var n=e,r=t;;){var a=n.return,i=a?a.alternate:null;if(!a||!i)break;if(a.child===i.child){for(var o=a.child;o;){if(o===n)return ln(a),e;if(o===r)return ln(a),t;o=o.sibling}f("188")}if(n.return!==r.return)n=a,r=i;else{o=!1;for(var s=a.child;s;){if(s===n){o=!0,n=a,r=i;break}if(s===r){o=!0,r=a,n=i;break}s=s.sibling}if(!o){for(s=i.child;s;){if(s===n){o=!0,n=i,r=a;break}if(s===r){o=!0,r=i,n=a;break}s=s.sibling}o||f("189")}}n.alternate!==r&&f("190")}return 3!==n.tag&&f("188"),n.stateNode.current===n?e:t}function dn(e){if(!(e=un(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var cn=Me.extend({animationName:null,elapsedTime:null,pseudoElement:null}),fn=Me.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),hn=Zt.extend({relatedTarget:null});function mn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var pn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},_n={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},yn=Zt.extend({key:function(e){if(e.key){var t=pn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=mn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?_n[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:tn,charCode:function(e){return"keypress"===e.type?mn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?mn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),gn=nn.extend({dataTransfer:null}),vn=Zt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:tn}),Mn=Me.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),bn=nn.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),Ln=[["abort","abort"],[le,"animationEnd"],[ue,"animationIteration"],[de,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ce,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],kn={},xn={};function wn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},kn[e]=t,xn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){wn(e,!0)}),Ln.forEach(function(e){wn(e,!1)});var Yn={eventTypes:kn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=xn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var a=xn[e];if(!a)return null;switch(e){case"keypress":if(0===mn(n))return null;case"keydown":case"keyup":e=yn;break;case"blur":case"focus":e=hn;break;case"click":if(2===n.button)return null;case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=nn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=vn;break;case le:case ue:case de:e=cn;break;case ce:e=Mn;break;case"scroll":e=Zt;break;case"wheel":e=bn;break;case"copy":case"cut":case"paste":e=fn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=rn;break;default:e=Me}return ee(t=e.getPooled(a,t,n,r)),t}},Tn=Yn.isInteractiveTopLevelEventType,Dn=[];function Sn(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=B(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],R(e.topLevelType,t,e.nativeEvent,et(e.nativeEvent))}var Cn=!0;function An(e){Cn=!!e}function jn(e,t){if(!t)return null;var n=(Tn(e)?Pn:Hn).bind(null,e);t.addEventListener(e,n,!1)}function En(e,t){if(!t)return null;var n=(Tn(e)?Pn:Hn).bind(null,e);t.addEventListener(e,n,!0)}function Pn(e,t){Ge(Hn,e,t)}function Hn(e,t){if(Cn){var n=et(t);if(null===(n=B(n))||"number"!=typeof n.tag||2===sn(n)||(n=null),Dn.length){var r=Dn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Qe(Sn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Dn.length&&Dn.push(e)}}}var On={get _enabled(){return Cn},setEnabled:An,isEnabled:function(){return Cn},trapBubbledEvent:jn,trapCapturedEvent:En,dispatchEvent:Hn},Fn={},Rn=0,Nn="_reactListenersID"+(""+Math.random()).slice(2);function In(e){return Object.prototype.hasOwnProperty.call(e,Nn)||(e[Nn]=Rn++,Fn[e[Nn]]={}),Fn[e[Nn]]}function Wn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function zn(e,t){var n,r=Wn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Wn(r)}}function Bn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Un=i.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Vn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu focus keydown keyup mousedown mouseup selectionchange".split(" ")}},qn=null,Jn=null,Gn=null,$n=!1;function Kn(e,t){if($n||null==qn||qn!==l())return null;var n=qn;return"selectionStart"in n&&Bn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Gn&&u(Gn,n)?null:(Gn=n,(e=Me.getPooled(Vn.select,Jn,e,t)).type="select",e.target=qn,ee(e),e)}var Qn={eventTypes:Vn,extractEvents:function(e,t,n,r){var a,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(a=!i)){e:{i=In(i),a=b.onSelect;for(var o=0;o<a.length;o++){var s=a[o];if(!i.hasOwnProperty(s)||!i[s]){i=!1;break e}}i=!0}a=!i}if(a)return null;switch(i=t?U(t):window,e){case"focus":(Xe(i)||"true"===i.contentEditable)&&(qn=i,Jn=t,Gn=null);break;case"blur":Gn=Jn=qn=null;break;case"mousedown":$n=!0;break;case"contextmenu":case"mouseup":return $n=!1,Kn(n,r);case"selectionchange":if(Un)break;case"keydown":case"keyup":return Kn(n,r)}return null}};H.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w=q.getFiberCurrentPropsFromNode,Y=q.getInstanceFromNode,T=q.getNodeFromInstance,H.injectEventPluginsByName({SimpleEventPlugin:Yn,EnterLeaveEventPlugin:on,ChangeEventPlugin:Qt,SelectEventPlugin:Qn,BeforeInputEventPlugin:Fe});var Zn="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,Xn=Date,er=setTimeout,tr=clearTimeout,nr=void 0;if("object"==typeof performance&&"function"==typeof performance.now){var rr=performance;nr=function(){return rr.now()}}else nr=function(){return Xn.now()};var ar=void 0,ir=void 0;if(i.canUseDOM){var or="function"==typeof Zn?Zn:function(){f("276")},sr=null,lr=null,ur=-1,dr=!1,cr=!1,fr=0,hr=33,mr=33,pr={didTimeout:!1,timeRemaining:function(){var e=fr-nr();return 0<e?e:0}},_r=function(e,t){var n=e.scheduledCallback,r=!1;try{n(t),r=!0}finally{ir(e),r||(dr=!0,window.postMessage(yr,"*"))}},yr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===yr&&(dr=!1,null!==sr)){if(null!==sr){var t=nr();if(!(-1===ur||ur>t)){e=-1;for(var n=[],r=sr;null!==r;){var a=r.timeoutTime;-1!==a&&a<=t?n.push(r):-1!==a&&(-1===e||a<e)&&(e=a),r=r.next}if(0<n.length)for(pr.didTimeout=!0,t=0,r=n.length;t<r;t++)_r(n[t],pr);ur=e}}for(e=nr();0<fr-e&&null!==sr;)e=sr,pr.didTimeout=!1,_r(e,pr),e=nr();null===sr||cr||(cr=!0,or(gr))}},!1);var gr=function(e){cr=!1;var t=e-fr+mr;t<mr&&hr<mr?(8>t&&(t=8),mr=t<hr?hr:t):hr=t,fr=e+mr,dr||(dr=!0,window.postMessage(yr,"*"))};ar=function(e,t){var n=-1;return null!=t&&"number"==typeof t.timeout&&(n=nr()+t.timeout),(-1===ur||-1!==n&&n<ur)&&(ur=n),e={scheduledCallback:e,timeoutTime:n,prev:null,next:null},null===sr?sr=e:null!==(t=e.prev=lr)&&(t.next=e),lr=e,cr||(cr=!0,or(gr)),e},ir=function(e){if(null!==e.prev||sr===e){var t=e.next,n=e.prev;e.next=null,e.prev=null,null!==t?null!==n?(n.next=t,t.prev=n):(t.prev=null,sr=t):null!==n?(n.next=null,lr=n):lr=sr=null}}}else{var vr=new Map;ar=function(e){var t={scheduledCallback:e,timeoutTime:0,next:null,prev:null},n=er(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})});return vr.set(e,n),t},ir=function(e){var t=vr.get(e.scheduledCallback);vr.delete(e),tr(t)}}function Mr(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return a.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function br(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function Lr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function kr(e,t){return null!=t.dangerouslySetInnerHTML&&f("91"),o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function xr(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&f("92"),Array.isArray(t)&&(1>=t.length||f("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function wr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function Yr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var Tr={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Dr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Sr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Dr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Cr=void 0,Ar=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,a){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==Tr.svg||"innerHTML"in e)e.innerHTML=t;else{for((Cr=Cr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Cr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function jr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var Er={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Pr=["Webkit","ms","Moz","O"];function Hr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=n,i=t[n];a=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||Er.hasOwnProperty(a)&&Er[a]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(Er).forEach(function(e){Pr.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Er[t]=Er[e]})});var Or=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Fr(e,t,n){t&&(Or[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&f("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&f("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||f("61")),null!=t.style&&"object"!=typeof t.style&&f("62",n()))}function Rr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Nr=s.thatReturns("");function Ir(e,t){var n=In(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=b[t];for(var r=0;r<t.length;r++){var a=t[r];if(!n.hasOwnProperty(a)||!n[a]){switch(a){case"scroll":En("scroll",e);break;case"focus":case"blur":En("focus",e),En("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":tt(a,!0)&&En(a,e);break;case"invalid":case"submit":case"reset":break;default:-1===fe.indexOf(a)&&jn(a,e)}n[a]=!0}}}function Wr(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===Tr.html&&(r=Dr(e)),r===Tr.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function zr(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function Br(e,t,n,r){var a=Rr(t,n);switch(t){case"iframe":case"object":jn("load",e);var i=n;break;case"video":case"audio":for(i=0;i<fe.length;i++)jn(fe[i],e);i=n;break;case"source":jn("error",e),i=n;break;case"img":case"image":case"link":jn("error",e),jn("load",e),i=n;break;case"form":jn("reset",e),jn("submit",e),i=n;break;case"details":jn("toggle",e),i=n;break;case"input":At(e,n),i=Ct(e,n),jn("invalid",e),Ir(r,"onChange");break;case"option":i=Mr(e,n);break;case"select":Lr(e,n),i=o({},n,{value:void 0}),jn("invalid",e),Ir(r,"onChange");break;case"textarea":xr(e,n),i=kr(e,n),jn("invalid",e),Ir(r,"onChange");break;default:i=n}Fr(t,i,Nr);var l,u=i;for(l in u)if(u.hasOwnProperty(l)){var d=u[l];"style"===l?Hr(e,d):"dangerouslySetInnerHTML"===l?null!=(d=d?d.__html:void 0)&&Ar(e,d):"children"===l?"string"==typeof d?("textarea"!==t||""!==d)&&jr(e,d):"number"==typeof d&&jr(e,""+d):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(M.hasOwnProperty(l)?null!=d&&Ir(r,l):null!=d&&St(e,l,d,a))}switch(t){case"input":rt(e),Pt(e,n,!1);break;case"textarea":rt(e),Yr(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?br(e,!!n.multiple,t,!1):null!=n.defaultValue&&br(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=s)}}function Ur(e,t,n,r,a){var i=null;switch(t){case"input":n=Ct(e,n),r=Ct(e,r),i=[];break;case"option":n=Mr(e,n),r=Mr(e,r),i=[];break;case"select":n=o({},n,{value:void 0}),r=o({},r,{value:void 0}),i=[];break;case"textarea":n=kr(e,n),r=kr(e,r),i=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=s)}Fr(t,r,Nr),t=e=void 0;var l=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var u=n[e];for(t in u)u.hasOwnProperty(t)&&(l||(l={}),l[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(M.hasOwnProperty(e)?i||(i=[]):(i=i||[]).push(e,null));for(e in r){var d=r[e];if(u=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&d!==u&&(null!=d||null!=u))if("style"===e)if(u){for(t in u)!u.hasOwnProperty(t)||d&&d.hasOwnProperty(t)||(l||(l={}),l[t]="");for(t in d)d.hasOwnProperty(t)&&u[t]!==d[t]&&(l||(l={}),l[t]=d[t])}else l||(i||(i=[]),i.push(e,l)),l=d;else"dangerouslySetInnerHTML"===e?(d=d?d.__html:void 0,u=u?u.__html:void 0,null!=d&&u!==d&&(i=i||[]).push(e,""+d)):"children"===e?u===d||"string"!=typeof d&&"number"!=typeof d||(i=i||[]).push(e,""+d):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(M.hasOwnProperty(e)?(null!=d&&Ir(a,e),i||u===d||(i=[])):(i=i||[]).push(e,d))}return l&&(i=i||[]).push("style",l),i}function Vr(e,t,n,r,a){"input"===n&&"radio"===a.type&&null!=a.name&&jt(e,a),Rr(n,r),r=Rr(n,a);for(var i=0;i<t.length;i+=2){var o=t[i],s=t[i+1];"style"===o?Hr(e,s):"dangerouslySetInnerHTML"===o?Ar(e,s):"children"===o?jr(e,s):St(e,o,s,r)}switch(n){case"input":Et(e,a);break;case"textarea":wr(e,a);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!a.multiple,null!=(n=a.value)?br(e,!!a.multiple,n,!1):t!==!!a.multiple&&(null!=a.defaultValue?br(e,!!a.multiple,a.defaultValue,!0):br(e,!!a.multiple,a.multiple?[]:"",!1))}}function qr(e,t,n,r,a){switch(t){case"iframe":case"object":jn("load",e);break;case"video":case"audio":for(r=0;r<fe.length;r++)jn(fe[r],e);break;case"source":jn("error",e);break;case"img":case"image":case"link":jn("error",e),jn("load",e);break;case"form":jn("reset",e),jn("submit",e);break;case"details":jn("toggle",e);break;case"input":At(e,n),jn("invalid",e),Ir(a,"onChange");break;case"select":Lr(e,n),jn("invalid",e),Ir(a,"onChange");break;case"textarea":xr(e,n),jn("invalid",e),Ir(a,"onChange")}for(var i in Fr(t,n,Nr),r=null,n)if(n.hasOwnProperty(i)){var o=n[i];"children"===i?"string"==typeof o?e.textContent!==o&&(r=["children",o]):"number"==typeof o&&e.textContent!==""+o&&(r=["children",""+o]):M.hasOwnProperty(i)&&null!=o&&Ir(a,i)}switch(t){case"input":rt(e),Pt(e,n,!0);break;case"textarea":rt(e),Yr(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=s)}return r}function Jr(e,t){return e.nodeValue!==t}var Gr={createElement:Wr,createTextNode:zr,setInitialProperties:Br,diffProperties:Ur,updateProperties:Vr,diffHydratedProperties:qr,diffHydratedText:Jr,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(Et(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=V(r);a||f("90"),at(r),Et(r,a)}}}break;case"textarea":wr(e,n);break;case"select":null!=(t=n.value)&&br(e,!!n.multiple,t,!1)}}},$r=null,Kr=null;function Qr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Zr(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html}var Xr=nr,ea=ar,ta=ir;function na(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function ra(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var aa=[],ia=-1;function oa(e){return{current:e}}function sa(e){0>ia||(e.current=aa[ia],aa[ia]=null,ia--)}function la(e,t){aa[++ia]=e.current,e.current=t}var ua=oa(c),da=oa(!1),ca=c;function fa(e){return ma(e)?ca:ua.current}function ha(e,t){var n=e.type.contextTypes;if(!n)return c;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,i={};for(a in n)i[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function ma(e){return 2===e.tag&&null!=e.type.childContextTypes}function pa(e){ma(e)&&(sa(da),sa(ua))}function _a(e){sa(da),sa(ua)}function ya(e,t,n){ua.current!==c&&f("168"),la(ua,t),la(da,n)}function ga(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var a in n=n.getChildContext())a in r||f("108",vt(e)||"Unknown",a);return o({},t,n)}function va(e){if(!ma(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||c,ca=ua.current,la(ua,t),la(da,da.current),!0}function Ma(e,t){var n=e.stateNode;if(n||f("169"),t){var r=ga(e,ca);n.__reactInternalMemoizedMergedChildContext=r,sa(da),sa(ua),la(ua,r)}else sa(da);la(da,t)}function ba(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function La(e,t,n){var r=e.alternate;return null===r?((r=new ba(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function ka(e,t,n){var r=e.type,a=e.key;if(e=e.props,"function"==typeof r)var i=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)i=5;else switch(r){case ut:return xa(e.children,t,n,a);case mt:i=11,t|=3;break;case dt:i=11,t|=2;break;case ct:return(r=new ba(15,e,a,4|t)).type=ct,r.expirationTime=n,r;case _t:i=16,t|=2;break;default:e:{switch("object"==typeof r&&null!==r?r.$$typeof:null){case ft:i=13;break e;case ht:i=12;break e;case pt:i=14;break e;default:f("130",null==r?r:typeof r,"")}i=void 0}}return(t=new ba(i,e,a,t)).type=r,t.expirationTime=n,t}function xa(e,t,n,r){return(e=new ba(10,e,r,t)).expirationTime=n,e}function wa(e,t,n){return(e=new ba(6,e,null,t)).expirationTime=n,e}function Ya(e,t,n){return(t=new ba(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ta(e,t,n){return e={current:t=new ba(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e}var Da=null,Sa=null;function Ca(e){return function(t){try{return e(t)}catch(e){}}}function Aa(e){"function"==typeof Da&&Da(e)}function ja(e){"function"==typeof Sa&&Sa(e)}var Ea=!1;function Pa(e){return{expirationTime:0,baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Ha(e){return{expirationTime:e.expirationTime,baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Oa(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Fa(e,t,n){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t),(0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n)}function Ra(e,t,n){var r=e.alternate;if(null===r){var a=e.updateQueue,i=null;null===a&&(a=e.updateQueue=Pa(e.memoizedState))}else a=e.updateQueue,i=r.updateQueue,null===a?null===i?(a=e.updateQueue=Pa(e.memoizedState),i=r.updateQueue=Pa(r.memoizedState)):a=e.updateQueue=Ha(i):null===i&&(i=r.updateQueue=Ha(a));null===i||a===i?Fa(a,t,n):null===a.lastUpdate||null===i.lastUpdate?(Fa(a,t,n),Fa(i,t,n)):(Fa(a,t,n),i.lastUpdate=t)}function Na(e,t,n){var r=e.updateQueue;null===(r=null===r?e.updateQueue=Pa(e.memoizedState):Ia(e,r)).lastCapturedUpdate?r.firstCapturedUpdate=r.lastCapturedUpdate=t:(r.lastCapturedUpdate.next=t,r.lastCapturedUpdate=t),(0===r.expirationTime||r.expirationTime>n)&&(r.expirationTime=n)}function Ia(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Ha(t)),t}function Wa(e,t,n,r,a,i){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(i,r,a):e;case 3:e.effectTag=-1025&e.effectTag|64;case 0:if(null===(a="function"==typeof(e=n.payload)?e.call(i,r,a):e)||void 0===a)break;return o({},r,a);case 2:Ea=!0}return r}function za(e,t,n,r,a){if(Ea=!1,!(0===t.expirationTime||t.expirationTime>a)){for(var i=(t=Ia(e,t)).baseState,o=null,s=0,l=t.firstUpdate,u=i;null!==l;){var d=l.expirationTime;d>a?(null===o&&(o=l,i=u),(0===s||s>d)&&(s=d)):(u=Wa(e,0,l,u,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(d=null,l=t.firstCapturedUpdate;null!==l;){var c=l.expirationTime;c>a?(null===d&&(d=l,null===o&&(i=u)),(0===s||s>c)&&(s=c)):(u=Wa(e,0,l,u,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===o&&(t.lastUpdate=null),null===d?t.lastCapturedUpdate=null:e.effectTag|=32,null===o&&null===d&&(i=u),t.baseState=i,t.firstUpdate=o,t.firstCapturedUpdate=d,t.expirationTime=s,e.memoizedState=u}}function Ba(e,t){"function"!=typeof e&&f("191",e),e.call(t)}function Ua(e,t,n){for(null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),e=t.firstEffect,t.firstEffect=t.lastEffect=null;null!==e;){var r=e.callback;null!==r&&(e.callback=null,Ba(r,n)),e=e.nextEffect}for(e=t.firstCapturedEffect,t.firstCapturedEffect=t.lastCapturedEffect=null;null!==e;)null!==(t=e.callback)&&(e.callback=null,Ba(t,n)),e=e.nextEffect}function Va(e,t){return{value:e,source:t,stack:Mt(t)}}var qa=oa(null),Ja=oa(null),Ga=oa(0);function $a(e){var t=e.type._context;la(Ga,t._changedBits),la(Ja,t._currentValue),la(qa,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode}function Ka(e){var t=Ga.current,n=Ja.current;sa(qa),sa(Ja),sa(Ga),(e=e.type._context)._currentValue=n,e._changedBits=t}var Qa={},Za=oa(Qa),Xa=oa(Qa),ei=oa(Qa);function ti(e){return e===Qa&&f("174"),e}function ni(e,t){la(ei,t),la(Xa,e),la(Za,Qa);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Sr(null,"");break;default:t=Sr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}sa(Za),la(Za,t)}function ri(e){sa(Za),sa(Xa),sa(ei)}function ai(e){Xa.current===e&&(sa(Za),sa(Xa))}function ii(e,t,n){var r=e.memoizedState;r=null===(t=t(n,r))||void 0===t?r:o({},r,t),e.memoizedState=r,null!==(e=e.updateQueue)&&0===e.expirationTime&&(e.baseState=r)}var oi={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===sn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=vo(),a=Oa(r=yo(r,e));a.payload=t,void 0!==n&&null!==n&&(a.callback=n),Ra(e,a,r),go(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=vo(),a=Oa(r=yo(r,e));a.tag=1,a.payload=t,void 0!==n&&null!==n&&(a.callback=n),Ra(e,a,r),go(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=vo(),r=Oa(n=yo(n,e));r.tag=2,void 0!==t&&null!==t&&(r.callback=t),Ra(e,r,n),go(e,n)}};function si(e,t,n,r,a,i){var o=e.stateNode;return e=e.type,"function"==typeof o.shouldComponentUpdate?o.shouldComponentUpdate(n,a,i):!e.prototype||!e.prototype.isPureReactComponent||(!u(t,n)||!u(r,a))}function li(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&oi.enqueueReplaceState(t,t.state,null)}function ui(e,t){var n=e.type,r=e.stateNode,a=e.pendingProps,i=fa(e);r.props=a,r.state=e.memoizedState,r.refs=c,r.context=ha(e,i),null!==(i=e.updateQueue)&&(za(e,i,a,r,t),r.state=e.memoizedState),"function"==typeof(i=e.type.getDerivedStateFromProps)&&(ii(e,i,a),r.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(n=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),n!==r.state&&oi.enqueueReplaceState(r,r.state,null),null!==(i=e.updateQueue)&&(za(e,i,a,r,t),r.state=e.memoizedState)),"function"==typeof r.componentDidMount&&(e.effectTag|=4)}var di=Array.isArray;function ci(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&f("110"),r=n.stateNode),r||f("147",e);var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:((t=function(e){var t=r.refs===c?r.refs={}:r.refs;null===e?delete t[a]:t[a]=e})._stringRef=a,t)}"string"!=typeof e&&f("148"),n._owner||f("254",e)}return e}function fi(e,t){"textarea"!==e.type&&f("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function hi(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t,n){return(e=La(e,t,n)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function o(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=wa(n,e.mode,r)).return=e,t):((t=a(t,n,r)).return=e,t)}function l(e,t,n,r){return null!==t&&t.type===n.type?((r=a(t,n.props,r)).ref=ci(e,t,n),r.return=e,r):((r=ka(n,e.mode,r)).ref=ci(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ya(n,e.mode,r)).return=e,t):((t=a(t,n.children||[],r)).return=e,t)}function d(e,t,n,r,i){return null===t||10!==t.tag?((t=xa(n,e.mode,r,i)).return=e,t):((t=a(t,n,r)).return=e,t)}function c(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=wa(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case st:return(n=ka(t,e.mode,n)).ref=ci(e,null,t),n.return=e,n;case lt:return(t=Ya(t,e.mode,n)).return=e,t}if(di(t)||gt(t))return(t=xa(t,e.mode,n,null)).return=e,t;fi(e,t)}return null}function h(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case st:return n.key===a?n.type===ut?d(e,t,n.props.children,r,a):l(e,t,n,r):null;case lt:return n.key===a?u(e,t,n,r):null}if(di(n)||gt(n))return null!==a?null:d(e,t,n,r,null);fi(e,n)}return null}function m(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case st:return e=e.get(null===r.key?n:r.key)||null,r.type===ut?d(t,e,r.props.children,a,r.key):l(t,e,r,a);case lt:return u(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(di(r)||gt(r))return d(t,e=e.get(n)||null,r,a,null);fi(t,r)}return null}function p(a,o,s,l){for(var u=null,d=null,f=o,p=o=0,_=null;null!==f&&p<s.length;p++){f.index>p?(_=f,f=null):_=f.sibling;var y=h(a,f,s[p],l);if(null===y){null===f&&(f=_);break}e&&f&&null===y.alternate&&t(a,f),o=i(y,o,p),null===d?u=y:d.sibling=y,d=y,f=_}if(p===s.length)return n(a,f),u;if(null===f){for(;p<s.length;p++)(f=c(a,s[p],l))&&(o=i(f,o,p),null===d?u=f:d.sibling=f,d=f);return u}for(f=r(a,f);p<s.length;p++)(_=m(f,a,p,s[p],l))&&(e&&null!==_.alternate&&f.delete(null===_.key?p:_.key),o=i(_,o,p),null===d?u=_:d.sibling=_,d=_);return e&&f.forEach(function(e){return t(a,e)}),u}function _(a,o,s,l){var u=gt(s);"function"!=typeof u&&f("150"),null==(s=u.call(s))&&f("151");for(var d=u=null,p=o,_=o=0,y=null,g=s.next();null!==p&&!g.done;_++,g=s.next()){p.index>_?(y=p,p=null):y=p.sibling;var v=h(a,p,g.value,l);if(null===v){p||(p=y);break}e&&p&&null===v.alternate&&t(a,p),o=i(v,o,_),null===d?u=v:d.sibling=v,d=v,p=y}if(g.done)return n(a,p),u;if(null===p){for(;!g.done;_++,g=s.next())null!==(g=c(a,g.value,l))&&(o=i(g,o,_),null===d?u=g:d.sibling=g,d=g);return u}for(p=r(a,p);!g.done;_++,g=s.next())null!==(g=m(p,a,_,g.value,l))&&(e&&null!==g.alternate&&p.delete(null===g.key?_:g.key),o=i(g,o,_),null===d?u=g:d.sibling=g,d=g);return e&&p.forEach(function(e){return t(a,e)}),u}return function(e,r,i,s){var l="object"==typeof i&&null!==i&&i.type===ut&&null===i.key;l&&(i=i.props.children);var u="object"==typeof i&&null!==i;if(u)switch(i.$$typeof){case st:e:{for(u=i.key,l=r;null!==l;){if(l.key===u){if(10===l.tag?i.type===ut:l.type===i.type){n(e,l.sibling),(r=a(l,i.type===ut?i.props.children:i.props,s)).ref=ci(e,l,i),r.return=e,e=r;break e}n(e,l);break}t(e,l),l=l.sibling}i.type===ut?((r=xa(i.props.children,e.mode,s,i.key)).return=e,e=r):((s=ka(i,e.mode,s)).ref=ci(e,r,i),s.return=e,e=s)}return o(e);case lt:e:{for(l=i.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=a(r,i.children||[],s)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Ya(i,e.mode,s)).return=e,e=r}return o(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=a(r,i,s)).return=e,e=r):(n(e,r),(r=wa(i,e.mode,s)).return=e,e=r),o(e);if(di(i))return p(e,r,i,s);if(gt(i))return _(e,r,i,s);if(u&&fi(e,i),void 0===i&&!l)switch(e.tag){case 2:case 1:f("152",(s=e.type).displayName||s.name||"Component")}return n(e,r)}}var mi=hi(!0),pi=hi(!1),_i=null,yi=null,gi=!1;function vi(e,t){var n=new ba(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Mi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function bi(e){if(gi){var t=yi;if(t){var n=t;if(!Mi(e,t)){if(!(t=na(n))||!Mi(e,t))return e.effectTag|=2,gi=!1,void(_i=e);vi(_i,n)}_i=e,yi=ra(t)}else e.effectTag|=2,gi=!1,_i=e}}function Li(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;_i=e}function ki(e){if(e!==_i)return!1;if(!gi)return Li(e),gi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Zr(t,e.memoizedProps))for(t=yi;t;)vi(e,t),t=na(t);return Li(e),yi=_i?na(e.stateNode):null,!0}function xi(){yi=_i=null,gi=!1}function wi(e,t,n){Yi(e,t,n,t.expirationTime)}function Yi(e,t,n,r){t.child=null===e?pi(t,null,n,r):mi(t,e.child,n,r)}function Ti(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Di(e,t,n,r,a){Ti(e,t);var i=0!=(64&t.effectTag);if(!n&&!i)return r&&Ma(t,!1),Ai(e,t);n=t.stateNode,it.current=t;var o=i?null:n.render();return t.effectTag|=1,i&&(Yi(e,t,null,a),t.child=null),Yi(e,t,o,a),t.memoizedState=n.state,t.memoizedProps=n.props,r&&Ma(t,!0),t.child}function Si(e){var t=e.stateNode;t.pendingContext?ya(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ya(0,t.context,!1),ni(e,t.containerInfo)}function Ci(e,t,n,r){var a=e.child;for(null!==a&&(a.return=e);null!==a;){switch(a.tag){case 12:var i=0|a.stateNode;if(a.type===t&&0!=(i&n)){for(i=a;null!==i;){var o=i.alternate;if(0===i.expirationTime||i.expirationTime>r)i.expirationTime=r,null!==o&&(0===o.expirationTime||o.expirationTime>r)&&(o.expirationTime=r);else{if(null===o||!(0===o.expirationTime||o.expirationTime>r))break;o.expirationTime=r}i=i.return}i=null}else i=a.child;break;case 13:i=a.type===e.type?null:a.child;break;default:i=a.child}if(null!==i)i.return=a;else for(i=a;null!==i;){if(i===e){i=null;break}if(null!==(a=i.sibling)){a.return=i.return,i=a;break}i=i.return}a=i}}function Ai(e,t){if(null!==e&&t.child!==e.child&&f("153"),null!==t.child){var n=La(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=La(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function ji(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:Si(t);break;case 2:va(t);break;case 4:ni(t,t.stateNode.containerInfo);break;case 13:$a(t)}return null}switch(t.tag){case 0:null!==e&&f("155");var r=t.type,a=t.pendingProps,i=fa(t);return r=r(a,i=ha(t,i)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(i=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof(i=i.getDerivedStateFromProps)&&ii(t,i,a),a=va(t),r.updater=oi,t.stateNode=r,r._reactInternalFiber=t,ui(t,n),e=Di(e,t,!0,a,n)):(t.tag=1,wi(e,t,r),t.memoizedProps=a,e=t.child),e;case 1:return a=t.type,n=t.pendingProps,da.current||t.memoizedProps!==n?(a=a(n,r=ha(t,r=fa(t))),t.effectTag|=1,wi(e,t,a),t.memoizedProps=n,e=t.child):e=Ai(e,t),e;case 2:if(a=va(t),null===e)if(null===t.stateNode){var o=t.pendingProps,s=t.type;r=fa(t);var l=2===t.tag&&null!=t.type.contextTypes;o=new s(o,i=l?ha(t,r):c),t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,o.updater=oi,t.stateNode=o,o._reactInternalFiber=t,l&&((l=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,l.__reactInternalMemoizedMaskedChildContext=i),ui(t,n),r=!0}else{s=t.type,r=t.stateNode,l=t.memoizedProps,i=t.pendingProps,r.props=l;var u=r.context;o=ha(t,o=fa(t));var d=s.getDerivedStateFromProps;(s="function"==typeof d||"function"==typeof r.getSnapshotBeforeUpdate)||"function"!=typeof r.UNSAFE_componentWillReceiveProps&&"function"!=typeof r.componentWillReceiveProps||(l!==i||u!==o)&&li(t,r,i,o),Ea=!1;var h=t.memoizedState;u=r.state=h;var m=t.updateQueue;null!==m&&(za(t,m,i,r,n),u=t.memoizedState),l!==i||h!==u||da.current||Ea?("function"==typeof d&&(ii(t,d,i),u=t.memoizedState),(l=Ea||si(t,l,i,h,u,o))?(s||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||("function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount()),"function"==typeof r.componentDidMount&&(t.effectTag|=4)):("function"==typeof r.componentDidMount&&(t.effectTag|=4),t.memoizedProps=i,t.memoizedState=u),r.props=i,r.state=u,r.context=o,r=l):("function"==typeof r.componentDidMount&&(t.effectTag|=4),r=!1)}else s=t.type,r=t.stateNode,i=t.memoizedProps,l=t.pendingProps,r.props=i,u=r.context,o=ha(t,o=fa(t)),(s="function"==typeof(d=s.getDerivedStateFromProps)||"function"==typeof r.getSnapshotBeforeUpdate)||"function"!=typeof r.UNSAFE_componentWillReceiveProps&&"function"!=typeof r.componentWillReceiveProps||(i!==l||u!==o)&&li(t,r,l,o),Ea=!1,u=t.memoizedState,h=r.state=u,null!==(m=t.updateQueue)&&(za(t,m,l,r,n),h=t.memoizedState),i!==l||u!==h||da.current||Ea?("function"==typeof d&&(ii(t,d,l),h=t.memoizedState),(d=Ea||si(t,i,l,u,h,o))?(s||"function"!=typeof r.UNSAFE_componentWillUpdate&&"function"!=typeof r.componentWillUpdate||("function"==typeof r.componentWillUpdate&&r.componentWillUpdate(l,h,o),"function"==typeof r.UNSAFE_componentWillUpdate&&r.UNSAFE_componentWillUpdate(l,h,o)),"function"==typeof r.componentDidUpdate&&(t.effectTag|=4),"function"==typeof r.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof r.componentDidUpdate||i===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof r.getSnapshotBeforeUpdate||i===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=l,t.memoizedState=h),r.props=l,r.state=h,r.context=o,r=d):("function"!=typeof r.componentDidUpdate||i===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof r.getSnapshotBeforeUpdate||i===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return Di(e,t,r,a,n);case 3:return Si(t),null!==(a=t.updateQueue)?(r=null!==(r=t.memoizedState)?r.element:null,za(t,a,t.pendingProps,null,n),(a=t.memoizedState.element)===r?(xi(),e=Ai(e,t)):(r=t.stateNode,(r=(null===e||null===e.child)&&r.hydrate)&&(yi=ra(t.stateNode.containerInfo),_i=t,r=gi=!0),r?(t.effectTag|=2,t.child=pi(t,null,a,n)):(xi(),wi(e,t,a)),e=t.child)):(xi(),e=Ai(e,t)),e;case 5:return ti(ei.current),(a=ti(Za.current))!==(r=Sr(a,t.type))&&(la(Xa,t),la(Za,r)),null===e&&bi(t),a=t.type,l=t.memoizedProps,r=t.pendingProps,i=null!==e?e.memoizedProps:null,da.current||l!==r||((l=1&t.mode&&!!r.hidden)&&(t.expirationTime=1073741823),l&&1073741823===n)?(l=r.children,Zr(a,r)?l=null:i&&Zr(a,i)&&(t.effectTag|=16),Ti(e,t),1073741823!==n&&1&t.mode&&r.hidden?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(wi(e,t,l),t.memoizedProps=r,e=t.child)):e=Ai(e,t),e;case 6:return null===e&&bi(t),t.memoizedProps=t.pendingProps,null;case 16:return null;case 4:return ni(t,t.stateNode.containerInfo),a=t.pendingProps,da.current||t.memoizedProps!==a?(null===e?t.child=mi(t,null,a,n):wi(e,t,a),t.memoizedProps=a,e=t.child):e=Ai(e,t),e;case 14:return a=t.type.render,n=t.pendingProps,r=t.ref,da.current||t.memoizedProps!==n||r!==(null!==e?e.ref:null)?(wi(e,t,a=a(n,r)),t.memoizedProps=n,e=t.child):e=Ai(e,t),e;case 10:return n=t.pendingProps,da.current||t.memoizedProps!==n?(wi(e,t,n),t.memoizedProps=n,e=t.child):e=Ai(e,t),e;case 11:return n=t.pendingProps.children,da.current||null!==n&&t.memoizedProps!==n?(wi(e,t,n),t.memoizedProps=n,e=t.child):e=Ai(e,t),e;case 15:return n=t.pendingProps,t.memoizedProps===n?e=Ai(e,t):(wi(e,t,n.children),t.memoizedProps=n,e=t.child),e;case 13:return function(e,t,n){var r=t.type._context,a=t.pendingProps,i=t.memoizedProps,o=!0;if(da.current)o=!1;else if(i===a)return t.stateNode=0,$a(t),Ai(e,t);var s=a.value;if(t.memoizedProps=a,null===i)s=1073741823;else if(i.value===a.value){if(i.children===a.children&&o)return t.stateNode=0,$a(t),Ai(e,t);s=0}else{var l=i.value;if(l===s&&(0!==l||1/l==1/s)||l!=l&&s!=s){if(i.children===a.children&&o)return t.stateNode=0,$a(t),Ai(e,t);s=0}else if(s="function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,s):1073741823,0==(s|=0)){if(i.children===a.children&&o)return t.stateNode=0,$a(t),Ai(e,t)}else Ci(t,r,s,n)}return t.stateNode=s,$a(t),wi(e,t,a.children),t.child}(e,t,n);case 12:e:if(r=t.type,i=t.pendingProps,l=t.memoizedProps,a=r._currentValue,o=r._changedBits,da.current||0!==o||l!==i){if(t.memoizedProps=i,void 0!==(s=i.unstable_observedBits)&&null!==s||(s=1073741823),t.stateNode=s,0!=(o&s))Ci(t,r,o,n);else if(l===i){e=Ai(e,t);break e}n=(n=i.children)(a),t.effectTag|=1,wi(e,t,n),e=t.child}else e=Ai(e,t);return e;default:f("156")}}function Ei(e){e.effectTag|=4}var Pi=void 0,Hi=void 0,Oi=void 0;function Fi(e,t){var n=t.pendingProps;switch(t.tag){case 1:return null;case 2:return pa(t),null;case 3:ri(),_a();var r=t.stateNode;return r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(ki(t),t.effectTag&=-3),Pi(t),null;case 5:ai(t),r=ti(ei.current);var a=t.type;if(null!==e&&null!=t.stateNode){var i=e.memoizedProps,o=t.stateNode,s=ti(Za.current);o=Ur(o,a,i,n,r),Hi(e,t,o,a,i,n,r,s),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!n)return null===t.stateNode&&f("166"),null;if(e=ti(Za.current),ki(t))n=t.stateNode,a=t.type,i=t.memoizedProps,n[W]=t,n[z]=i,r=qr(n,a,i,e,r),t.updateQueue=r,null!==r&&Ei(t);else{(e=Wr(a,n,r,e))[W]=t,e[z]=n;e:for(i=t.child;null!==i;){if(5===i.tag||6===i.tag)e.appendChild(i.stateNode);else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)break e;i=i.return}i.sibling.return=i.return,i=i.sibling}Br(e,a,n,r),Qr(a,n)&&Ei(t),t.stateNode=e}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Oi(e,t,e.memoizedProps,n);else{if("string"!=typeof n)return null===t.stateNode&&f("166"),null;r=ti(ei.current),ti(Za.current),ki(t)?(r=t.stateNode,n=t.memoizedProps,r[W]=t,Jr(r,n)&&Ei(t)):((r=zr(n,r))[W]=t,t.stateNode=r)}return null;case 14:case 16:case 10:case 11:case 15:return null;case 4:return ri(),Pi(t),null;case 13:return Ka(t),null;case 12:return null;case 0:f("167");default:f("156")}}function Ri(e,t){var n=t.source;null===t.stack&&null!==n&&Mt(n),null!==n&&vt(n),t=t.value,null!==e&&2===e.tag&&vt(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}function Ni(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){po(e,t)}else t.current=null}function Ii(e){switch(ja(e),e.tag){case 2:Ni(e);var t=e.stateNode;if("function"==typeof t.componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){po(e,t)}break;case 5:Ni(e);break;case 4:Bi(e)}}function Wi(e){return 5===e.tag||3===e.tag||4===e.tag}function zi(e){e:{for(var t=e.return;null!==t;){if(Wi(t)){var n=t;break e}t=t.return}f("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:f("161")}16&n.effectTag&&(jr(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||Wi(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var a=e;;){if(5===a.tag||6===a.tag)if(n)if(r){var i=t,o=a.stateNode,s=n;8===i.nodeType?i.parentNode.insertBefore(o,s):i.insertBefore(o,s)}else t.insertBefore(a.stateNode,n);else r?(i=t,o=a.stateNode,8===i.nodeType?i.parentNode.insertBefore(o,i):i.appendChild(o)):t.appendChild(a.stateNode);else if(4!==a.tag&&null!==a.child){a.child.return=a,a=a.child;continue}if(a===e)break;for(;null===a.sibling;){if(null===a.return||a.return===e)return;a=a.return}a.sibling.return=a.return,a=a.sibling}}function Bi(e){for(var t=e,n=!1,r=void 0,a=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&f("160"),n.tag){case 5:r=n.stateNode,a=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,a=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var i=t,o=i;;)if(Ii(o),null!==o.child&&4!==o.tag)o.child.return=o,o=o.child;else{if(o===i)break;for(;null===o.sibling;){if(null===o.return||o.return===i)break e;o=o.return}o.sibling.return=o.return,o=o.sibling}a?(i=r,o=t.stateNode,8===i.nodeType?i.parentNode.removeChild(o):i.removeChild(o)):r.removeChild(t.stateNode)}else if(4===t.tag?r=t.stateNode.containerInfo:Ii(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function Ui(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var a=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&(n[z]=r,Vr(n,i,a,e,r))}break;case 6:null===t.stateNode&&f("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 15:case 16:break;default:f("163")}}function Vi(e,t,n){(n=Oa(n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Zo(r),Ri(e,t)},n}function qi(e,t,n){(n=Oa(n)).tag=3;var r=e.stateNode;return null!==r&&"function"==typeof r.componentDidCatch&&(n.callback=function(){null===uo?uo=new Set([this]):uo.add(this);var n=t.value,r=t.stack;Ri(e,t),this.componentDidCatch(n,{componentStack:null!==r?r:""})}),n}function Ji(e,t,n,r,a,i){n.effectTag|=512,n.firstEffect=n.lastEffect=null,r=Va(r,n),e=t;do{switch(e.tag){case 3:return e.effectTag|=1024,void Na(e,r=Vi(e,r,i),i);case 2:if(t=r,n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&(null===uo||!uo.has(n)))return e.effectTag|=1024,void Na(e,r=qi(e,t,i),i)}e=e.return}while(null!==e)}function Gi(e){switch(e.tag){case 2:pa(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return ri(),_a(),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return ai(e),null;case 16:return 1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 4:return ri(),null;case 13:return Ka(e),null;default:return null}}Pi=function(){},Hi=function(e,t,n){(t.updateQueue=n)&&Ei(t)},Oi=function(e,t,n,r){n!==r&&Ei(t)};var $i=Xr(),Ki=2,Qi=$i,Zi=0,Xi=0,eo=!1,to=null,no=null,ro=0,ao=-1,io=!1,oo=null,so=!1,lo=!1,uo=null;function co(){if(null!==to)for(var e=to.return;null!==e;){var t=e;switch(t.tag){case 2:pa(t);break;case 3:ri(),_a();break;case 5:ai(t);break;case 4:ri();break;case 13:Ka(t)}e=e.return}no=null,ro=0,ao=-1,io=!1,to=null,lo=!1}function fo(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=Fi(t,e);var a=e;if(1073741823===ro||1073741823!==a.expirationTime){var i=0;switch(a.tag){case 3:case 2:var o=a.updateQueue;null!==o&&(i=o.expirationTime)}for(o=a.child;null!==o;)0!==o.expirationTime&&(0===i||i>o.expirationTime)&&(i=o.expirationTime),o=o.sibling;a.expirationTime=i}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){lo=!0;break}e=n}else{if(null!==(e=Gi(e)))return e.effectTag&=511,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function ho(e){var t=ji(e.alternate,e,ro);return null===t&&(t=fo(e)),it.current=null,t}function mo(e,t,n){eo&&f("243"),eo=!0,t===ro&&e===no&&null!==to||(co(),ro=t,ao=-1,to=La((no=e).current,null,ro),e.pendingCommitExpirationTime=0);var r=!1;for(io=!n||ro<=Ki;;){try{if(n)for(;null!==to&&!Qo();)to=ho(to);else for(;null!==to;)to=ho(to)}catch(t){if(null===to)r=!0,Zo(t);else{null===to&&f("271");var a=(n=to).return;if(null===a){r=!0,Zo(t);break}Ji(e,a,n,t,0,ro),to=fo(n)}}break}if(eo=!1,r)return null;if(null===to){if(lo)return e.pendingCommitExpirationTime=t,e.current.alternate;io&&f("262"),0<=ao&&setTimeout(function(){var t=e.current.expirationTime;0!==t&&(0===e.remainingExpirationTime||e.remainingExpirationTime<t)&&zo(e,t)},ao),function(e){null===To&&f("246"),To.remainingExpirationTime=e}(e.current.expirationTime)}return null}function po(e,t){var n;e:{for(eo&&!so&&f("263"),n=e.return;null!==n;){switch(n.tag){case 2:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromCatch||"function"==typeof r.componentDidCatch&&(null===uo||!uo.has(r))){Ra(n,e=qi(n,e=Va(t,e),1),1),go(n,1),n=void 0;break e}break;case 3:Ra(n,e=Vi(n,e=Va(t,e),1),1),go(n,1),n=void 0;break e}n=n.return}3===e.tag&&(Ra(e,n=Vi(e,n=Va(t,e),1),1),go(e,1)),n=void 0}return n}function _o(){var e=2+25*(1+((vo()-2+500)/25|0));return e<=Zi&&(e=Zi+1),Zi=e}function yo(e,t){return e=0!==Xi?Xi:eo?so?1:ro:1&t.mode?Oo?2+10*(1+((e-2+15)/10|0)):2+25*(1+((e-2+500)/25|0)):1,Oo&&(0===So||e>So)&&(So=e),e}function go(e,t){for(;null!==e;){if((0===e.expirationTime||e.expirationTime>t)&&(e.expirationTime=t),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>t)&&(e.alternate.expirationTime=t),null===e.return){if(3!==e.tag)break;var n=e.stateNode;!eo&&0!==ro&&t<ro&&co();var r=n.current.expirationTime;eo&&!so&&no===n||zo(n,r),No>Ro&&f("185")}e=e.return}}function vo(){return Qi=Xr()-$i,Ki=2+(Qi/10|0)}function Mo(e){var t=Xi;Xi=2+25*(1+((vo()-2+500)/25|0));try{return e()}finally{Xi=t}}function bo(e,t,n,r,a){var i=Xi;Xi=1;try{return e(t,n,r,a)}finally{Xi=i}}var Lo=null,ko=null,xo=0,wo=void 0,Yo=!1,To=null,Do=0,So=0,Co=!1,Ao=!1,jo=null,Eo=null,Po=!1,Ho=!1,Oo=!1,Fo=null,Ro=1e3,No=0,Io=1;function Wo(e){if(0!==xo){if(e>xo)return;null!==wo&&ta(wo)}var t=Xr()-$i;xo=e,wo=ea(Uo,{timeout:10*(e-2)-t})}function zo(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===ko?(Lo=ko=e,e.nextScheduledRoot=e):(ko=ko.nextScheduledRoot=e).nextScheduledRoot=Lo;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}Yo||(Po?Ho&&(To=e,Do=1,$o(e,1,!1)):1===t?Vo():Wo(t))}function Bo(){var e=0,t=null;if(null!==ko)for(var n=ko,r=Lo;null!==r;){var a=r.remainingExpirationTime;if(0===a){if((null===n||null===ko)&&f("244"),r===r.nextScheduledRoot){Lo=ko=r.nextScheduledRoot=null;break}if(r===Lo)Lo=a=r.nextScheduledRoot,ko.nextScheduledRoot=a,r.nextScheduledRoot=null;else{if(r===ko){(ko=n).nextScheduledRoot=Lo,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||a<e)&&(e=a,t=r),r===ko)break;n=r,r=r.nextScheduledRoot}}null!==(n=To)&&n===t&&1===e?No++:No=0,To=t,Do=e}function Uo(e){qo(0,!0,e)}function Vo(){qo(1,!1,null)}function qo(e,t,n){if(Eo=n,Bo(),t)for(;null!==To&&0!==Do&&(0===e||e>=Do)&&(!Co||vo()>=Do);)vo(),$o(To,Do,!Co),Bo();else for(;null!==To&&0!==Do&&(0===e||e>=Do);)$o(To,Do,!1),Bo();null!==Eo&&(xo=0,wo=null),0!==Do&&Wo(Do),Eo=null,Co=!1,Go()}function Jo(e,t){Yo&&f("253"),To=e,Do=t,$o(e,t,!1),Vo(),Go()}function Go(){if(No=0,null!==Fo){var e=Fo;Fo=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){Ao||(Ao=!0,jo=e)}}}if(Ao)throw e=jo,jo=null,Ao=!1,e}function $o(e,t,n){Yo&&f("245"),Yo=!0,n?null!==(n=e.finishedWork)?Ko(e,n,t):null!==(n=mo(e,t,!0))&&(Qo()?e.finishedWork=n:Ko(e,n,t)):null!==(n=e.finishedWork)?Ko(e,n,t):null!==(n=mo(e,t,!1))&&Ko(e,n,t),Yo=!1}function Ko(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Fo?Fo=[r]:Fo.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);if(e.finishedWork=null,so=eo=!0,(n=t.stateNode).current===t&&f("177"),0===(r=n.pendingCommitExpirationTime)&&f("261"),n.pendingCommitExpirationTime=0,vo(),it.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var a=t.firstEffect}else a=t;else a=t.firstEffect;$r=Cn;var i=l();if(Bn(i)){if("selectionStart"in i)var o={start:i.selectionStart,end:i.selectionEnd};else e:{var s=window.getSelection&&window.getSelection();if(s&&0!==s.rangeCount){o=s.anchorNode;var u=s.anchorOffset,c=s.focusNode;s=s.focusOffset;try{o.nodeType,c.nodeType}catch(e){o=null;break e}var h=0,m=-1,p=-1,_=0,y=0,g=i,v=null;t:for(;;){for(var M;g!==o||0!==u&&3!==g.nodeType||(m=h+u),g!==c||0!==s&&3!==g.nodeType||(p=h+s),3===g.nodeType&&(h+=g.nodeValue.length),null!==(M=g.firstChild);)v=g,g=M;for(;;){if(g===i)break t;if(v===o&&++_===u&&(m=h),v===c&&++y===s&&(p=h),null!==(M=g.nextSibling))break;v=(g=v).parentNode}g=M}o=-1===m||-1===p?null:{start:m,end:p}}else o=null}o=o||{start:0,end:0}}else o=null;for(Kr={focusedElem:i,selectionRange:o},An(!1),oo=a;null!==oo;){i=!1,o=void 0;try{for(;null!==oo;){if(256&oo.effectTag){var b=oo.alternate;switch((u=oo).tag){case 2:if(256&u.effectTag&&null!==b){var L=b.memoizedProps,k=b.memoizedState,x=u.stateNode;x.props=u.memoizedProps,x.state=u.memoizedState;var w=x.getSnapshotBeforeUpdate(L,k);x.__reactInternalSnapshotBeforeUpdate=w}break;case 3:case 5:case 6:case 4:break;default:f("163")}}oo=oo.nextEffect}}catch(e){i=!0,o=e}i&&(null===oo&&f("178"),po(oo,o),null!==oo&&(oo=oo.nextEffect))}for(oo=a;null!==oo;){b=!1,L=void 0;try{for(;null!==oo;){var Y=oo.effectTag;if(16&Y&&jr(oo.stateNode,""),128&Y){var T=oo.alternate;if(null!==T){var D=T.ref;null!==D&&("function"==typeof D?D(null):D.current=null)}}switch(14&Y){case 2:zi(oo),oo.effectTag&=-3;break;case 6:zi(oo),oo.effectTag&=-3,Ui(oo.alternate,oo);break;case 4:Ui(oo.alternate,oo);break;case 8:Bi(k=oo),k.return=null,k.child=null,k.alternate&&(k.alternate.child=null,k.alternate.return=null)}oo=oo.nextEffect}}catch(e){b=!0,L=e}b&&(null===oo&&f("178"),po(oo,L),null!==oo&&(oo=oo.nextEffect))}if(D=Kr,T=l(),Y=D.focusedElem,b=D.selectionRange,T!==Y&&d(document.documentElement,Y)){null!==b&&Bn(Y)&&(T=b.start,void 0===(D=b.end)&&(D=T),"selectionStart"in Y?(Y.selectionStart=T,Y.selectionEnd=Math.min(D,Y.value.length)):window.getSelection&&(T=window.getSelection(),L=Y[me()].length,D=Math.min(b.start,L),b=void 0===b.end?D:Math.min(b.end,L),!T.extend&&D>b&&(L=b,b=D,D=L),L=zn(Y,D),k=zn(Y,b),L&&k&&(1!==T.rangeCount||T.anchorNode!==L.node||T.anchorOffset!==L.offset||T.focusNode!==k.node||T.focusOffset!==k.offset)&&((x=document.createRange()).setStart(L.node,L.offset),T.removeAllRanges(),D>b?(T.addRange(x),T.extend(k.node,k.offset)):(x.setEnd(k.node,k.offset),T.addRange(x))))),T=[];for(D=Y;D=D.parentNode;)1===D.nodeType&&T.push({element:D,left:D.scrollLeft,top:D.scrollTop});for("function"==typeof Y.focus&&Y.focus(),Y=0;Y<T.length;Y++)(D=T[Y]).element.scrollLeft=D.left,D.element.scrollTop=D.top}for(Kr=null,An($r),$r=null,n.current=t,oo=a;null!==oo;){a=!1,Y=void 0;try{for(T=r;null!==oo;){var S=oo.effectTag;if(36&S){var C=oo.alternate;switch(b=T,(D=oo).tag){case 2:var A=D.stateNode;if(4&D.effectTag)if(null===C)A.props=D.memoizedProps,A.state=D.memoizedState,A.componentDidMount();else{var j=C.memoizedProps,E=C.memoizedState;A.props=D.memoizedProps,A.state=D.memoizedState,A.componentDidUpdate(j,E,A.__reactInternalSnapshotBeforeUpdate)}var P=D.updateQueue;null!==P&&(A.props=D.memoizedProps,A.state=D.memoizedState,Ua(D,P,A));break;case 3:var H=D.updateQueue;if(null!==H){if(L=null,null!==D.child)switch(D.child.tag){case 5:L=D.child.stateNode;break;case 2:L=D.child.stateNode}Ua(D,H,L)}break;case 5:var O=D.stateNode;null===C&&4&D.effectTag&&Qr(D.type,D.memoizedProps)&&O.focus();break;case 6:case 4:case 15:case 16:break;default:f("163")}}if(128&S){D=void 0;var F=oo.ref;if(null!==F){var R=oo.stateNode;switch(oo.tag){case 5:D=R;break;default:D=R}"function"==typeof F?F(D):F.current=D}}var N=oo.nextEffect;oo.nextEffect=null,oo=N}}catch(e){a=!0,Y=e}a&&(null===oo&&f("178"),po(oo,Y),null!==oo&&(oo=oo.nextEffect))}eo=so=!1,Aa(t.stateNode),0===(t=n.current.expirationTime)&&(uo=null),e.remainingExpirationTime=t}function Qo(){return!(null===Eo||Eo.timeRemaining()>Io)&&(Co=!0)}function Zo(e){null===To&&f("246"),To.remainingExpirationTime=0,Ao||(Ao=!0,jo=e)}function Xo(e,t){var n=Po;Po=!0;try{return e(t)}finally{(Po=n)||Yo||Vo()}}function es(e,t){if(Po&&!Ho){Ho=!0;try{return e(t)}finally{Ho=!1}}return e(t)}function ts(e,t){Yo&&f("187");var n=Po;Po=!0;try{return bo(e,t)}finally{Po=n,Vo()}}function ns(e,t,n){if(Oo)return e(t,n);Po||Yo||0===So||(qo(So,!1,null),So=0);var r=Oo,a=Po;Po=Oo=!0;try{return e(t,n)}finally{Oo=r,(Po=a)||Yo||Vo()}}function rs(e){var t=Po;Po=!0;try{bo(e)}finally{(Po=t)||Yo||qo(1,!1,null)}}function as(e,t,n,r,a){var i=t.current;if(n){var o;n=n._reactInternalFiber;e:{for(2===sn(n)&&2===n.tag||f("170"),o=n;3!==o.tag;){if(ma(o)){o=o.stateNode.__reactInternalMemoizedMergedChildContext;break e}(o=o.return)||f("171")}o=o.stateNode.context}n=ma(n)?ga(n,o):o}else n=c;return null===t.context?t.context=n:t.pendingContext=n,t=a,(a=Oa(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(a.callback=t),Ra(i,a,r),go(i,r),r}function is(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?f("188"):f("268",Object.keys(e))),null===(e=dn(t))?null:e.stateNode}function os(e,t,n,r){var a=t.current;return as(e,t,n,a=yo(vo(),a),r)}function ss(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function ls(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Da=Ca(function(e){return t.onCommitFiberRoot(n,e)}),Sa=Ca(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(o({},e,{findHostInstanceByFiber:function(e){return null===(e=dn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}var us=Xo,ds=ns,cs=function(){Yo||0===So||(qo(So,!1,null),So=0)};function fs(e){this._expirationTime=_o(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function hs(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function ms(e,t,n){this._internalRoot=Ta(e,t,n)}function ps(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function _s(e,t,n,r,a){ps(n)||f("200");var i=n._reactRootContainer;if(i){if("function"==typeof a){var o=a;a=function(){var e=ss(i._internalRoot);o.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,a):i.render(t,a)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new ms(e,!1,t)}(n,r),"function"==typeof a){var s=a;a=function(){var e=ss(i._internalRoot);s.call(e)}}es(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,a):i.render(t,a)})}return ss(i._internalRoot)}function ys(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return ps(t)||f("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:lt,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Ne.injectFiberControlledHostComponent(Gr),fs.prototype.render=function(e){this._defer||f("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new hs;return as(e,t,null,n,r._onCommit),r},fs.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},fs.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||f("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,a=t;a!==this;)r=a,a=a._next;null===r&&f("251"),r._next=a._next,this._next=t,e.firstBatch=this}this._defer=!1,Jo(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},fs.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},hs.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},hs.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&f("191",n),n()}}},ms.prototype.render=function(e,t){var n=this._internalRoot,r=new hs;return null!==(t=void 0===t?null:t)&&r.then(t),os(e,n,null,r._onCommit),r},ms.prototype.unmount=function(e){var t=this._internalRoot,n=new hs;return null!==(e=void 0===e?null:e)&&n.then(e),os(null,t,null,n._onCommit),n},ms.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,a=new hs;return null!==(n=void 0===n?null:n)&&a.then(n),os(t,r,e,a._onCommit),a},ms.prototype.createBatch=function(){var e=new fs(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Je=us,Ge=ds,$e=cs;var gs={createPortal:ys,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:is(e)},hydrate:function(e,t,n){return _s(null,e,t,!0,n)},render:function(e,t,n){return _s(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&f("38"),_s(e,t,n,!1,r)},unmountComponentAtNode:function(e){return ps(e)||f("40"),!!e._reactRootContainer&&(es(function(){_s(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return ys.apply(void 0,arguments)},unstable_batchedUpdates:Xo,unstable_deferredUpdates:Mo,unstable_interactiveUpdates:ns,flushSync:ts,unstable_flushControlled:rs,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:N,EventPluginRegistry:x,EventPropagators:ne,ReactControlledComponent:qe,ReactDOMComponentTree:q,ReactDOMEventListener:On},unstable_createRoot:function(e,t){return new ms(e,!0,null!=t&&!0===t.hydrate)}};ls({findFiberByHostInstance:B,bundleType:0,version:"16.4.2",rendererPackageName:"react-dom"});var vs={default:gs},Ms=vs&&gs||vs;e.exports=Ms.default?Ms.default:Ms},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),a={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=a},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function a(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(a(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(var o=0;o<n.length;o++)if(!r.call(t,n[o])||!a(e[n[o]],t[n[o]]))return!1;return!0}},function(e,t,n){"use strict";var r=n(160);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r=n(161);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),a=f(r),i=f(n(163)),o=f(n(176)),s=f(n(186)),l=f(n(190)),u=f(n(251)),d=n(15),c=f(n(255));function f(e){return e&&e.__esModule?e:{default:e}}t.default=class extends r.Component{render(){return a.default.createElement("div",{className:c.default.app},a.default.createElement(d.BrowserRouter,null,a.default.createElement("div",null,a.default.createElement("header",null,a.default.createElement(i.default,null)),a.default.createElement("main",null,a.default.createElement(d.Switch,null,a.default.createElement(d.Route,{exact:!0,path:"/",component:s.default}),a.default.createElement(d.Route,{exact:!0,path:"/companies",component:o.default}),a.default.createElement(d.Route,{path:"/companies/:id",component:l.default}),a.default.createElement(d.Route,{path:"/favorites",component:u.default}),a.default.createElement(d.Redirect,{to:"/"}))))))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),a=u(r),i=u(n(164)),o=n(15),s=u(n(173)),l=u(n(175));function u(e){return e&&e.__esModule?e:{default:e}}t.default=class extends r.Component{componentDidMount(){(0,l.default)(".ml14 .letters").each(function(){(0,l.default)(this).html((0,l.default)(this).text().replace(/([^\x00-\x80]|\w)/g,'<span class="letter">$&</span>'))}),anime.timeline({loop:!1}).add({targets:".ml14 .line",scaleX:[0,1],opacity:[.5,1],easing:"easeInOutExpo",duration:900}).add({targets:".ml14 .letter",opacity:[0,1],translateX:[40,0],translateZ:0,scaleX:[.3,1],easing:"easeOutExpo",duration:800,offset:"-=600",delay:function(e,t){return 150+35*t}})}render(){return a.default.createElement("div",{className:s.default.header},a.default.createElement("div",null,a.default.createElement("h1",{className:"ml14"},a.default.createElement("span",{className:"text-wrapper"},a.default.createElement("span",{className:"letters"},"Market Watch"),a.default.createElement("span",{className:"line"}))),a.default.createElement(o.Route,{component:i.default})),a.default.createElement("nav",null,a.default.createElement(o.Link,{to:"/"},"Home"),a.default.createElement(o.Link,{to:"/favorites"},"Favorites"),a.default.createElement(o.Link,{to:"/companies"},"Search")))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),a=l(r),i=l(n(1)),o=l(n(21)),s=l(n(169));function l(e){return e&&e.__esModule?e:{default:e}}class u extends r.Component{constructor(...e){var t;return t=super(...e),this.state={search:"",ticker:"",sectors:["Consumer Cyclical","Technology","Healthcare","Industrials","Utilities","Financials","Consumer Discretionary","Consumer Staples","Energy","Materials","Real Estate","Communication Services"]},this.handleChange=(e=>{this.setState({search:e})}),this.handleSubmit=(e=>{e.preventDefault();const{search:t}=this.state;if(!t)return;const{history:n}=this.props;n.push({pathname:"/companies",search:o.default.stringify({search:t,page:1})})}),this.handleTickerChange=(e=>{this.setState({ticker:e})}),this.handleTicker=(e=>{const{ticker:t}=this.state;if(e.preventDefault(),""===t||t.length>5)return;const{history:n}=this.props;n.push({pathname:`/companies/${t}`})}),t}componentDidMount(){const{location:e}=this.props,{search:t=""}=o.default.parse(e.search);this.setState({search:t})}render(){const{sectors:e,search:t}=this.state;return a.default.createElement("div",{className:s.default.search},a.default.createElement("form",{className:"search-form",onSubmit:this.handleSubmit},a.default.createElement("select",{value:t,onChange:({target:e})=>this.handleChange(e.value)},a.default.createElement("option",{value:""},"Select a sector"),e.map(e=>a.default.createElement("option",{key:e,value:e},e))),a.default.createElement("button",{disabled:!t},"Search")),a.default.createElement("form",{onSubmit:e=>this.handleTicker(e)},a.default.createElement("input",{onChange:({target:e})=>this.handleTickerChange(e.value),maxLength:"5",type:"text",placeholder:"Enter a stock symbol"}),a.default.createElement("button",{type:"submit"},"Enter")))}}t.default=u,u.propTypes={history:i.default.object.isRequired,location:i.default.object.isRequired}},function(e,t,n){"use strict";var r=n(166);function a(){}e.exports=function(){function e(e,t,n,a,i,o){if(o!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=a,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";e.exports=(e=>encodeURIComponent(e).replace(/[!'()*]/g,e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`))},function(e,t,n){"use strict";var r=new RegExp("%[a-f0-9]{2}","gi"),a=new RegExp("(%[a-f0-9]{2})+","gi");function i(e,t){try{return decodeURIComponent(e.join(""))}catch(e){}if(1===e.length)return e;t=t||1;var n=e.slice(0,t),r=e.slice(t);return Array.prototype.concat.call([],i(n),i(r))}function o(e){try{return decodeURIComponent(e)}catch(a){for(var t=e.match(r),n=1;n<t.length;n++)t=(e=i(t,n).join("")).match(r);return e}}e.exports=function(e){if("string"!=typeof e)throw new TypeError("Expected `encodedURI` to be of type `string`, got `"+typeof e+"`");try{return e=e.replace(/\+/g," "),decodeURIComponent(e)}catch(t){return function(e){for(var t={"%FE%FF":"��","%FF%FE":"��"},n=a.exec(e);n;){try{t[n[0]]=decodeURIComponent(n[0])}catch(e){var r=o(n[0]);r!==n[0]&&(t[n[0]]=r)}n=a.exec(e)}t["%C2"]="�";for(var i=Object.keys(t),s=0;s<i.length;s++){var l=i[s];e=e.replace(new RegExp(l,"g"),t[l])}return e}(e)}}},function(e,t,n){var r=n(170);"string"==typeof r&&(r=[[e.i,r,""]]);var a={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(9)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(8)(!0)).push([e.i,"._2ga24BkbuZvJjOoJAtKl63 {\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: space-between;\n  width: 80vw;\n  min-width: 430px;\n    font-size: 20px;\n}\n\n  ._2ga24BkbuZvJjOoJAtKl63 select {\n  }\n\n  ._2ga24BkbuZvJjOoJAtKl63 button {\n    font-size: 20px;\n    border-radius: 5px;\n  }\n\n  ._2ga24BkbuZvJjOoJAtKl63 input {\n    font-size: 20px;\n  }","",{version:3,sources:["/Users/Grayson/alchemy/career-track/search-all-the-things/src/components/search/Search.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,oBAAoB;EACpB,+BAA+B;EAC/B,YAAY;EACZ,iBAAiB;IACf,gBAAgB;CAanB;;EAXC;GACC;;EAED;IACE,gBAAgB;IAChB,mBAAmB;GACpB;;EAED;IACE,gBAAgB;GACjB",file:"Search.css",sourcesContent:[":local(.search) {\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: space-between;\n  width: 80vw;\n  min-width: 430px;\n    font-size: 20px;\n\n  select {\n  }\n\n  button {\n    font-size: 20px;\n    border-radius: 5px;\n  }\n\n  input {\n    font-size: 20px;\n  }\n}"],sourceRoot:""}]),t.locals={search:"_2ga24BkbuZvJjOoJAtKl63"}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var a,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(a=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(a)+")")})}},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){var r=n(174);"string"==typeof r&&(r=[[e.i,r,""]]);var a={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(9)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(8)(!0)).push([e.i,"._1qkOkFMDS8LyJWaaPwv31h {\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: space-evenly;\n  min-width: 430px;\n  }\n\n    ._1qkOkFMDS8LyJWaaPwv31h h1 {\n      text-align: center;\n      font-family: 'Racing Sans One', cursive;\n      font-size: 3.2em;\n    }\n\n    ._1qkOkFMDS8LyJWaaPwv31h button {\n      margin: 5px;\n    }\n\n    ._1qkOkFMDS8LyJWaaPwv31h nav {\n      display: flex;\n      flex-flow: row wrap;\n      justify-content: space-between;\n      text-align: center;\n      font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n      font-size: 20px;\n      margin-top: 20px;\n      margin-bottom: 20px;\n      width: 60vw;\n      min-width: 430px;\n    }\n\n    ._1qkOkFMDS8LyJWaaPwv31h .ml14 {\n      font-weight: 200;\n      font-size: 2.3em;\n    }\n\n    ._1qkOkFMDS8LyJWaaPwv31h .ml14 .text-wrapper {\n      position: relative;\n      display: inline-block;\n      padding-top: 0.1em;\n      padding-right: 0.05em;\n      padding-bottom: 0.15em;\n    }\n\n    ._1qkOkFMDS8LyJWaaPwv31h .ml14 .line {\n      opacity: 0;\n      position: absolute;\n      left: 0;\n      height: 2px;\n      width: 100%;\n      background-color: #fff;\n      -webkit-transform-origin: 100% 100%;\n              transform-origin: 100% 100%;\n      bottom: 0;\n    }\n\n    ._1qkOkFMDS8LyJWaaPwv31h .ml14 .letter {\n      display: inline-block;\n      line-height: 1em;\n    }","",{version:3,sources:["/Users/Grayson/alchemy/career-track/search-all-the-things/src/components/Header.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,oBAAoB;EACpB,8BAA8B;EAC9B,iBAAiB;GAsDhB;;IApDC;MACE,mBAAmB;MACnB,wCAAwC;MACxC,iBAAiB;KAClB;;IAED;MACE,YAAY;KACb;;IAED;MACE,cAAc;MACd,oBAAoB;MACpB,+BAA+B;MAC/B,mBAAmB;MACnB,8EAA8E;MAC9E,gBAAgB;MAChB,iBAAiB;MACjB,oBAAoB;MACpB,YAAY;MACZ,iBAAiB;KAClB;;IAGD;MACE,iBAAiB;MACjB,iBAAiB;KAClB;;IAED;MACE,mBAAmB;MACnB,sBAAsB;MACtB,mBAAmB;MACnB,sBAAsB;MACtB,uBAAuB;KACxB;;IAED;MACE,WAAW;MACX,mBAAmB;MACnB,QAAQ;MACR,YAAY;MACZ,YAAY;MACZ,uBAAuB;MACvB,oCAA4B;cAA5B,4BAA4B;MAC5B,UAAU;KACX;;IAED;MACE,sBAAsB;MACtB,iBAAiB;KAClB",file:"Header.css",sourcesContent:[":local(.header) {\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: space-evenly;\n  min-width: 430px;\n\n    h1 {\n      text-align: center;\n      font-family: 'Racing Sans One', cursive;\n      font-size: 3.2em;\n    }\n\n    button {\n      margin: 5px;\n    }\n\n    nav {\n      display: flex;\n      flex-flow: row wrap;\n      justify-content: space-between;\n      text-align: center;\n      font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n      font-size: 20px;\n      margin-top: 20px;\n      margin-bottom: 20px;\n      width: 60vw;\n      min-width: 430px;\n    }\n\n\n    .ml14 {\n      font-weight: 200;\n      font-size: 2.3em;\n    }\n    \n    .ml14 .text-wrapper {\n      position: relative;\n      display: inline-block;\n      padding-top: 0.1em;\n      padding-right: 0.05em;\n      padding-bottom: 0.15em;\n    }\n    \n    .ml14 .line {\n      opacity: 0;\n      position: absolute;\n      left: 0;\n      height: 2px;\n      width: 100%;\n      background-color: #fff;\n      transform-origin: 100% 100%;\n      bottom: 0;\n    }\n    \n    .ml14 .letter {\n      display: inline-block;\n      line-height: 1em;\n    }\n  }"],sourceRoot:""}]),t.locals={header:"_1qkOkFMDS8LyJWaaPwv31h"}},function(e,t,n){var r;
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
!function(t,n){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,a){"use strict";var i=[],o=n.document,s=Object.getPrototypeOf,l=i.slice,u=i.concat,d=i.push,c=i.indexOf,f={},h=f.toString,m=f.hasOwnProperty,p=m.toString,_=p.call(Object),y={},g=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},v=function(e){return null!=e&&e===e.window},M={type:!0,src:!0,noModule:!0};function b(e,t,n){var r,a=(t=t||o).createElement("script");if(a.text=e,n)for(r in M)n[r]&&(a[r]=n[r]);t.head.appendChild(a).parentNode.removeChild(a)}function L(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?f[h.call(e)]||"object":typeof e}var k=function(e,t){return new k.fn.init(e,t)},x=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function w(e){var t=!!e&&"length"in e&&e.length,n=L(e);return!g(e)&&!v(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}k.fn=k.prototype={jquery:"3.3.1",constructor:k,length:0,toArray:function(){return l.call(this)},get:function(e){return null==e?l.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=k.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return k.each(this,e)},map:function(e){return this.pushStack(k.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(l.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:d,sort:i.sort,splice:i.splice},k.extend=k.fn.extend=function(){var e,t,n,r,a,i,o=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof o&&(u=o,o=arguments[s]||{},s++),"object"==typeof o||g(o)||(o={}),s===l&&(o=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)n=o[t],o!==(r=e[t])&&(u&&r&&(k.isPlainObject(r)||(a=Array.isArray(r)))?(a?(a=!1,i=n&&Array.isArray(n)?n:[]):i=n&&k.isPlainObject(n)?n:{},o[t]=k.extend(u,i,r)):void 0!==r&&(o[t]=r));return o},k.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==h.call(e))&&(!(t=s(e))||"function"==typeof(n=m.call(t,"constructor")&&t.constructor)&&p.call(n)===_)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){b(e)},each:function(e,t){var n,r=0;if(w(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(x,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(w(Object(e))?k.merge(n,"string"==typeof e?[e]:e):d.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:c.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,a=e.length;r<n;r++)e[a++]=t[r];return e.length=a,e},grep:function(e,t,n){for(var r=[],a=0,i=e.length,o=!n;a<i;a++)!t(e[a],a)!==o&&r.push(e[a]);return r},map:function(e,t,n){var r,a,i=0,o=[];if(w(e))for(r=e.length;i<r;i++)null!=(a=t(e[i],i,n))&&o.push(a);else for(i in e)null!=(a=t(e[i],i,n))&&o.push(a);return u.apply([],o)},guid:1,support:y}),"function"==typeof Symbol&&(k.fn[Symbol.iterator]=i[Symbol.iterator]),k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){f["[object "+t+"]"]=t.toLowerCase()});var Y=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(e){var t,n,r,a,i,o,s,l,u,d,c,f,h,m,p,_,y,g,v,M="sizzle"+1*new Date,b=e.document,L=0,k=0,x=oe(),w=oe(),Y=oe(),T=function(e,t){return e===t&&(c=!0),0},D={}.hasOwnProperty,S=[],C=S.pop,A=S.push,j=S.push,E=S.slice,P=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},H="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",O="[\\x20\\t\\r\\n\\f]",F="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",R="\\["+O+"*("+F+")(?:"+O+"*([*^$|!~]?=)"+O+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+F+"))|)"+O+"*\\]",N=":("+F+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",I=new RegExp(O+"+","g"),W=new RegExp("^"+O+"+|((?:^|[^\\\\])(?:\\\\.)*)"+O+"+$","g"),z=new RegExp("^"+O+"*,"+O+"*"),B=new RegExp("^"+O+"*([>+~]|"+O+")"+O+"*"),U=new RegExp("="+O+"*([^\\]'\"]*?)"+O+"*\\]","g"),V=new RegExp(N),q=new RegExp("^"+F+"$"),J={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),TAG:new RegExp("^("+F+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+N),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+O+"*(even|odd|(([+-]|)(\\d*)n|)"+O+"*(?:([+-]|)"+O+"*(\\d+)|))"+O+"*\\)|)","i"),bool:new RegExp("^(?:"+H+")$","i"),needsContext:new RegExp("^"+O+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+O+"*((?:-\\d)?\\d*)"+O+"*\\)|)(?=[^-]|$)","i")},G=/^(?:input|select|textarea|button)$/i,$=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Z=/[+~]/,X=new RegExp("\\\\([\\da-f]{1,6}"+O+"?|("+O+")|.)","ig"),ee=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=function(){f()},ae=ge(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{j.apply(S=E.call(b.childNodes),b.childNodes),S[b.childNodes.length].nodeType}catch(e){j={apply:S.length?function(e,t){A.apply(e,E.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function ie(e,t,r,a){var i,s,u,d,c,m,y,g=t&&t.ownerDocument,L=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==L&&9!==L&&11!==L)return r;if(!a&&((t?t.ownerDocument||t:b)!==h&&f(t),t=t||h,p)){if(11!==L&&(c=Q.exec(e)))if(i=c[1]){if(9===L){if(!(u=t.getElementById(i)))return r;if(u.id===i)return r.push(u),r}else if(g&&(u=g.getElementById(i))&&v(t,u)&&u.id===i)return r.push(u),r}else{if(c[2])return j.apply(r,t.getElementsByTagName(e)),r;if((i=c[3])&&n.getElementsByClassName&&t.getElementsByClassName)return j.apply(r,t.getElementsByClassName(i)),r}if(n.qsa&&!Y[e+" "]&&(!_||!_.test(e))){if(1!==L)g=t,y=e;else if("object"!==t.nodeName.toLowerCase()){for((d=t.getAttribute("id"))?d=d.replace(te,ne):t.setAttribute("id",d=M),s=(m=o(e)).length;s--;)m[s]="#"+d+" "+ye(m[s]);y=m.join(","),g=Z.test(e)&&pe(t.parentNode)||t}if(y)try{return j.apply(r,g.querySelectorAll(y)),r}catch(e){}finally{d===M&&t.removeAttribute("id")}}}return l(e.replace(W,"$1"),t,r,a)}function oe(){var e=[];return function t(n,a){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=a}}function se(e){return e[M]=!0,e}function le(e){var t=h.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ue(e,t){for(var n=e.split("|"),a=n.length;a--;)r.attrHandle[n[a]]=t}function de(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function ce(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function fe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function he(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function me(e){return se(function(t){return t=+t,se(function(n,r){for(var a,i=e([],n.length,t),o=i.length;o--;)n[a=i[o]]&&(n[a]=!(r[a]=n[a]))})})}function pe(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=ie.support={},i=ie.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},f=ie.setDocument=function(e){var t,a,o=e?e.ownerDocument||e:b;return o!==h&&9===o.nodeType&&o.documentElement?(m=(h=o).documentElement,p=!i(h),b!==h&&(a=h.defaultView)&&a.top!==a&&(a.addEventListener?a.addEventListener("unload",re,!1):a.attachEvent&&a.attachEvent("onunload",re)),n.attributes=le(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=le(function(e){return e.appendChild(h.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=K.test(h.getElementsByClassName),n.getById=le(function(e){return m.appendChild(e).id=M,!h.getElementsByName||!h.getElementsByName(M).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(X,ee);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&p){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(X,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&p){var n,r,a,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(a=t.getElementsByName(e),r=0;i=a[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],a=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[a++];)1===n.nodeType&&r.push(n);return r}return i},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&p)return t.getElementsByClassName(e)},y=[],_=[],(n.qsa=K.test(h.querySelectorAll))&&(le(function(e){m.appendChild(e).innerHTML="<a id='"+M+"'></a><select id='"+M+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&_.push("[*^$]="+O+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||_.push("\\["+O+"*(?:value|"+H+")"),e.querySelectorAll("[id~="+M+"-]").length||_.push("~="),e.querySelectorAll(":checked").length||_.push(":checked"),e.querySelectorAll("a#"+M+"+*").length||_.push(".#.+[+~]")}),le(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=h.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&_.push("name"+O+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&_.push(":enabled",":disabled"),m.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&_.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),_.push(",.*:")})),(n.matchesSelector=K.test(g=m.matches||m.webkitMatchesSelector||m.mozMatchesSelector||m.oMatchesSelector||m.msMatchesSelector))&&le(function(e){n.disconnectedMatch=g.call(e,"*"),g.call(e,"[s!='']:x"),y.push("!=",N)}),_=_.length&&new RegExp(_.join("|")),y=y.length&&new RegExp(y.join("|")),t=K.test(m.compareDocumentPosition),v=t||K.test(m.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},T=t?function(e,t){if(e===t)return c=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===h||e.ownerDocument===b&&v(b,e)?-1:t===h||t.ownerDocument===b&&v(b,t)?1:d?P(d,e)-P(d,t):0:4&r?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,r=0,a=e.parentNode,i=t.parentNode,o=[e],s=[t];if(!a||!i)return e===h?-1:t===h?1:a?-1:i?1:d?P(d,e)-P(d,t):0;if(a===i)return de(e,t);for(n=e;n=n.parentNode;)o.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;o[r]===s[r];)r++;return r?de(o[r],s[r]):o[r]===b?-1:s[r]===b?1:0},h):h},ie.matches=function(e,t){return ie(e,null,null,t)},ie.matchesSelector=function(e,t){if((e.ownerDocument||e)!==h&&f(e),t=t.replace(U,"='$1']"),n.matchesSelector&&p&&!Y[t+" "]&&(!y||!y.test(t))&&(!_||!_.test(t)))try{var r=g.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return ie(t,h,null,[e]).length>0},ie.contains=function(e,t){return(e.ownerDocument||e)!==h&&f(e),v(e,t)},ie.attr=function(e,t){(e.ownerDocument||e)!==h&&f(e);var a=r.attrHandle[t.toLowerCase()],i=a&&D.call(r.attrHandle,t.toLowerCase())?a(e,t,!p):void 0;return void 0!==i?i:n.attributes||!p?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},ie.escape=function(e){return(e+"").replace(te,ne)},ie.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ie.uniqueSort=function(e){var t,r=[],a=0,i=0;if(c=!n.detectDuplicates,d=!n.sortStable&&e.slice(0),e.sort(T),c){for(;t=e[i++];)t===e[i]&&(a=r.push(i));for(;a--;)e.splice(r[a],1)}return d=null,e},a=ie.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=a(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=a(t);return n},(r=ie.selectors={cacheLength:50,createPseudo:se,match:J,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(X,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(X,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ie.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ie.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return J.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&V.test(n)&&(t=o(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(X,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=x[e+" "];return t||(t=new RegExp("(^|"+O+")"+e+"("+O+"|$)"))&&x(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var a=ie.attr(r,e);return null==a?"!="===t:!t||(a+="","="===t?a===n:"!="===t?a!==n:"^="===t?n&&0===a.indexOf(n):"*="===t?n&&a.indexOf(n)>-1:"$="===t?n&&a.slice(-n.length)===n:"~="===t?(" "+a.replace(I," ")+" ").indexOf(n)>-1:"|="===t&&(a===n||a.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,a){var i="nth"!==e.slice(0,3),o="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===a?function(e){return!!e.parentNode}:function(t,n,l){var u,d,c,f,h,m,p=i!==o?"nextSibling":"previousSibling",_=t.parentNode,y=s&&t.nodeName.toLowerCase(),g=!l&&!s,v=!1;if(_){if(i){for(;p;){for(f=t;f=f[p];)if(s?f.nodeName.toLowerCase()===y:1===f.nodeType)return!1;m=p="only"===e&&!m&&"nextSibling"}return!0}if(m=[o?_.firstChild:_.lastChild],o&&g){for(v=(h=(u=(d=(c=(f=_)[M]||(f[M]={}))[f.uniqueID]||(c[f.uniqueID]={}))[e]||[])[0]===L&&u[1])&&u[2],f=h&&_.childNodes[h];f=++h&&f&&f[p]||(v=h=0)||m.pop();)if(1===f.nodeType&&++v&&f===t){d[e]=[L,h,v];break}}else if(g&&(v=h=(u=(d=(c=(f=t)[M]||(f[M]={}))[f.uniqueID]||(c[f.uniqueID]={}))[e]||[])[0]===L&&u[1]),!1===v)for(;(f=++h&&f&&f[p]||(v=h=0)||m.pop())&&((s?f.nodeName.toLowerCase()!==y:1!==f.nodeType)||!++v||(g&&((d=(c=f[M]||(f[M]={}))[f.uniqueID]||(c[f.uniqueID]={}))[e]=[L,v]),f!==t)););return(v-=a)===r||v%r==0&&v/r>=0}}},PSEUDO:function(e,t){var n,a=r.pseudos[e]||r.setFilters[e.toLowerCase()]||ie.error("unsupported pseudo: "+e);return a[M]?a(t):a.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){for(var r,i=a(e,t),o=i.length;o--;)e[r=P(e,i[o])]=!(n[r]=i[o])}):function(e){return a(e,0,n)}):a}},pseudos:{not:se(function(e){var t=[],n=[],r=s(e.replace(W,"$1"));return r[M]?se(function(e,t,n,a){for(var i,o=r(e,null,a,[]),s=e.length;s--;)(i=o[s])&&(e[s]=!(t[s]=i))}):function(e,a,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}}),has:se(function(e){return function(t){return ie(e,t).length>0}}),contains:se(function(e){return e=e.replace(X,ee),function(t){return(t.textContent||t.innerText||a(t)).indexOf(e)>-1}}),lang:se(function(e){return q.test(e||"")||ie.error("unsupported lang: "+e),e=e.replace(X,ee).toLowerCase(),function(t){var n;do{if(n=p?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===m},focus:function(e){return e===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:he(!1),disabled:he(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return $.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:me(function(){return[0]}),last:me(function(e,t){return[t-1]}),eq:me(function(e,t,n){return[n<0?n+t:n]}),even:me(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:me(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:me(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:me(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=ce(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=fe(t);function _e(){}function ye(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ge(e,t,n){var r=t.dir,a=t.next,i=a||r,o=n&&"parentNode"===i,s=k++;return t.first?function(t,n,a){for(;t=t[r];)if(1===t.nodeType||o)return e(t,n,a);return!1}:function(t,n,l){var u,d,c,f=[L,s];if(l){for(;t=t[r];)if((1===t.nodeType||o)&&e(t,n,l))return!0}else for(;t=t[r];)if(1===t.nodeType||o)if(d=(c=t[M]||(t[M]={}))[t.uniqueID]||(c[t.uniqueID]={}),a&&a===t.nodeName.toLowerCase())t=t[r]||t;else{if((u=d[i])&&u[0]===L&&u[1]===s)return f[2]=u[2];if(d[i]=f,f[2]=e(t,n,l))return!0}return!1}}function ve(e){return e.length>1?function(t,n,r){for(var a=e.length;a--;)if(!e[a](t,n,r))return!1;return!0}:e[0]}function Me(e,t,n,r,a){for(var i,o=[],s=0,l=e.length,u=null!=t;s<l;s++)(i=e[s])&&(n&&!n(i,r,a)||(o.push(i),u&&t.push(s)));return o}function be(e,t,n,r,a,i){return r&&!r[M]&&(r=be(r)),a&&!a[M]&&(a=be(a,i)),se(function(i,o,s,l){var u,d,c,f=[],h=[],m=o.length,p=i||function(e,t,n){for(var r=0,a=t.length;r<a;r++)ie(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),_=!e||!i&&t?p:Me(p,f,e,s,l),y=n?a||(i?e:m||r)?[]:o:_;if(n&&n(_,y,s,l),r)for(u=Me(y,h),r(u,[],s,l),d=u.length;d--;)(c=u[d])&&(y[h[d]]=!(_[h[d]]=c));if(i){if(a||e){if(a){for(u=[],d=y.length;d--;)(c=y[d])&&u.push(_[d]=c);a(null,y=[],u,l)}for(d=y.length;d--;)(c=y[d])&&(u=a?P(i,c):f[d])>-1&&(i[u]=!(o[u]=c))}}else y=Me(y===o?y.splice(m,y.length):y),a?a(null,o,y,l):j.apply(o,y)})}function Le(e){for(var t,n,a,i=e.length,o=r.relative[e[0].type],s=o||r.relative[" "],l=o?1:0,d=ge(function(e){return e===t},s,!0),c=ge(function(e){return P(t,e)>-1},s,!0),f=[function(e,n,r){var a=!o&&(r||n!==u)||((t=n).nodeType?d(e,n,r):c(e,n,r));return t=null,a}];l<i;l++)if(n=r.relative[e[l].type])f=[ge(ve(f),n)];else{if((n=r.filter[e[l].type].apply(null,e[l].matches))[M]){for(a=++l;a<i&&!r.relative[e[a].type];a++);return be(l>1&&ve(f),l>1&&ye(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(W,"$1"),n,l<a&&Le(e.slice(l,a)),a<i&&Le(e=e.slice(a)),a<i&&ye(e))}f.push(n)}return ve(f)}return _e.prototype=r.filters=r.pseudos,r.setFilters=new _e,o=ie.tokenize=function(e,t){var n,a,i,o,s,l,u,d=w[e+" "];if(d)return t?0:d.slice(0);for(s=e,l=[],u=r.preFilter;s;){for(o in n&&!(a=z.exec(s))||(a&&(s=s.slice(a[0].length)||s),l.push(i=[])),n=!1,(a=B.exec(s))&&(n=a.shift(),i.push({value:n,type:a[0].replace(W," ")}),s=s.slice(n.length)),r.filter)!(a=J[o].exec(s))||u[o]&&!(a=u[o](a))||(n=a.shift(),i.push({value:n,type:o,matches:a}),s=s.slice(n.length));if(!n)break}return t?s.length:s?ie.error(e):w(e,l).slice(0)},s=ie.compile=function(e,t){var n,a=[],i=[],s=Y[e+" "];if(!s){for(t||(t=o(e)),n=t.length;n--;)(s=Le(t[n]))[M]?a.push(s):i.push(s);(s=Y(e,function(e,t){var n=t.length>0,a=e.length>0,i=function(i,o,s,l,d){var c,m,_,y=0,g="0",v=i&&[],M=[],b=u,k=i||a&&r.find.TAG("*",d),x=L+=null==b?1:Math.random()||.1,w=k.length;for(d&&(u=o===h||o||d);g!==w&&null!=(c=k[g]);g++){if(a&&c){for(m=0,o||c.ownerDocument===h||(f(c),s=!p);_=e[m++];)if(_(c,o||h,s)){l.push(c);break}d&&(L=x)}n&&((c=!_&&c)&&y--,i&&v.push(c))}if(y+=g,n&&g!==y){for(m=0;_=t[m++];)_(v,M,o,s);if(i){if(y>0)for(;g--;)v[g]||M[g]||(M[g]=C.call(l));M=Me(M)}j.apply(l,M),d&&!i&&M.length>0&&y+t.length>1&&ie.uniqueSort(l)}return d&&(L=x,u=b),v};return n?se(i):i}(i,a))).selector=e}return s},l=ie.select=function(e,t,n,a){var i,l,u,d,c,f="function"==typeof e&&e,h=!a&&o(e=f.selector||e);if(n=n||[],1===h.length){if((l=h[0]=h[0].slice(0)).length>2&&"ID"===(u=l[0]).type&&9===t.nodeType&&p&&r.relative[l[1].type]){if(!(t=(r.find.ID(u.matches[0].replace(X,ee),t)||[])[0]))return n;f&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(i=J.needsContext.test(e)?0:l.length;i--&&(u=l[i],!r.relative[d=u.type]);)if((c=r.find[d])&&(a=c(u.matches[0].replace(X,ee),Z.test(l[0].type)&&pe(t.parentNode)||t))){if(l.splice(i,1),!(e=a.length&&ye(l)))return j.apply(n,a),n;break}}return(f||s(e,h))(a,t,!p,n,!t||Z.test(e)&&pe(t.parentNode)||t),n},n.sortStable=M.split("").sort(T).join("")===M,n.detectDuplicates=!!c,f(),n.sortDetached=le(function(e){return 1&e.compareDocumentPosition(h.createElement("fieldset"))}),le(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ue("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&le(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ue("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),le(function(e){return null==e.getAttribute("disabled")})||ue(H,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),ie}(n);k.find=Y,k.expr=Y.selectors,k.expr[":"]=k.expr.pseudos,k.uniqueSort=k.unique=Y.uniqueSort,k.text=Y.getText,k.isXMLDoc=Y.isXML,k.contains=Y.contains,k.escapeSelector=Y.escape;var T=function(e,t,n){for(var r=[],a=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(a&&k(e).is(n))break;r.push(e)}return r},D=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},S=k.expr.match.needsContext;function C(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var A=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function j(e,t,n){return g(t)?k.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?k.grep(e,function(e){return e===t!==n}):"string"!=typeof t?k.grep(e,function(e){return c.call(t,e)>-1!==n}):k.filter(t,e,n)}k.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?k.find.matchesSelector(r,e)?[r]:[]:k.find.matches(e,k.grep(t,function(e){return 1===e.nodeType}))},k.fn.extend({find:function(e){var t,n,r=this.length,a=this;if("string"!=typeof e)return this.pushStack(k(e).filter(function(){for(t=0;t<r;t++)if(k.contains(a[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)k.find(e,a[t],n);return r>1?k.uniqueSort(n):n},filter:function(e){return this.pushStack(j(this,e||[],!1))},not:function(e){return this.pushStack(j(this,e||[],!0))},is:function(e){return!!j(this,"string"==typeof e&&S.test(e)?k(e):e||[],!1).length}});var E,P=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(k.fn.init=function(e,t,n){var r,a;if(!e)return this;if(n=n||E,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:P.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof k?t[0]:t,k.merge(this,k.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:o,!0)),A.test(r[1])&&k.isPlainObject(t))for(r in t)g(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(a=o.getElementById(r[2]))&&(this[0]=a,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(k):k.makeArray(e,this)}).prototype=k.fn,E=k(o);var H=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function F(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}k.fn.extend({has:function(e){var t=k(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(k.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,a=this.length,i=[],o="string"!=typeof e&&k(e);if(!S.test(e))for(;r<a;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(o?o.index(n)>-1:1===n.nodeType&&k.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?k.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?c.call(k(e),this[0]):c.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(k.uniqueSort(k.merge(this.get(),k(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),k.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return T(e,"parentNode")},parentsUntil:function(e,t,n){return T(e,"parentNode",n)},next:function(e){return F(e,"nextSibling")},prev:function(e){return F(e,"previousSibling")},nextAll:function(e){return T(e,"nextSibling")},prevAll:function(e){return T(e,"previousSibling")},nextUntil:function(e,t,n){return T(e,"nextSibling",n)},prevUntil:function(e,t,n){return T(e,"previousSibling",n)},siblings:function(e){return D((e.parentNode||{}).firstChild,e)},children:function(e){return D(e.firstChild)},contents:function(e){return C(e,"iframe")?e.contentDocument:(C(e,"template")&&(e=e.content||e),k.merge([],e.childNodes))}},function(e,t){k.fn[e]=function(n,r){var a=k.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(a=k.filter(r,a)),this.length>1&&(O[e]||k.uniqueSort(a),H.test(e)&&a.reverse()),this.pushStack(a)}});var R=/[^\x20\t\r\n\f]+/g;function N(e){return e}function I(e){throw e}function W(e,t,n,r){var a;try{e&&g(a=e.promise)?a.call(e).done(t).fail(n):e&&g(a=e.then)?a.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}k.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return k.each(e.match(R)||[],function(e,n){t[n]=!0}),t}(e):k.extend({},e);var t,n,r,a,i=[],o=[],s=-1,l=function(){for(a=a||e.once,r=t=!0;o.length;s=-1)for(n=o.shift();++s<i.length;)!1===i[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=i.length,n=!1);e.memory||(n=!1),t=!1,a&&(i=n?[]:"")},u={add:function(){return i&&(n&&!t&&(s=i.length-1,o.push(n)),function t(n){k.each(n,function(n,r){g(r)?e.unique&&u.has(r)||i.push(r):r&&r.length&&"string"!==L(r)&&t(r)})}(arguments),n&&!t&&l()),this},remove:function(){return k.each(arguments,function(e,t){for(var n;(n=k.inArray(t,i,n))>-1;)i.splice(n,1),n<=s&&s--}),this},has:function(e){return e?k.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return a=o=[],i=n="",this},disabled:function(){return!i},lock:function(){return a=o=[],n||t||(i=n=""),this},locked:function(){return!!a},fireWith:function(e,n){return a||(n=[e,(n=n||[]).slice?n.slice():n],o.push(n),t||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},k.extend({Deferred:function(e){var t=[["notify","progress",k.Callbacks("memory"),k.Callbacks("memory"),2],["resolve","done",k.Callbacks("once memory"),k.Callbacks("once memory"),0,"resolved"],["reject","fail",k.Callbacks("once memory"),k.Callbacks("once memory"),1,"rejected"]],r="pending",a={state:function(){return r},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var e=arguments;return k.Deferred(function(n){k.each(t,function(t,r){var a=g(e[r[4]])&&e[r[4]];i[r[1]](function(){var e=a&&a.apply(this,arguments);e&&g(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,a?[e]:arguments)})}),e=null}).promise()},then:function(e,r,a){var i=0;function o(e,t,r,a){return function(){var s=this,l=arguments,u=function(){var n,u;if(!(e<i)){if((n=r.apply(s,l))===t.promise())throw new TypeError("Thenable self-resolution");u=n&&("object"==typeof n||"function"==typeof n)&&n.then,g(u)?a?u.call(n,o(i,t,N,a),o(i,t,I,a)):(i++,u.call(n,o(i,t,N,a),o(i,t,I,a),o(i,t,N,t.notifyWith))):(r!==N&&(s=void 0,l=[n]),(a||t.resolveWith)(s,l))}},d=a?u:function(){try{u()}catch(n){k.Deferred.exceptionHook&&k.Deferred.exceptionHook(n,d.stackTrace),e+1>=i&&(r!==I&&(s=void 0,l=[n]),t.rejectWith(s,l))}};e?d():(k.Deferred.getStackHook&&(d.stackTrace=k.Deferred.getStackHook()),n.setTimeout(d))}}return k.Deferred(function(n){t[0][3].add(o(0,n,g(a)?a:N,n.notifyWith)),t[1][3].add(o(0,n,g(e)?e:N)),t[2][3].add(o(0,n,g(r)?r:I))}).promise()},promise:function(e){return null!=e?k.extend(e,a):a}},i={};return k.each(t,function(e,n){var o=n[2],s=n[5];a[n[1]]=o.add,s&&o.add(function(){r=s},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),o.add(n[3].fire),i[n[0]]=function(){return i[n[0]+"With"](this===i?void 0:this,arguments),this},i[n[0]+"With"]=o.fireWith}),a.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,r=Array(n),a=l.call(arguments),i=k.Deferred(),o=function(e){return function(n){r[e]=this,a[e]=arguments.length>1?l.call(arguments):n,--t||i.resolveWith(r,a)}};if(t<=1&&(W(e,i.done(o(n)).resolve,i.reject,!t),"pending"===i.state()||g(a[n]&&a[n].then)))return i.then();for(;n--;)W(a[n],o(n),i.reject);return i.promise()}});var z=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;k.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&z.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},k.readyException=function(e){n.setTimeout(function(){throw e})};var B=k.Deferred();function U(){o.removeEventListener("DOMContentLoaded",U),n.removeEventListener("load",U),k.ready()}k.fn.ready=function(e){return B.then(e).catch(function(e){k.readyException(e)}),this},k.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--k.readyWait:k.isReady)||(k.isReady=!0,!0!==e&&--k.readyWait>0||B.resolveWith(o,[k]))}}),k.ready.then=B.then,"complete"===o.readyState||"loading"!==o.readyState&&!o.documentElement.doScroll?n.setTimeout(k.ready):(o.addEventListener("DOMContentLoaded",U),n.addEventListener("load",U));var V=function(e,t,n,r,a,i,o){var s=0,l=e.length,u=null==n;if("object"===L(n))for(s in a=!0,n)V(e,t,s,n[s],!0,i,o);else if(void 0!==r&&(a=!0,g(r)||(o=!0),u&&(o?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(k(e),n)})),t))for(;s<l;s++)t(e[s],n,o?r:r.call(e[s],s,t(e[s],n)));return a?e:u?t.call(e):l?t(e[0],n):i},q=/^-ms-/,J=/-([a-z])/g;function G(e,t){return t.toUpperCase()}function $(e){return e.replace(q,"ms-").replace(J,G)}var K=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=k.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},K(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,a=this.cache(e);if("string"==typeof t)a[$(t)]=n;else for(r in t)a[$(r)]=t[r];return a},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][$(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map($):(t=$(t))in r?[t]:t.match(R)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||k.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!k.isEmptyObject(t)}};var Z=new Q,X=new Q,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}X.set(e,t,n)}else n=void 0;return n}k.extend({hasData:function(e){return X.hasData(e)||Z.hasData(e)},data:function(e,t,n){return X.access(e,t,n)},removeData:function(e,t){X.remove(e,t)},_data:function(e,t,n){return Z.access(e,t,n)},_removeData:function(e,t){Z.remove(e,t)}}),k.fn.extend({data:function(e,t){var n,r,a,i=this[0],o=i&&i.attributes;if(void 0===e){if(this.length&&(a=X.get(i),1===i.nodeType&&!Z.get(i,"hasDataAttrs"))){for(n=o.length;n--;)o[n]&&0===(r=o[n].name).indexOf("data-")&&(r=$(r.slice(5)),ne(i,r,a[r]));Z.set(i,"hasDataAttrs",!0)}return a}return"object"==typeof e?this.each(function(){X.set(this,e)}):V(this,function(t){var n;if(i&&void 0===t)return void 0!==(n=X.get(i,e))?n:void 0!==(n=ne(i,e))?n:void 0;this.each(function(){X.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){X.remove(this,e)})}}),k.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Z.get(e,t),n&&(!r||Array.isArray(n)?r=Z.access(e,t,k.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=k.queue(e,t),r=n.length,a=n.shift(),i=k._queueHooks(e,t);"inprogress"===a&&(a=n.shift(),r--),a&&("fx"===t&&n.unshift("inprogress"),delete i.stop,a.call(e,function(){k.dequeue(e,t)},i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Z.get(e,n)||Z.access(e,n,{empty:k.Callbacks("once memory").add(function(){Z.remove(e,[t+"queue",n])})})}}),k.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?k.queue(this[0],e):void 0===t?this:this.each(function(){var n=k.queue(this,e,t);k._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&k.dequeue(this,e)})},dequeue:function(e){return this.each(function(){k.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,a=k.Deferred(),i=this,o=this.length,s=function(){--r||a.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(n=Z.get(i[o],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),a.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ae=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],oe=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&k.contains(e.ownerDocument,e)&&"none"===k.css(e,"display")},se=function(e,t,n,r){var a,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in a=n.apply(e,r||[]),t)e.style[i]=o[i];return a};function le(e,t,n,r){var a,i,o=20,s=r?function(){return r.cur()}:function(){return k.css(e,t,"")},l=s(),u=n&&n[3]||(k.cssNumber[t]?"":"px"),d=(k.cssNumber[t]||"px"!==u&&+l)&&ae.exec(k.css(e,t));if(d&&d[3]!==u){for(l/=2,u=u||d[3],d=+l||1;o--;)k.style(e,t,d+u),(1-i)*(1-(i=s()/l||.5))<=0&&(o=0),d/=i;d*=2,k.style(e,t,d+u),n=n||[]}return n&&(d=+d||+l||0,a=n[1]?d+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=d,r.end=a)),a}var ue={};function de(e){var t,n=e.ownerDocument,r=e.nodeName,a=ue[r];return a||(t=n.body.appendChild(n.createElement(r)),a=k.css(t,"display"),t.parentNode.removeChild(t),"none"===a&&(a="block"),ue[r]=a,a)}function ce(e,t){for(var n,r,a=[],i=0,o=e.length;i<o;i++)(r=e[i]).style&&(n=r.style.display,t?("none"===n&&(a[i]=Z.get(r,"display")||null,a[i]||(r.style.display="")),""===r.style.display&&oe(r)&&(a[i]=de(r))):"none"!==n&&(a[i]="none",Z.set(r,"display",n)));for(i=0;i<o;i++)null!=a[i]&&(e[i].style.display=a[i]);return e}k.fn.extend({show:function(){return ce(this,!0)},hide:function(){return ce(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){oe(this)?k(this).show():k(this).hide()})}});var fe=/^(?:checkbox|radio)$/i,he=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,me=/^$|^module$|\/(?:java|ecma)script/i,pe={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function _e(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&C(e,t)?k.merge([e],n):n}function ye(e,t){for(var n=0,r=e.length;n<r;n++)Z.set(e[n],"globalEval",!t||Z.get(t[n],"globalEval"))}pe.optgroup=pe.option,pe.tbody=pe.tfoot=pe.colgroup=pe.caption=pe.thead,pe.th=pe.td;var ge=/<|&#?\w+;/;function ve(e,t,n,r,a){for(var i,o,s,l,u,d,c=t.createDocumentFragment(),f=[],h=0,m=e.length;h<m;h++)if((i=e[h])||0===i)if("object"===L(i))k.merge(f,i.nodeType?[i]:i);else if(ge.test(i)){for(o=o||c.appendChild(t.createElement("div")),s=(he.exec(i)||["",""])[1].toLowerCase(),l=pe[s]||pe._default,o.innerHTML=l[1]+k.htmlPrefilter(i)+l[2],d=l[0];d--;)o=o.lastChild;k.merge(f,o.childNodes),(o=c.firstChild).textContent=""}else f.push(t.createTextNode(i));for(c.textContent="",h=0;i=f[h++];)if(r&&k.inArray(i,r)>-1)a&&a.push(i);else if(u=k.contains(i.ownerDocument,i),o=_e(c.appendChild(i),"script"),u&&ye(o),n)for(d=0;i=o[d++];)me.test(i.type||"")&&n.push(i);return c}!function(){var e=o.createDocumentFragment().appendChild(o.createElement("div")),t=o.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),y.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Me=o.documentElement,be=/^key/,Le=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ke=/^([^.]*)(?:\.(.+)|)/;function xe(){return!0}function we(){return!1}function Ye(){try{return o.activeElement}catch(e){}}function Te(e,t,n,r,a,i){var o,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Te(e,s,n,r,t[s],i);return e}if(null==r&&null==a?(a=n,r=n=void 0):null==a&&("string"==typeof n?(a=r,r=void 0):(a=r,r=n,n=void 0)),!1===a)a=we;else if(!a)return e;return 1===i&&(o=a,(a=function(e){return k().off(e),o.apply(this,arguments)}).guid=o.guid||(o.guid=k.guid++)),e.each(function(){k.event.add(this,t,a,r,n)})}k.event={global:{},add:function(e,t,n,r,a){var i,o,s,l,u,d,c,f,h,m,p,_=Z.get(e);if(_)for(n.handler&&(n=(i=n).handler,a=i.selector),a&&k.find.matchesSelector(Me,a),n.guid||(n.guid=k.guid++),(l=_.events)||(l=_.events={}),(o=_.handle)||(o=_.handle=function(t){return void 0!==k&&k.event.triggered!==t.type?k.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(R)||[""]).length;u--;)h=p=(s=ke.exec(t[u])||[])[1],m=(s[2]||"").split(".").sort(),h&&(c=k.event.special[h]||{},h=(a?c.delegateType:c.bindType)||h,c=k.event.special[h]||{},d=k.extend({type:h,origType:p,data:r,handler:n,guid:n.guid,selector:a,needsContext:a&&k.expr.match.needsContext.test(a),namespace:m.join(".")},i),(f=l[h])||((f=l[h]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(e,r,m,o)||e.addEventListener&&e.addEventListener(h,o)),c.add&&(c.add.call(e,d),d.handler.guid||(d.handler.guid=n.guid)),a?f.splice(f.delegateCount++,0,d):f.push(d),k.event.global[h]=!0)},remove:function(e,t,n,r,a){var i,o,s,l,u,d,c,f,h,m,p,_=Z.hasData(e)&&Z.get(e);if(_&&(l=_.events)){for(u=(t=(t||"").match(R)||[""]).length;u--;)if(h=p=(s=ke.exec(t[u])||[])[1],m=(s[2]||"").split(".").sort(),h){for(c=k.event.special[h]||{},f=l[h=(r?c.delegateType:c.bindType)||h]||[],s=s[2]&&new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=i=f.length;i--;)d=f[i],!a&&p!==d.origType||n&&n.guid!==d.guid||s&&!s.test(d.namespace)||r&&r!==d.selector&&("**"!==r||!d.selector)||(f.splice(i,1),d.selector&&f.delegateCount--,c.remove&&c.remove.call(e,d));o&&!f.length&&(c.teardown&&!1!==c.teardown.call(e,m,_.handle)||k.removeEvent(e,h,_.handle),delete l[h])}else for(h in l)k.event.remove(e,h+t[u],n,r,!0);k.isEmptyObject(l)&&Z.remove(e,"handle events")}},dispatch:function(e){var t,n,r,a,i,o,s=k.event.fix(e),l=new Array(arguments.length),u=(Z.get(this,"events")||{})[s.type]||[],d=k.event.special[s.type]||{};for(l[0]=s,t=1;t<arguments.length;t++)l[t]=arguments[t];if(s.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,s)){for(o=k.event.handlers.call(this,s,u),t=0;(a=o[t++])&&!s.isPropagationStopped();)for(s.currentTarget=a.elem,n=0;(i=a.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(i.namespace)||(s.handleObj=i,s.data=i.data,void 0!==(r=((k.event.special[i.origType]||{}).handle||i.handler).apply(a.elem,l))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,a,i,o,s=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(i=[],o={},n=0;n<l;n++)void 0===o[a=(r=t[n]).selector+" "]&&(o[a]=r.needsContext?k(a,this).index(u)>-1:k.find(a,this,null,[u]).length),o[a]&&i.push(r);i.length&&s.push({elem:u,handlers:i})}return u=this,l<t.length&&s.push({elem:u,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(k.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[k.expando]?e:new k.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Ye()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Ye()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&C(this,"input"))return this.click(),!1},_default:function(e){return C(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},k.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},k.Event=function(e,t){if(!(this instanceof k.Event))return new k.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?xe:we,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&k.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[k.expando]=!0},k.Event.prototype={constructor:k.Event,isDefaultPrevented:we,isPropagationStopped:we,isImmediatePropagationStopped:we,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=xe,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=xe,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=xe,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},k.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&be.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Le.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},k.event.addProp),k.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){k.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=e.relatedTarget,a=e.handleObj;return r&&(r===this||k.contains(this,r))||(e.type=a.origType,n=a.handler.apply(this,arguments),e.type=t),n}}}),k.fn.extend({on:function(e,t,n,r){return Te(this,e,t,n,r)},one:function(e,t,n,r){return Te(this,e,t,n,r,1)},off:function(e,t,n){var r,a;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,k(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(a in e)this.off(a,t,e[a]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=we),this.each(function(){k.event.remove(this,e,n,t)})}});var De=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Se=/<script|<style|<link/i,Ce=/checked\s*(?:[^=]|=\s*.checked.)/i,Ae=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function je(e,t){return C(e,"table")&&C(11!==t.nodeType?t:t.firstChild,"tr")&&k(e).children("tbody")[0]||e}function Ee(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Pe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function He(e,t){var n,r,a,i,o,s,l,u;if(1===t.nodeType){if(Z.hasData(e)&&(i=Z.access(e),o=Z.set(t,i),u=i.events))for(a in delete o.handle,o.events={},u)for(n=0,r=u[a].length;n<r;n++)k.event.add(t,a,u[a][n]);X.hasData(e)&&(s=X.access(e),l=k.extend({},s),X.set(t,l))}}function Oe(e,t){var n=t.nodeName.toLowerCase();"input"===n&&fe.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Fe(e,t,n,r){t=u.apply([],t);var a,i,o,s,l,d,c=0,f=e.length,h=f-1,m=t[0],p=g(m);if(p||f>1&&"string"==typeof m&&!y.checkClone&&Ce.test(m))return e.each(function(a){var i=e.eq(a);p&&(t[0]=m.call(this,a,i.html())),Fe(i,t,n,r)});if(f&&(i=(a=ve(t,e[0].ownerDocument,!1,e,r)).firstChild,1===a.childNodes.length&&(a=i),i||r)){for(s=(o=k.map(_e(a,"script"),Ee)).length;c<f;c++)l=a,c!==h&&(l=k.clone(l,!0,!0),s&&k.merge(o,_e(l,"script"))),n.call(e[c],l,c);if(s)for(d=o[o.length-1].ownerDocument,k.map(o,Pe),c=0;c<s;c++)l=o[c],me.test(l.type||"")&&!Z.access(l,"globalEval")&&k.contains(d,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?k._evalUrl&&k._evalUrl(l.src):b(l.textContent.replace(Ae,""),d,l))}return e}function Re(e,t,n){for(var r,a=t?k.filter(t,e):e,i=0;null!=(r=a[i]);i++)n||1!==r.nodeType||k.cleanData(_e(r)),r.parentNode&&(n&&k.contains(r.ownerDocument,r)&&ye(_e(r,"script")),r.parentNode.removeChild(r));return e}k.extend({htmlPrefilter:function(e){return e.replace(De,"<$1></$2>")},clone:function(e,t,n){var r,a,i,o,s=e.cloneNode(!0),l=k.contains(e.ownerDocument,e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||k.isXMLDoc(e)))for(o=_e(s),r=0,a=(i=_e(e)).length;r<a;r++)Oe(i[r],o[r]);if(t)if(n)for(i=i||_e(e),o=o||_e(s),r=0,a=i.length;r<a;r++)He(i[r],o[r]);else He(e,s);return(o=_e(s,"script")).length>0&&ye(o,!l&&_e(e,"script")),s},cleanData:function(e){for(var t,n,r,a=k.event.special,i=0;void 0!==(n=e[i]);i++)if(K(n)){if(t=n[Z.expando]){if(t.events)for(r in t.events)a[r]?k.event.remove(n,r):k.removeEvent(n,r,t.handle);n[Z.expando]=void 0}n[X.expando]&&(n[X.expando]=void 0)}}}),k.fn.extend({detach:function(e){return Re(this,e,!0)},remove:function(e){return Re(this,e)},text:function(e){return V(this,function(e){return void 0===e?k.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Fe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||je(this,e).appendChild(e)})},prepend:function(){return Fe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=je(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Fe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Fe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(k.cleanData(_e(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return k.clone(this,e,t)})},html:function(e){return V(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Se.test(e)&&!pe[(he.exec(e)||["",""])[1].toLowerCase()]){e=k.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(k.cleanData(_e(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Fe(this,arguments,function(t){var n=this.parentNode;k.inArray(this,e)<0&&(k.cleanData(_e(this)),n&&n.replaceChild(t,this))},e)}}),k.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){k.fn[e]=function(e){for(var n,r=[],a=k(e),i=a.length-1,o=0;o<=i;o++)n=o===i?this:this.clone(!0),k(a[o])[t](n),d.apply(r,n.get());return this.pushStack(r)}});var Ne=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),Ie=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},We=new RegExp(ie.join("|"),"i");function ze(e,t,n){var r,a,i,o,s=e.style;return(n=n||Ie(e))&&(""!==(o=n.getPropertyValue(t)||n[t])||k.contains(e.ownerDocument,e)||(o=k.style(e,t)),!y.pixelBoxStyles()&&Ne.test(o)&&We.test(t)&&(r=s.width,a=s.minWidth,i=s.maxWidth,s.minWidth=s.maxWidth=s.width=o,o=n.width,s.width=r,s.minWidth=a,s.maxWidth=i)),void 0!==o?o+"":o}function Be(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(d){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",d.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",Me.appendChild(u).appendChild(d);var e=n.getComputedStyle(d);r="1%"!==e.top,l=12===t(e.marginLeft),d.style.right="60%",s=36===t(e.right),a=36===t(e.width),d.style.position="absolute",i=36===d.offsetWidth||"absolute",Me.removeChild(u),d=null}}function t(e){return Math.round(parseFloat(e))}var r,a,i,s,l,u=o.createElement("div"),d=o.createElement("div");d.style&&(d.style.backgroundClip="content-box",d.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===d.style.backgroundClip,k.extend(y,{boxSizingReliable:function(){return e(),a},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),i}}))}();var Ue=/^(none|table(?!-c[ea]).+)/,Ve=/^--/,qe={position:"absolute",visibility:"hidden",display:"block"},Je={letterSpacing:"0",fontWeight:"400"},Ge=["Webkit","Moz","ms"],$e=o.createElement("div").style;function Ke(e){var t=k.cssProps[e];return t||(t=k.cssProps[e]=function(e){if(e in $e)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Ge.length;n--;)if((e=Ge[n]+t)in $e)return e}(e)||e),t}function Qe(e,t,n){var r=ae.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Ze(e,t,n,r,a,i){var o="width"===t?1:0,s=0,l=0;if(n===(r?"border":"content"))return 0;for(;o<4;o+=2)"margin"===n&&(l+=k.css(e,n+ie[o],!0,a)),r?("content"===n&&(l-=k.css(e,"padding"+ie[o],!0,a)),"margin"!==n&&(l-=k.css(e,"border"+ie[o]+"Width",!0,a))):(l+=k.css(e,"padding"+ie[o],!0,a),"padding"!==n?l+=k.css(e,"border"+ie[o]+"Width",!0,a):s+=k.css(e,"border"+ie[o]+"Width",!0,a));return!r&&i>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-l-s-.5))),l}function Xe(e,t,n){var r=Ie(e),a=ze(e,t,r),i="border-box"===k.css(e,"boxSizing",!1,r),o=i;if(Ne.test(a)){if(!n)return a;a="auto"}return o=o&&(y.boxSizingReliable()||a===e.style[t]),("auto"===a||!parseFloat(a)&&"inline"===k.css(e,"display",!1,r))&&(a=e["offset"+t[0].toUpperCase()+t.slice(1)],o=!0),(a=parseFloat(a)||0)+Ze(e,t,n||(i?"border":"content"),o,r,a)+"px"}function et(e,t,n,r,a){return new et.prototype.init(e,t,n,r,a)}k.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=ze(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var a,i,o,s=$(t),l=Ve.test(t),u=e.style;if(l||(t=Ke(s)),o=k.cssHooks[t]||k.cssHooks[s],void 0===n)return o&&"get"in o&&void 0!==(a=o.get(e,!1,r))?a:u[t];"string"===(i=typeof n)&&(a=ae.exec(n))&&a[1]&&(n=le(e,t,a),i="number"),null!=n&&n==n&&("number"===i&&(n+=a&&a[3]||(k.cssNumber[s]?"":"px")),y.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),o&&"set"in o&&void 0===(n=o.set(e,n,r))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var a,i,o,s=$(t);return Ve.test(t)||(t=Ke(s)),(o=k.cssHooks[t]||k.cssHooks[s])&&"get"in o&&(a=o.get(e,!0,n)),void 0===a&&(a=ze(e,t,r)),"normal"===a&&t in Je&&(a=Je[t]),""===n||n?(i=parseFloat(a),!0===n||isFinite(i)?i||0:a):a}}),k.each(["height","width"],function(e,t){k.cssHooks[t]={get:function(e,n,r){if(n)return!Ue.test(k.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?Xe(e,t,r):se(e,qe,function(){return Xe(e,t,r)})},set:function(e,n,r){var a,i=Ie(e),o="border-box"===k.css(e,"boxSizing",!1,i),s=r&&Ze(e,t,r,o,i);return o&&y.scrollboxSize()===i.position&&(s-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-Ze(e,t,"border",!1,i)-.5)),s&&(a=ae.exec(n))&&"px"!==(a[3]||"px")&&(e.style[t]=n,n=k.css(e,t)),Qe(0,n,s)}}}),k.cssHooks.marginLeft=Be(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(ze(e,"marginLeft"))||e.getBoundingClientRect().left-se(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),k.each({margin:"",padding:"",border:"Width"},function(e,t){k.cssHooks[e+t]={expand:function(n){for(var r=0,a={},i="string"==typeof n?n.split(" "):[n];r<4;r++)a[e+ie[r]+t]=i[r]||i[r-2]||i[0];return a}},"margin"!==e&&(k.cssHooks[e+t].set=Qe)}),k.fn.extend({css:function(e,t){return V(this,function(e,t,n){var r,a,i={},o=0;if(Array.isArray(t)){for(r=Ie(e),a=t.length;o<a;o++)i[t[o]]=k.css(e,t[o],!1,r);return i}return void 0!==n?k.style(e,t,n):k.css(e,t)},e,t,arguments.length>1)}}),k.Tween=et,et.prototype={constructor:et,init:function(e,t,n,r,a,i){this.elem=e,this.prop=n,this.easing=a||k.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(k.cssNumber[n]?"":"px")},cur:function(){var e=et.propHooks[this.prop];return e&&e.get?e.get(this):et.propHooks._default.get(this)},run:function(e){var t,n=et.propHooks[this.prop];return this.options.duration?this.pos=t=k.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):et.propHooks._default.set(this),this}},et.prototype.init.prototype=et.prototype,et.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=k.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){k.fx.step[e.prop]?k.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[k.cssProps[e.prop]]&&!k.cssHooks[e.prop]?e.elem[e.prop]=e.now:k.style(e.elem,e.prop,e.now+e.unit)}}},et.propHooks.scrollTop=et.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},k.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},k.fx=et.prototype.init,k.fx.step={};var tt,nt,rt=/^(?:toggle|show|hide)$/,at=/queueHooks$/;function it(){nt&&(!1===o.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(it):n.setTimeout(it,k.fx.interval),k.fx.tick())}function ot(){return n.setTimeout(function(){tt=void 0}),tt=Date.now()}function st(e,t){var n,r=0,a={height:e};for(t=t?1:0;r<4;r+=2-t)a["margin"+(n=ie[r])]=a["padding"+n]=e;return t&&(a.opacity=a.width=e),a}function lt(e,t,n){for(var r,a=(ut.tweeners[t]||[]).concat(ut.tweeners["*"]),i=0,o=a.length;i<o;i++)if(r=a[i].call(n,t,e))return r}function ut(e,t,n){var r,a,i=0,o=ut.prefilters.length,s=k.Deferred().always(function(){delete l.elem}),l=function(){if(a)return!1;for(var t=tt||ot(),n=Math.max(0,u.startTime+u.duration-t),r=1-(n/u.duration||0),i=0,o=u.tweens.length;i<o;i++)u.tweens[i].run(r);return s.notifyWith(e,[u,r,n]),r<1&&o?n:(o||s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u]),!1)},u=s.promise({elem:e,props:k.extend({},t),opts:k.extend(!0,{specialEasing:{},easing:k.easing._default},n),originalProperties:t,originalOptions:n,startTime:tt||ot(),duration:n.duration,tweens:[],createTween:function(t,n){var r=k.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(a)return this;for(a=!0;n<r;n++)u.tweens[n].run(1);return t?(s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u,t])):s.rejectWith(e,[u,t]),this}}),d=u.props;for(!function(e,t){var n,r,a,i,o;for(n in e)if(a=t[r=$(n)],i=e[n],Array.isArray(i)&&(a=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(o=k.cssHooks[r])&&"expand"in o)for(n in i=o.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=a);else t[r]=a}(d,u.opts.specialEasing);i<o;i++)if(r=ut.prefilters[i].call(u,e,d,u.opts))return g(r.stop)&&(k._queueHooks(u.elem,u.opts.queue).stop=r.stop.bind(r)),r;return k.map(d,lt,u),g(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),k.fx.timer(k.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}k.Animation=k.extend(ut,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return le(n.elem,e,ae.exec(t),n),n}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match(R);for(var n,r=0,a=e.length;r<a;r++)n=e[r],ut.tweeners[n]=ut.tweeners[n]||[],ut.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,a,i,o,s,l,u,d,c="width"in t||"height"in t,f=this,h={},m=e.style,p=e.nodeType&&oe(e),_=Z.get(e,"fxshow");for(r in n.queue||(null==(o=k._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,s=o.empty.fire,o.empty.fire=function(){o.unqueued||s()}),o.unqueued++,f.always(function(){f.always(function(){o.unqueued--,k.queue(e,"fx").length||o.empty.fire()})})),t)if(a=t[r],rt.test(a)){if(delete t[r],i=i||"toggle"===a,a===(p?"hide":"show")){if("show"!==a||!_||void 0===_[r])continue;p=!0}h[r]=_&&_[r]||k.style(e,r)}if((l=!k.isEmptyObject(t))||!k.isEmptyObject(h))for(r in c&&1===e.nodeType&&(n.overflow=[m.overflow,m.overflowX,m.overflowY],null==(u=_&&_.display)&&(u=Z.get(e,"display")),"none"===(d=k.css(e,"display"))&&(u?d=u:(ce([e],!0),u=e.style.display||u,d=k.css(e,"display"),ce([e]))),("inline"===d||"inline-block"===d&&null!=u)&&"none"===k.css(e,"float")&&(l||(f.done(function(){m.display=u}),null==u&&(d=m.display,u="none"===d?"":d)),m.display="inline-block")),n.overflow&&(m.overflow="hidden",f.always(function(){m.overflow=n.overflow[0],m.overflowX=n.overflow[1],m.overflowY=n.overflow[2]})),l=!1,h)l||(_?"hidden"in _&&(p=_.hidden):_=Z.access(e,"fxshow",{display:u}),i&&(_.hidden=!p),p&&ce([e],!0),f.done(function(){for(r in p||ce([e]),Z.remove(e,"fxshow"),h)k.style(e,r,h[r])})),l=lt(p?_[r]:0,r,f),r in _||(_[r]=l.start,p&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?ut.prefilters.unshift(e):ut.prefilters.push(e)}}),k.speed=function(e,t,n){var r=e&&"object"==typeof e?k.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return k.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in k.fx.speeds?r.duration=k.fx.speeds[r.duration]:r.duration=k.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){g(r.old)&&r.old.call(this),r.queue&&k.dequeue(this,r.queue)},r},k.fn.extend({fadeTo:function(e,t,n,r){return this.filter(oe).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var a=k.isEmptyObject(e),i=k.speed(t,n,r),o=function(){var t=ut(this,k.extend({},e),i);(a||Z.get(this,"finish"))&&t.stop(!0)};return o.finish=o,a||!1===i.queue?this.each(o):this.queue(i.queue,o)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,a=null!=e&&e+"queueHooks",i=k.timers,o=Z.get(this);if(a)o[a]&&o[a].stop&&r(o[a]);else for(a in o)o[a]&&o[a].stop&&at.test(a)&&r(o[a]);for(a=i.length;a--;)i[a].elem!==this||null!=e&&i[a].queue!==e||(i[a].anim.stop(n),t=!1,i.splice(a,1));!t&&n||k.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Z.get(this),r=n[e+"queue"],a=n[e+"queueHooks"],i=k.timers,o=r?r.length:0;for(n.finish=!0,k.queue(this,e,[]),a&&a.stop&&a.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<o;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),k.each(["toggle","show","hide"],function(e,t){var n=k.fn[t];k.fn[t]=function(e,r,a){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(st(t,!0),e,r,a)}}),k.each({slideDown:st("show"),slideUp:st("hide"),slideToggle:st("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){k.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),k.timers=[],k.fx.tick=function(){var e,t=0,n=k.timers;for(tt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||k.fx.stop(),tt=void 0},k.fx.timer=function(e){k.timers.push(e),k.fx.start()},k.fx.interval=13,k.fx.start=function(){nt||(nt=!0,it())},k.fx.stop=function(){nt=null},k.fx.speeds={slow:600,fast:200,_default:400},k.fn.delay=function(e,t){return e=k.fx&&k.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,r){var a=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(a)}})},function(){var e=o.createElement("input"),t=o.createElement("select").appendChild(o.createElement("option"));e.type="checkbox",y.checkOn=""!==e.value,y.optSelected=t.selected,(e=o.createElement("input")).value="t",e.type="radio",y.radioValue="t"===e.value}();var dt,ct=k.expr.attrHandle;k.fn.extend({attr:function(e,t){return V(this,k.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){k.removeAttr(this,e)})}}),k.extend({attr:function(e,t,n){var r,a,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?k.prop(e,t,n):(1===i&&k.isXMLDoc(e)||(a=k.attrHooks[t.toLowerCase()]||(k.expr.match.bool.test(t)?dt:void 0)),void 0!==n?null===n?void k.removeAttr(e,t):a&&"set"in a&&void 0!==(r=a.set(e,n,t))?r:(e.setAttribute(t,n+""),n):a&&"get"in a&&null!==(r=a.get(e,t))?r:null==(r=k.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&C(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,a=t&&t.match(R);if(a&&1===e.nodeType)for(;n=a[r++];)e.removeAttribute(n)}}),dt={set:function(e,t,n){return!1===t?k.removeAttr(e,n):e.setAttribute(n,n),n}},k.each(k.expr.match.bool.source.match(/\w+/g),function(e,t){var n=ct[t]||k.find.attr;ct[t]=function(e,t,r){var a,i,o=t.toLowerCase();return r||(i=ct[o],ct[o]=a,a=null!=n(e,t,r)?o:null,ct[o]=i),a}});var ft=/^(?:input|select|textarea|button)$/i,ht=/^(?:a|area)$/i;function mt(e){return(e.match(R)||[]).join(" ")}function pt(e){return e.getAttribute&&e.getAttribute("class")||""}function _t(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(R)||[]}k.fn.extend({prop:function(e,t){return V(this,k.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[k.propFix[e]||e]})}}),k.extend({prop:function(e,t,n){var r,a,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&k.isXMLDoc(e)||(t=k.propFix[t]||t,a=k.propHooks[t]),void 0!==n?a&&"set"in a&&void 0!==(r=a.set(e,n,t))?r:e[t]=n:a&&"get"in a&&null!==(r=a.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=k.find.attr(e,"tabindex");return t?parseInt(t,10):ft.test(e.nodeName)||ht.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(k.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),k.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){k.propFix[this.toLowerCase()]=this}),k.fn.extend({addClass:function(e){var t,n,r,a,i,o,s,l=0;if(g(e))return this.each(function(t){k(this).addClass(e.call(this,t,pt(this)))});if((t=_t(e)).length)for(;n=this[l++];)if(a=pt(n),r=1===n.nodeType&&" "+mt(a)+" "){for(o=0;i=t[o++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");a!==(s=mt(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,a,i,o,s,l=0;if(g(e))return this.each(function(t){k(this).removeClass(e.call(this,t,pt(this)))});if(!arguments.length)return this.attr("class","");if((t=_t(e)).length)for(;n=this[l++];)if(a=pt(n),r=1===n.nodeType&&" "+mt(a)+" "){for(o=0;i=t[o++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");a!==(s=mt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):g(e)?this.each(function(n){k(this).toggleClass(e.call(this,n,pt(this),t),t)}):this.each(function(){var t,a,i,o;if(r)for(a=0,i=k(this),o=_t(e);t=o[a++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=pt(this))&&Z.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Z.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+mt(pt(n))+" ").indexOf(t)>-1)return!0;return!1}});var yt=/\r/g;k.fn.extend({val:function(e){var t,n,r,a=this[0];return arguments.length?(r=g(e),this.each(function(n){var a;1===this.nodeType&&(null==(a=r?e.call(this,n,k(this).val()):e)?a="":"number"==typeof a?a+="":Array.isArray(a)&&(a=k.map(a,function(e){return null==e?"":e+""})),(t=k.valHooks[this.type]||k.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,a,"value")||(this.value=a))})):a?(t=k.valHooks[a.type]||k.valHooks[a.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(a,"value"))?n:"string"==typeof(n=a.value)?n.replace(yt,""):null==n?"":n:void 0}}),k.extend({valHooks:{option:{get:function(e){var t=k.find.attr(e,"value");return null!=t?t:mt(k.text(e))}},select:{get:function(e){var t,n,r,a=e.options,i=e.selectedIndex,o="select-one"===e.type,s=o?null:[],l=o?i+1:a.length;for(r=i<0?l:o?i:0;r<l;r++)if(((n=a[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!C(n.parentNode,"optgroup"))){if(t=k(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,r,a=e.options,i=k.makeArray(t),o=a.length;o--;)((r=a[o]).selected=k.inArray(k.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),k.each(["radio","checkbox"],function(){k.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=k.inArray(k(e).val(),t)>-1}},y.checkOn||(k.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in n;var gt=/^(?:focusinfocus|focusoutblur)$/,vt=function(e){e.stopPropagation()};k.extend(k.event,{trigger:function(e,t,r,a){var i,s,l,u,d,c,f,h,p=[r||o],_=m.call(e,"type")?e.type:e,y=m.call(e,"namespace")?e.namespace.split("."):[];if(s=h=l=r=r||o,3!==r.nodeType&&8!==r.nodeType&&!gt.test(_+k.event.triggered)&&(_.indexOf(".")>-1&&(_=(y=_.split(".")).shift(),y.sort()),d=_.indexOf(":")<0&&"on"+_,(e=e[k.expando]?e:new k.Event(_,"object"==typeof e&&e)).isTrigger=a?2:3,e.namespace=y.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+y.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:k.makeArray(t,[e]),f=k.event.special[_]||{},a||!f.trigger||!1!==f.trigger.apply(r,t))){if(!a&&!f.noBubble&&!v(r)){for(u=f.delegateType||_,gt.test(u+_)||(s=s.parentNode);s;s=s.parentNode)p.push(s),l=s;l===(r.ownerDocument||o)&&p.push(l.defaultView||l.parentWindow||n)}for(i=0;(s=p[i++])&&!e.isPropagationStopped();)h=s,e.type=i>1?u:f.bindType||_,(c=(Z.get(s,"events")||{})[e.type]&&Z.get(s,"handle"))&&c.apply(s,t),(c=d&&s[d])&&c.apply&&K(s)&&(e.result=c.apply(s,t),!1===e.result&&e.preventDefault());return e.type=_,a||e.isDefaultPrevented()||f._default&&!1!==f._default.apply(p.pop(),t)||!K(r)||d&&g(r[_])&&!v(r)&&((l=r[d])&&(r[d]=null),k.event.triggered=_,e.isPropagationStopped()&&h.addEventListener(_,vt),r[_](),e.isPropagationStopped()&&h.removeEventListener(_,vt),k.event.triggered=void 0,l&&(r[d]=l)),e.result}},simulate:function(e,t,n){var r=k.extend(new k.Event,n,{type:e,isSimulated:!0});k.event.trigger(r,null,t)}}),k.fn.extend({trigger:function(e,t){return this.each(function(){k.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return k.event.trigger(e,t,n,!0)}}),y.focusin||k.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){k.event.simulate(t,e.target,k.event.fix(e))};k.event.special[t]={setup:function(){var r=this.ownerDocument||this,a=Z.access(r,t);a||r.addEventListener(e,n,!0),Z.access(r,t,(a||0)+1)},teardown:function(){var r=this.ownerDocument||this,a=Z.access(r,t)-1;a?Z.access(r,t,a):(r.removeEventListener(e,n,!0),Z.remove(r,t))}}});var Mt=n.location,bt=Date.now(),Lt=/\?/;k.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||k.error("Invalid XML: "+e),t};var kt=/\[\]$/,xt=/\r?\n/g,wt=/^(?:submit|button|image|reset|file)$/i,Yt=/^(?:input|select|textarea|keygen)/i;function Tt(e,t,n,r){var a;if(Array.isArray(t))k.each(t,function(t,a){n||kt.test(e)?r(e,a):Tt(e+"["+("object"==typeof a&&null!=a?t:"")+"]",a,n,r)});else if(n||"object"!==L(t))r(e,t);else for(a in t)Tt(e+"["+a+"]",t[a],n,r)}k.param=function(e,t){var n,r=[],a=function(e,t){var n=g(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!k.isPlainObject(e))k.each(e,function(){a(this.name,this.value)});else for(n in e)Tt(n,e[n],t,a);return r.join("&")},k.fn.extend({serialize:function(){return k.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=k.prop(this,"elements");return e?k.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!k(this).is(":disabled")&&Yt.test(this.nodeName)&&!wt.test(e)&&(this.checked||!fe.test(e))}).map(function(e,t){var n=k(this).val();return null==n?null:Array.isArray(n)?k.map(n,function(e){return{name:t.name,value:e.replace(xt,"\r\n")}}):{name:t.name,value:n.replace(xt,"\r\n")}}).get()}});var Dt=/%20/g,St=/#.*$/,Ct=/([?&])_=[^&]*/,At=/^(.*?):[ \t]*([^\r\n]*)$/gm,jt=/^(?:GET|HEAD)$/,Et=/^\/\//,Pt={},Ht={},Ot="*/".concat("*"),Ft=o.createElement("a");function Rt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,a=0,i=t.toLowerCase().match(R)||[];if(g(n))for(;r=i[a++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Nt(e,t,n,r){var a={},i=e===Ht;function o(s){var l;return a[s]=!0,k.each(e[s]||[],function(e,s){var u=s(t,n,r);return"string"!=typeof u||i||a[u]?i?!(l=u):void 0:(t.dataTypes.unshift(u),o(u),!1)}),l}return o(t.dataTypes[0])||!a["*"]&&o("*")}function It(e,t){var n,r,a=k.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((a[n]?e:r||(r={}))[n]=t[n]);return r&&k.extend(!0,e,r),e}Ft.href=Mt.href,k.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Mt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Mt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ot,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":k.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?It(It(e,k.ajaxSettings),t):It(k.ajaxSettings,e)},ajaxPrefilter:Rt(Pt),ajaxTransport:Rt(Ht),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,a,i,s,l,u,d,c,f,h,m=k.ajaxSetup({},t),p=m.context||m,_=m.context&&(p.nodeType||p.jquery)?k(p):k.event,y=k.Deferred(),g=k.Callbacks("once memory"),v=m.statusCode||{},M={},b={},L="canceled",x={readyState:0,getResponseHeader:function(e){var t;if(d){if(!s)for(s={};t=At.exec(i);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return d?i:null},setRequestHeader:function(e,t){return null==d&&(e=b[e.toLowerCase()]=b[e.toLowerCase()]||e,M[e]=t),this},overrideMimeType:function(e){return null==d&&(m.mimeType=e),this},statusCode:function(e){var t;if(e)if(d)x.always(e[x.status]);else for(t in e)v[t]=[v[t],e[t]];return this},abort:function(e){var t=e||L;return r&&r.abort(t),w(0,t),this}};if(y.promise(x),m.url=((e||m.url||Mt.href)+"").replace(Et,Mt.protocol+"//"),m.type=t.method||t.type||m.method||m.type,m.dataTypes=(m.dataType||"*").toLowerCase().match(R)||[""],null==m.crossDomain){u=o.createElement("a");try{u.href=m.url,u.href=u.href,m.crossDomain=Ft.protocol+"//"+Ft.host!=u.protocol+"//"+u.host}catch(e){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=k.param(m.data,m.traditional)),Nt(Pt,m,t,x),d)return x;for(f in(c=k.event&&m.global)&&0==k.active++&&k.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!jt.test(m.type),a=m.url.replace(St,""),m.hasContent?m.data&&m.processData&&0===(m.contentType||"").indexOf("application/x-www-form-urlencoded")&&(m.data=m.data.replace(Dt,"+")):(h=m.url.slice(a.length),m.data&&(m.processData||"string"==typeof m.data)&&(a+=(Lt.test(a)?"&":"?")+m.data,delete m.data),!1===m.cache&&(a=a.replace(Ct,"$1"),h=(Lt.test(a)?"&":"?")+"_="+bt+++h),m.url=a+h),m.ifModified&&(k.lastModified[a]&&x.setRequestHeader("If-Modified-Since",k.lastModified[a]),k.etag[a]&&x.setRequestHeader("If-None-Match",k.etag[a])),(m.data&&m.hasContent&&!1!==m.contentType||t.contentType)&&x.setRequestHeader("Content-Type",m.contentType),x.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+Ot+"; q=0.01":""):m.accepts["*"]),m.headers)x.setRequestHeader(f,m.headers[f]);if(m.beforeSend&&(!1===m.beforeSend.call(p,x,m)||d))return x.abort();if(L="abort",g.add(m.complete),x.done(m.success),x.fail(m.error),r=Nt(Ht,m,t,x)){if(x.readyState=1,c&&_.trigger("ajaxSend",[x,m]),d)return x;m.async&&m.timeout>0&&(l=n.setTimeout(function(){x.abort("timeout")},m.timeout));try{d=!1,r.send(M,w)}catch(e){if(d)throw e;w(-1,e)}}else w(-1,"No Transport");function w(e,t,o,s){var u,f,h,M,b,L=t;d||(d=!0,l&&n.clearTimeout(l),r=void 0,i=s||"",x.readyState=e>0?4:0,u=e>=200&&e<300||304===e,o&&(M=function(e,t,n){for(var r,a,i,o,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(a in s)if(s[a]&&s[a].test(r)){l.unshift(a);break}if(l[0]in n)i=l[0];else{for(a in n){if(!l[0]||e.converters[a+" "+l[0]]){i=a;break}o||(o=a)}i=i||o}if(i)return i!==l[0]&&l.unshift(i),n[i]}(m,x,o)),M=function(e,t,n,r){var a,i,o,s,l,u={},d=e.dataTypes.slice();if(d[1])for(o in e.converters)u[o.toLowerCase()]=e.converters[o];for(i=d.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=i,i=d.shift())if("*"===i)i=l;else if("*"!==l&&l!==i){if(!(o=u[l+" "+i]||u["* "+i]))for(a in u)if((s=a.split(" "))[1]===i&&(o=u[l+" "+s[0]]||u["* "+s[0]])){!0===o?o=u[a]:!0!==u[a]&&(i=s[0],d.unshift(s[1]));break}if(!0!==o)if(o&&e.throws)t=o(t);else try{t=o(t)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+l+" to "+i}}}return{state:"success",data:t}}(m,M,x,u),u?(m.ifModified&&((b=x.getResponseHeader("Last-Modified"))&&(k.lastModified[a]=b),(b=x.getResponseHeader("etag"))&&(k.etag[a]=b)),204===e||"HEAD"===m.type?L="nocontent":304===e?L="notmodified":(L=M.state,f=M.data,u=!(h=M.error))):(h=L,!e&&L||(L="error",e<0&&(e=0))),x.status=e,x.statusText=(t||L)+"",u?y.resolveWith(p,[f,L,x]):y.rejectWith(p,[x,L,h]),x.statusCode(v),v=void 0,c&&_.trigger(u?"ajaxSuccess":"ajaxError",[x,m,u?f:h]),g.fireWith(p,[x,L]),c&&(_.trigger("ajaxComplete",[x,m]),--k.active||k.event.trigger("ajaxStop")))}return x},getJSON:function(e,t,n){return k.get(e,t,n,"json")},getScript:function(e,t){return k.get(e,void 0,t,"script")}}),k.each(["get","post"],function(e,t){k[t]=function(e,n,r,a){return g(n)&&(a=a||r,r=n,n=void 0),k.ajax(k.extend({url:e,type:t,dataType:a,data:n,success:r},k.isPlainObject(e)&&e))}}),k._evalUrl=function(e){return k.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},k.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=k(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return g(e)?this.each(function(t){k(this).wrapInner(e.call(this,t))}):this.each(function(){var t=k(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=g(e);return this.each(function(n){k(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){k(this).replaceWith(this.childNodes)}),this}}),k.expr.pseudos.hidden=function(e){return!k.expr.pseudos.visible(e)},k.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},k.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Wt={0:200,1223:204},zt=k.ajaxSettings.xhr();y.cors=!!zt&&"withCredentials"in zt,y.ajax=zt=!!zt,k.ajaxTransport(function(e){var t,r;if(y.cors||zt&&!e.crossDomain)return{send:function(a,i){var o,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)s[o]=e.xhrFields[o];for(o in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||a["X-Requested-With"]||(a["X-Requested-With"]="XMLHttpRequest"),a)s.setRequestHeader(o,a[o]);t=function(e){return function(){t&&(t=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?i(0,"error"):i(s.status,s.statusText):i(Wt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),r=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout(function(){t&&r()})},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),k.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),k.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return k.globalEval(e),e}}}),k.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),k.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(r,a){t=k("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&a("error"===e.type?404:200,e.type)}),o.head.appendChild(t[0])},abort:function(){n&&n()}}});var Bt=[],Ut=/(=)\?(?=&|$)|\?\?/;k.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Bt.pop()||k.expando+"_"+bt++;return this[e]=!0,e}}),k.ajaxPrefilter("json jsonp",function(e,t,r){var a,i,o,s=!1!==e.jsonp&&(Ut.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ut.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return a=e.jsonpCallback=g(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Ut,"$1"+a):!1!==e.jsonp&&(e.url+=(Lt.test(e.url)?"&":"?")+e.jsonp+"="+a),e.converters["script json"]=function(){return o||k.error(a+" was not called"),o[0]},e.dataTypes[0]="json",i=n[a],n[a]=function(){o=arguments},r.always(function(){void 0===i?k(n).removeProp(a):n[a]=i,e[a]&&(e.jsonpCallback=t.jsonpCallback,Bt.push(a)),o&&g(i)&&i(o[0]),o=i=void 0}),"script"}),y.createHTMLDocument=function(){var e=o.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),k.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(y.createHTMLDocument?((r=(t=o.implementation.createHTMLDocument("")).createElement("base")).href=o.location.href,t.head.appendChild(r)):t=o),a=A.exec(e),i=!n&&[],a?[t.createElement(a[1])]:(a=ve([e],t,i),i&&i.length&&k(i).remove(),k.merge([],a.childNodes)));var r,a,i},k.fn.load=function(e,t,n){var r,a,i,o=this,s=e.indexOf(" ");return s>-1&&(r=mt(e.slice(s)),e=e.slice(0,s)),g(t)?(n=t,t=void 0):t&&"object"==typeof t&&(a="POST"),o.length>0&&k.ajax({url:e,type:a||"GET",dataType:"html",data:t}).done(function(e){i=arguments,o.html(r?k("<div>").append(k.parseHTML(e)).find(r):e)}).always(n&&function(e,t){o.each(function(){n.apply(this,i||[e.responseText,t,e])})}),this},k.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){k.fn[t]=function(e){return this.on(t,e)}}),k.expr.pseudos.animated=function(e){return k.grep(k.timers,function(t){return e===t.elem}).length},k.offset={setOffset:function(e,t,n){var r,a,i,o,s,l,u=k.css(e,"position"),d=k(e),c={};"static"===u&&(e.style.position="relative"),s=d.offset(),i=k.css(e,"top"),l=k.css(e,"left"),("absolute"===u||"fixed"===u)&&(i+l).indexOf("auto")>-1?(o=(r=d.position()).top,a=r.left):(o=parseFloat(i)||0,a=parseFloat(l)||0),g(t)&&(t=t.call(e,n,k.extend({},s))),null!=t.top&&(c.top=t.top-s.top+o),null!=t.left&&(c.left=t.left-s.left+a),"using"in t?t.using.call(e,c):d.css(c)}},k.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){k.offset.setOffset(this,e,t)});var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],a={top:0,left:0};if("fixed"===k.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===k.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((a=k(e).offset()).top+=k.css(e,"borderTopWidth",!0),a.left+=k.css(e,"borderLeftWidth",!0))}return{top:t.top-a.top-k.css(r,"marginTop",!0),left:t.left-a.left-k.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===k.css(e,"position");)e=e.offsetParent;return e||Me})}}),k.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;k.fn[e]=function(r){return V(this,function(e,r,a){var i;if(v(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===a)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:a,n?a:i.pageYOffset):e[r]=a},e,r,arguments.length)}}),k.each(["top","left"],function(e,t){k.cssHooks[t]=Be(y.pixelPosition,function(e,n){if(n)return n=ze(e,t),Ne.test(n)?k(e).position()[t]+"px":n})}),k.each({Height:"height",Width:"width"},function(e,t){k.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){k.fn[r]=function(a,i){var o=arguments.length&&(n||"boolean"!=typeof a),s=n||(!0===a||!0===i?"margin":"border");return V(this,function(t,n,a){var i;return v(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===a?k.css(t,n,s):k.style(t,n,a,s)},t,o?a:void 0,o)}})}),k.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){k.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),k.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),k.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),k.proxy=function(e,t){var n,r,a;if("string"==typeof t&&(n=e[t],t=e,e=n),g(e))return r=l.call(arguments,2),(a=function(){return e.apply(t||this,r.concat(l.call(arguments)))}).guid=e.guid=e.guid||k.guid++,a},k.holdReady=function(e){e?k.readyWait++:k.ready(!0)},k.isArray=Array.isArray,k.parseJSON=JSON.parse,k.nodeName=C,k.isFunction=g,k.isWindow=v,k.camelCase=$,k.type=L,k.now=Date.now,k.isNumeric=function(e){var t=k.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(r=function(){return k}.apply(t,[]))||(e.exports=r);var Vt=n.jQuery,qt=n.$;return k.noConflict=function(e){return n.$===k&&(n.$=qt),e&&n.jQuery===k&&(n.jQuery=Vt),k},a||(n.jQuery=n.$=k),k})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),a=d(r),i=d(n(177)),o=d(n(21)),s=d(n(1)),l=d(n(183)),u=n(22);function d(e){return e&&e.__esModule?e:{default:e}}class c extends r.Component{constructor(...e){var t;return t=super(...e),this.state={search:"",results:null,page:1,loading:!1,error:null},this.handlePaging=(e=>{const{history:t}=this.props,{search:n}=this.state;this.setState({page:e},()=>{t.push({pathname:"/companies",search:o.default.stringify({search:n,page:e})})})}),t}componentDidMount(){this.searchStocks()}componentDidUpdate({location:e}){const{search:t}=o.default.parse(e.search),{page:n}=o.default.parse(e.search);n!==this.pageNumber&&this.setState({page:this.pageNumber}),t!==this.searchTerm&&this.searchStocks()}get searchTerm(){const{location:e}=this.props,{search:t}=o.default.parse(e.search);return t}get pageNumber(){const{location:e}=this.props,{page:t}=o.default.parse(e.search);return t}searchStocks(){const e=this.searchTerm,t=this.pageNumber;this.setState({page:t}),e&&(this.setState({loading:!0,error:null}),(0,u.getSectorData)(e).then(t=>{let n=[];for(let e=0;e<t.length;e+=25){let r=t.slice(e,e+25);n.push(r)}this.setState({results:n,search:e})},e=>{this.setState({error:e.message})}).then(()=>{this.setState({loading:!1})}))}render(){const{results:e,page:t,loading:n,error:r}=this.state;return a.default.createElement("div",null,(n||r)&&a.default.createElement("section",{className:"notifications"},n&&a.default.createElement("div",null,"Loading..."),r&&a.default.createElement("div",null,r)),e?a.default.createElement("div",null,a.default.createElement(l.default,{onPage:this.handlePaging,page:+t,results:e}),a.default.createElement(i.default,{results:e,page:+t})):a.default.createElement("span",null,"Please select a sector and click search..."))}}t.default=c,c.propTypes={location:s.default.object.isRequired,history:s.default.object.isRequired}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),a=l(r),i=l(n(1)),o=l(n(178)),s=l(n(181));function l(e){return e&&e.__esModule?e:{default:e}}class u extends r.Component{render(){const{results:e,page:t}=this.props;return e?a.default.createElement("ul",{className:s.default.companies},e[t-1].map((e,t)=>a.default.createElement(o.default,{key:t,company:e}))):null}}t.default=u,u.propTypes={results:i.default.arrayOf(Array),page:i.default.number.isRequired}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),a=l(r),i=n(15),o=l(n(1)),s=l(n(179));function l(e){return e&&e.__esModule?e:{default:e}}class u extends r.Component{render(){const{company:e}=this.props,{symbol:t,companyName:n,week52High:r,week52Low:o}=e,{ytdChange:l,latestPrice:u}=e;return a.default.createElement("li",{className:s.default.company},a.default.createElement(i.Link,{to:`/companies/${t}`},a.default.createElement("h3",null,n," (",t,")"),a.default.createElement("br",null)),"Latest Price: ",u,a.default.createElement("br",null),"52-Week High: ",r,a.default.createElement("br",null),"52-Week Low: ",o,a.default.createElement("br",null),"YTD Change: ",l,a.default.createElement("br",null),a.default.createElement("br",null))}}t.default=u,u.propTypes={company:o.default.object.isRequired}},function(e,t,n){var r=n(180);"string"==typeof r&&(r=[[e.i,r,""]]);var a={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(9)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(8)(!0)).push([e.i,".UKMoRR_5tTj2wr3Ys_fjm {\n  background-color: rgba(0, 0, 0, .5);\n  box-shadow: 5px 8px black;\n  margin: 10px;\n  padding: 10px;\n\n}","",{version:3,sources:["/Users/Grayson/alchemy/career-track/search-all-the-things/src/components/companies/Company.css"],names:[],mappings:"AAAA;EACE,oCAAoC;EACpC,0BAA0B;EAC1B,aAAa;EACb,cAAc;;CAEf",file:"Company.css",sourcesContent:[":local(.company) {\n  background-color: rgba(0, 0, 0, .5);\n  box-shadow: 5px 8px black;\n  margin: 10px;\n  padding: 10px;\n\n}"],sourceRoot:""}]),t.locals={company:"UKMoRR_5tTj2wr3Ys_fjm"}},function(e,t,n){var r=n(182);"string"==typeof r&&(r=[[e.i,r,""]]);var a={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(9)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(8)(!0)).push([e.i,".StCzEqmx_1Tsll6sCoai {\n  padding-left: 0px;\n  list-style: none;\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n  font-size: 15px;\n\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n\n}","",{version:3,sources:["/Users/Grayson/alchemy/career-track/search-all-the-things/src/components/companies/Companies.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,iBAAiB;EACjB,uHAAuH;EACvH,gBAAgB;;EAEhB,cAAc;EACd,6DAA6D;;CAE9D",file:"Companies.css",sourcesContent:[":local(.companies) {\n  padding-left: 0px;\n  list-style: none;\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n  font-size: 15px;\n\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n\n}"],sourceRoot:""}]),t.locals={companies:"StCzEqmx_1Tsll6sCoai"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),a=s(r),i=s(n(1)),o=s(n(184));function s(e){return e&&e.__esModule?e:{default:e}}class l extends r.Component{handlePage(e){const{page:t,onPage:n,results:r}=this.props;(t>=1||t<=r.length)&&n(t+e)}render(){const{page:e,results:t}=this.props;return t?a.default.createElement("div",{className:o.default.paging},a.default.createElement("button",{disabled:1===e,onClick:()=>this.handlePage(-1)},"Previous"),a.default.createElement("p",null,"Page  ",e," of ",t.length),a.default.createElement("button",{disabled:e===t.length,onClick:()=>this.handlePage(1)},"Next")):null}}t.default=l,l.propTypes={page:i.default.number,results:i.default.arrayOf(Array),onPage:i.default.func.isRequired}},function(e,t,n){var r=n(185);"string"==typeof r&&(r=[[e.i,r,""]]);var a={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(9)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(8)(!0)).push([e.i,"._1yG6OAW7Hee1c0TeGTT-3R {\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n  font-size: 14px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n  ._1yG6OAW7Hee1c0TeGTT-3R button {\n    font-size: 15px;\n    border-radius: 5px;\n    margin: 5px;\n  }","",{version:3,sources:["/Users/Grayson/alchemy/career-track/search-all-the-things/src/components/paging/Paging.css"],names:[],mappings:"AAAA;EACE,uHAAuH;EACvH,gBAAgB;;EAEhB,cAAc;EACd,wBAAwB;EACxB,oBAAoB;CAOrB;;EALC;IACE,gBAAgB;IAChB,mBAAmB;IACnB,YAAY;GACb",file:"Paging.css",sourcesContent:[":local(.paging) {\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n  font-size: 14px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  button {\n    font-size: 15px;\n    border-radius: 5px;\n    margin: 5px;\n  }\n}"],sourceRoot:""}]),t.locals={paging:"_1yG6OAW7Hee1c0TeGTT-3R"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),a=s(r),i=s(n(187)),o=s(n(188));function s(e){return e&&e.__esModule?e:{default:e}}t.default=class extends r.Component{render(){return a.default.createElement("div",{className:o.default.home},a.default.createElement("img",{src:i.default}))}}},function(e,t,n){e.exports=n.p+"f3852b2daf60a60dce3ae844809d6740.png"},function(e,t,n){var r=n(189);"string"==typeof r&&(r=[[e.i,r,""]]);var a={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(9)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(8)(!0)).push([e.i,"._2mKave5Lgz7xs6gUWBbaak {\n  display: flex;\n  justify-content: center;\n  margin-top: 50px;\n  min-width: 430px;\n}\n\n  ._2mKave5Lgz7xs6gUWBbaak img {\n    width: 40vw;\n    height: 40vw;\n    -o-object-fit: contain;\n       object-fit: contain;\n  }","",{version:3,sources:["/Users/Grayson/alchemy/career-track/search-all-the-things/src/components/home/Home.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,wBAAwB;EACxB,iBAAiB;EACjB,iBAAiB;CAOlB;;EALC;IACE,YAAY;IACZ,aAAa;IACb,uBAAoB;OAApB,oBAAoB;GACrB",file:"Home.css",sourcesContent:[":local(.home) {\n  display: flex;\n  justify-content: center;\n  margin-top: 50px;\n  min-width: 430px;\n\n  img {\n    width: 40vw;\n    height: 40vw;\n    object-fit: contain;\n  }\n}"],sourceRoot:""}]),t.locals={home:"_2mKave5Lgz7xs6gUWBbaak"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),a=c(r),i=c(n(1)),o=n(22),s=n(23),l=c(n(192)),u=c(n(194)),d=c(n(197));function c(e){return e&&e.__esModule?e:{default:e}}class f extends r.Component{constructor(...e){var t;return t=super(...e),this.state={company:null,favorite:null},this.handleClick=(()=>{const{company:e,favorite:t}=this.state;!!t?(0,s.removeFavorite)(e.company.symbol).then(()=>{this.setState({favorite:null})}).catch(console.log):(0,s.addFavorite)(e.company).then(e=>{this.setState({favorite:e})}).catch(console.log)}),t}componentDidMount(){const{id:e}=this.props.match.params;(0,o.getStockData)(e).then(e=>{this.setState({company:e})}).catch(console.log),(0,s.getFavorite)(e).then(e=>{this.setState({favorite:e})}).catch(console.log)}componentDidUpdate({location:e}){if(e.pathname!==this.path){const e=this.path.split("/").slice(2);(0,o.getStockData)(e).then(e=>{this.setState({company:e})}).catch(console.log)}}get path(){const{location:e}=this.props;return e.pathname}render(){const{company:e,favorite:t}=this.state;return e?a.default.createElement("div",{className:l.default.companyDetail},a.default.createElement("button",{onClick:this.handleClick},t?"Remove from":"Add to"," favorites"),a.default.createElement("h3",null,"Company:"),a.default.createElement("br",null),e.book.quote.companyName," ",a.default.createElement("a",{href:e.company.website,target:"blank"},"(Company Web Site)"),a.default.createElement("p",null,a.default.createElement("b",null,"CEO:"),a.default.createElement("br",null),e.company.CEO),a.default.createElement("p",null,a.default.createElement("b",null,"Description:"),a.default.createElement("br",null),e.company.description),a.default.createElement("p",null,"Latest Price:  ",e.book.quote.latestPrice),a.default.createElement("p",null,e.book.quote.latestSource," | ",e.book.quote.latestTime),a.default.createElement("p",null,"High:  ",e.book.quote.high,"  (52-week high: ",e.book.quote.week52High,")"),a.default.createElement("p",null,"Low:  ",e.book.quote.low,"  (52-week low:  ",e.book.quote.week52Low,")"),a.default.createElement("p",null,"Low:  ",e.book.quote.low),a.default.createElement("p",null),a.default.createElement(d.default,{company:e}),e.news.length>0&&a.default.createElement(r.Fragment,null,a.default.createElement("h3",null,"News:"),a.default.createElement("ul",null,e.news.map((e,t)=>a.default.createElement(u.default,{key:t,article:e}))))):null}}t.default=f,f.propTypes={location:i.default.object.isRequired,history:i.default.object.isRequired,match:i.default.object.isRequired}},function(e,t,n){"use strict";function r(e,t={},n){return n&&(t.body=JSON.stringify(n)),fetch(e,t).then(e=>[e.ok,e.json()]).then(([e,t])=>{if(e)return t;throw t.message||t.error||t.errors||t})}Object.defineProperty(t,"__esModule",{value:!0});const a={"content-type":"application/json"};t.get=(e=>r(e)),t.post=((e,t)=>r(e,{method:"POST",headers:a},t)),t.put=((e,t)=>r(e,{method:"PUT",headers:a},t)),t.del=((e,t)=>r(e,{method:"DELETE"},t))},function(e,t,n){var r=n(193);"string"==typeof r&&(r=[[e.i,r,""]]);var a={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(9)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(8)(!0)).push([e.i,"._1C9qhmKY-81F68oUPmo-bl {\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n  font-size: 14px;\n}","",{version:3,sources:["/Users/Grayson/alchemy/career-track/search-all-the-things/src/components/companies/CompanyDetail.css"],names:[],mappings:"AAAA;EACE,uHAAuH;EACvH,gBAAgB;CACjB",file:"CompanyDetail.css",sourcesContent:[":local(.companyDetail) {\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n  font-size: 14px;\n}"],sourceRoot:""}]),t.locals={companyDetail:"_1C9qhmKY-81F68oUPmo-bl"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),a=s(r),i=s(n(1)),o=s(n(195));function s(e){return e&&e.__esModule?e:{default:e}}class l extends r.Component{render(){const{article:e}=this.props,{datetime:t,headline:n,summary:r,url:i}=e,s=new Date(t);return a.default.createElement("li",{className:o.default.news},a.default.createElement("p",null,Intl.DateTimeFormat("en-US",{weekday:"long",year:"numeric",month:"long",day:"numeric",hour:"numeric",minute:"numeric"}).format(s)),a.default.createElement("p",null,n),a.default.createElement("p",null,r),a.default.createElement("p",null,a.default.createElement("a",{href:i,target:"blank"},"(Article Link)")))}}t.default=l,l.propTypes={article:i.default.object.isRequired}},function(e,t,n){var r=n(196);"string"==typeof r&&(r=[[e.i,r,""]]);var a={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(9)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(8)(!0)).push([e.i,"._1pjJGumuSMU3Z7imL7lVz_ {\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n  font-size: 14px;\n}","",{version:3,sources:["/Users/Grayson/alchemy/career-track/search-all-the-things/src/components/companies/News.css"],names:[],mappings:"AAAA;EACE,uHAAuH;EACvH,gBAAgB;CACjB",file:"News.css",sourcesContent:[":local(.companies) {\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n  font-size: 14px;\n}"],sourceRoot:""}]),t.locals={companies:"_1pjJGumuSMU3Z7imL7lVz_"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),a=l(r),i=n(198),o=l(n(1)),s=l(n(249));function l(e){return e&&e.__esModule?e:{default:e}}class u extends r.Component{render(){const{company:e}=this.props,t={labels:e.chart.map(e=>e.label),datasets:[{label:"High",data:e.chart.map(e=>e.high),fill:!1,borderColor:"#4bc0c0"},{label:"Low",data:e.chart.map(e=>e.low),fill:!1,borderColor:"red"},{label:"Close",data:e.chart.map(e=>e.close),fill:!1,borderColor:"black"}]};return a.default.createElement("div",{className:s.default.lineChart},a.default.createElement(i.Chart,{type:"line",data:t}))}}t.default=u,u.propTypes={company:o.default.object.isRequired}},function(e,t,n){"use strict";e.exports=n(199)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Chart=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=u(a),o=u(n(1)),s=u(n(200)),l=u(n(248));function u(e){return e&&e.__esModule?e:{default:e}}var d=t.Chart=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"initChart",value:function(){this.chart=new s.default(this.canvas,{type:this.props.type,data:this.props.data,options:this.props.options})}},{key:"getCanvas",value:function(){return this.canvas}},{key:"getBase64Image",value:function(){return this.chart.toBase64Image()}},{key:"generateLegend",value:function(){this.chart&&this.chart.generateLegend()}},{key:"refresh",value:function(){this.chart&&this.chart.update()}},{key:"reinit",value:function(){this.chart&&(this.chart.destroy(),this.initChart())}},{key:"componentDidMount",value:function(){this.initChart()}},{key:"componentDidUpdate",value:function(e,t){this.reinit()}},{key:"componentWillUnmount",value:function(){this.chart&&(this.chart.destroy(),this.chart=null)}},{key:"shouldComponentUpdate",value:function(e){return e.data!==this.props.data}},{key:"render",value:function(){var e=this,t=(0,l.default)("ui-chart",this.props.className),n=Object.assign({width:this.props.width,height:this.props.height},this.props.style);return i.default.createElement("div",{id:this.props.id,style:n,className:t},i.default.createElement("canvas",{ref:function(t){e.canvas=t},width:this.props.width,height:this.props.height}))}}]),t}();d.defaultProps={id:null,type:null,data:null,options:null,width:null,height:null,style:null,className:null},d.propTypes={id:o.default.string,type:o.default.string,data:o.default.object,options:o.default.object,width:o.default.string,height:o.default.string,style:o.default.object,className:o.default.string}},function(e,t,n){var r=n(201)();r.helpers=n(3),n(205)(r),r.defaults=n(4),r.Element=n(10),r.elements=n(11),r.Interaction=n(25),r.layouts=n(12),r.platform=n(26),r.plugins=n(27),r.Ticks=n(13),n(216)(r),n(217)(r),n(218)(r),n(219)(r),n(220)(r),n(221)(r),n(222)(r),n(223)(r),n(224)(r),n(225)(r),n(226)(r),n(227)(r),n(230)(r),n(231)(r),n(232)(r),n(233)(r),n(234)(r),n(235)(r),n(236)(r),n(237)(r),n(238)(r),n(239)(r),n(240)(r),n(241)(r),n(242)(r),n(243)(r);var a=n(244);for(var i in a)a.hasOwnProperty(i)&&r.plugins.register(a[i]);r.platform.initialize(),e.exports=r,"undefined"!=typeof window&&(window.Chart=r),r.Legend=a.legend._element,r.Title=a.title._element,r.pluginService=r.plugins,r.PluginBase=r.Element.extend({}),r.canvasHelpers=r.helpers.canvas,r.layoutService=r.layouts},function(e,t,n){"use strict";n(4)._set("global",{responsive:!0,responsiveAnimationDuration:0,maintainAspectRatio:!0,events:["mousemove","mouseout","click","touchstart","touchmove"],hover:{onHover:null,mode:"nearest",intersect:!0,animationDuration:400},onClick:null,defaultColor:"rgba(0,0,0,0.1)",defaultFontColor:"#666",defaultFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",defaultFontSize:12,defaultFontStyle:"normal",showLines:!0,elements:{},layout:{padding:{top:0,right:0,bottom:0,left:0}}}),e.exports=function(){var e=function(e,t){return this.construct(e,t),this};return e.Chart=e,e}},function(e,t,n){"use strict";var r=n(14),a={linear:function(e){return e},easeInQuad:function(e){return e*e},easeOutQuad:function(e){return-e*(e-2)},easeInOutQuad:function(e){return(e/=.5)<1?.5*e*e:-.5*(--e*(e-2)-1)},easeInCubic:function(e){return e*e*e},easeOutCubic:function(e){return(e-=1)*e*e+1},easeInOutCubic:function(e){return(e/=.5)<1?.5*e*e*e:.5*((e-=2)*e*e+2)},easeInQuart:function(e){return e*e*e*e},easeOutQuart:function(e){return-((e-=1)*e*e*e-1)},easeInOutQuart:function(e){return(e/=.5)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2)},easeInQuint:function(e){return e*e*e*e*e},easeOutQuint:function(e){return(e-=1)*e*e*e*e+1},easeInOutQuint:function(e){return(e/=.5)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2)},easeInSine:function(e){return 1-Math.cos(e*(Math.PI/2))},easeOutSine:function(e){return Math.sin(e*(Math.PI/2))},easeInOutSine:function(e){return-.5*(Math.cos(Math.PI*e)-1)},easeInExpo:function(e){return 0===e?0:Math.pow(2,10*(e-1))},easeOutExpo:function(e){return 1===e?1:1-Math.pow(2,-10*e)},easeInOutExpo:function(e){return 0===e?0:1===e?1:(e/=.5)<1?.5*Math.pow(2,10*(e-1)):.5*(2-Math.pow(2,-10*--e))},easeInCirc:function(e){return e>=1?e:-(Math.sqrt(1-e*e)-1)},easeOutCirc:function(e){return Math.sqrt(1-(e-=1)*e)},easeInOutCirc:function(e){return(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)},easeInElastic:function(e){var t=1.70158,n=0,r=1;return 0===e?0:1===e?1:(n||(n=.3),r<1?(r=1,t=n/4):t=n/(2*Math.PI)*Math.asin(1/r),-r*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/n))},easeOutElastic:function(e){var t=1.70158,n=0,r=1;return 0===e?0:1===e?1:(n||(n=.3),r<1?(r=1,t=n/4):t=n/(2*Math.PI)*Math.asin(1/r),r*Math.pow(2,-10*e)*Math.sin((e-t)*(2*Math.PI)/n)+1)},easeInOutElastic:function(e){var t=1.70158,n=0,r=1;return 0===e?0:2==(e/=.5)?1:(n||(n=.45),r<1?(r=1,t=n/4):t=n/(2*Math.PI)*Math.asin(1/r),e<1?r*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/n)*-.5:r*Math.pow(2,-10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/n)*.5+1)},easeInBack:function(e){var t=1.70158;return e*e*((t+1)*e-t)},easeOutBack:function(e){var t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},easeInOutBack:function(e){var t=1.70158;return(e/=.5)<1?e*e*((1+(t*=1.525))*e-t)*.5:.5*((e-=2)*e*((1+(t*=1.525))*e+t)+2)},easeInBounce:function(e){return 1-a.easeOutBounce(1-e)},easeOutBounce:function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},easeInOutBounce:function(e){return e<.5?.5*a.easeInBounce(2*e):.5*a.easeOutBounce(2*e-1)+.5}};e.exports={effects:a},r.easingEffects=a},function(e,t,n){"use strict";var r=n(14);t=e.exports={clear:function(e){e.ctx.clearRect(0,0,e.width,e.height)},roundedRect:function(e,t,n,r,a,i){if(i){var o=Math.min(i,r/2),s=Math.min(i,a/2);e.moveTo(t+o,n),e.lineTo(t+r-o,n),e.quadraticCurveTo(t+r,n,t+r,n+s),e.lineTo(t+r,n+a-s),e.quadraticCurveTo(t+r,n+a,t+r-o,n+a),e.lineTo(t+o,n+a),e.quadraticCurveTo(t,n+a,t,n+a-s),e.lineTo(t,n+s),e.quadraticCurveTo(t,n,t+o,n)}else e.rect(t,n,r,a)},drawPoint:function(e,t,n,r,a){var i,o,s,l,u,d;if(!t||"object"!=typeof t||"[object HTMLImageElement]"!==(i=t.toString())&&"[object HTMLCanvasElement]"!==i){if(!(isNaN(n)||n<=0)){switch(t){default:e.beginPath(),e.arc(r,a,n,0,2*Math.PI),e.closePath(),e.fill();break;case"triangle":e.beginPath(),u=(o=3*n/Math.sqrt(3))*Math.sqrt(3)/2,e.moveTo(r-o/2,a+u/3),e.lineTo(r+o/2,a+u/3),e.lineTo(r,a-2*u/3),e.closePath(),e.fill();break;case"rect":d=1/Math.SQRT2*n,e.beginPath(),e.fillRect(r-d,a-d,2*d,2*d),e.strokeRect(r-d,a-d,2*d,2*d);break;case"rectRounded":var c=n/Math.SQRT2,f=r-c,h=a-c,m=Math.SQRT2*n;e.beginPath(),this.roundedRect(e,f,h,m,m,n/2),e.closePath(),e.fill();break;case"rectRot":d=1/Math.SQRT2*n,e.beginPath(),e.moveTo(r-d,a),e.lineTo(r,a+d),e.lineTo(r+d,a),e.lineTo(r,a-d),e.closePath(),e.fill();break;case"cross":e.beginPath(),e.moveTo(r,a+n),e.lineTo(r,a-n),e.moveTo(r-n,a),e.lineTo(r+n,a),e.closePath();break;case"crossRot":e.beginPath(),s=Math.cos(Math.PI/4)*n,l=Math.sin(Math.PI/4)*n,e.moveTo(r-s,a-l),e.lineTo(r+s,a+l),e.moveTo(r-s,a+l),e.lineTo(r+s,a-l),e.closePath();break;case"star":e.beginPath(),e.moveTo(r,a+n),e.lineTo(r,a-n),e.moveTo(r-n,a),e.lineTo(r+n,a),s=Math.cos(Math.PI/4)*n,l=Math.sin(Math.PI/4)*n,e.moveTo(r-s,a-l),e.lineTo(r+s,a+l),e.moveTo(r-s,a+l),e.lineTo(r+s,a-l),e.closePath();break;case"line":e.beginPath(),e.moveTo(r-n,a),e.lineTo(r+n,a),e.closePath();break;case"dash":e.beginPath(),e.moveTo(r,a),e.lineTo(r+n,a),e.closePath()}e.stroke()}}else e.drawImage(t,r-t.width/2,a-t.height/2,t.width,t.height)},clipArea:function(e,t){e.save(),e.beginPath(),e.rect(t.left,t.top,t.right-t.left,t.bottom-t.top),e.clip()},unclipArea:function(e){e.restore()},lineTo:function(e,t,n,r){if(n.steppedLine)return"after"===n.steppedLine&&!r||"after"!==n.steppedLine&&r?e.lineTo(t.x,n.y):e.lineTo(n.x,t.y),void e.lineTo(n.x,n.y);n.tension?e.bezierCurveTo(r?t.controlPointPreviousX:t.controlPointNextX,r?t.controlPointPreviousY:t.controlPointNextY,r?n.controlPointNextX:n.controlPointPreviousX,r?n.controlPointNextY:n.controlPointPreviousY,n.x,n.y):e.lineTo(n.x,n.y)}};r.clear=t.clear,r.drawRoundedRectangle=function(e){e.beginPath(),t.roundedRect.apply(t,arguments),e.closePath()}},function(e,t,n){"use strict";var r=n(14);e.exports={toLineHeight:function(e,t){var n=(""+e).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);if(!n||"normal"===n[1])return 1.2*t;switch(e=+n[2],n[3]){case"px":return e;case"%":e/=100}return t*e},toPadding:function(e){var t,n,a,i;return r.isObject(e)?(t=+e.top||0,n=+e.right||0,a=+e.bottom||0,i=+e.left||0):t=n=a=i=+e||0,{top:t,right:n,bottom:a,left:i,height:t+a,width:i+n}},resolve:function(e,t,n){var a,i,o;for(a=0,i=e.length;a<i;++a)if(void 0!==(o=e[a])&&(void 0!==t&&"function"==typeof o&&(o=o(t)),void 0!==n&&r.isArray(o)&&(o=o[n]),void 0!==o))return o}}},function(e,t,n){"use strict";var r=n(24),a=n(4),i=n(3);e.exports=function(e){function t(e,t,n){var r;return"string"==typeof e?(r=parseInt(e,10),-1!==e.indexOf("%")&&(r=r/100*t.parentNode[n])):r=e,r}function n(e){return void 0!==e&&null!==e&&"none"!==e}function o(e,r,a){var i=document.defaultView,o=e.parentNode,s=i.getComputedStyle(e)[r],l=i.getComputedStyle(o)[r],u=n(s),d=n(l),c=Number.POSITIVE_INFINITY;return u||d?Math.min(u?t(s,e,a):c,d?t(l,o,a):c):"none"}i.configMerge=function(){return i.merge(i.clone(arguments[0]),[].slice.call(arguments,1),{merger:function(t,n,r,a){var o=n[t]||{},s=r[t];"scales"===t?n[t]=i.scaleMerge(o,s):"scale"===t?n[t]=i.merge(o,[e.scaleService.getScaleDefaults(s.type),s]):i._merger(t,n,r,a)}})},i.scaleMerge=function(){return i.merge(i.clone(arguments[0]),[].slice.call(arguments,1),{merger:function(t,n,r,a){if("xAxes"===t||"yAxes"===t){var o,s,l,u=r[t].length;for(n[t]||(n[t]=[]),o=0;o<u;++o)l=r[t][o],s=i.valueOrDefault(l.type,"xAxes"===t?"category":"linear"),o>=n[t].length&&n[t].push({}),!n[t][o].type||l.type&&l.type!==n[t][o].type?i.merge(n[t][o],[e.scaleService.getScaleDefaults(s),l]):i.merge(n[t][o],l)}else i._merger(t,n,r,a)}})},i.where=function(e,t){if(i.isArray(e)&&Array.prototype.filter)return e.filter(t);var n=[];return i.each(e,function(e){t(e)&&n.push(e)}),n},i.findIndex=Array.prototype.findIndex?function(e,t,n){return e.findIndex(t,n)}:function(e,t,n){n=void 0===n?e:n;for(var r=0,a=e.length;r<a;++r)if(t.call(n,e[r],r,e))return r;return-1},i.findNextWhere=function(e,t,n){i.isNullOrUndef(n)&&(n=-1);for(var r=n+1;r<e.length;r++){var a=e[r];if(t(a))return a}},i.findPreviousWhere=function(e,t,n){i.isNullOrUndef(n)&&(n=e.length);for(var r=n-1;r>=0;r--){var a=e[r];if(t(a))return a}},i.isNumber=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},i.almostEquals=function(e,t,n){return Math.abs(e-t)<n},i.almostWhole=function(e,t){var n=Math.round(e);return n-t<e&&n+t>e},i.max=function(e){return e.reduce(function(e,t){return isNaN(t)?e:Math.max(e,t)},Number.NEGATIVE_INFINITY)},i.min=function(e){return e.reduce(function(e,t){return isNaN(t)?e:Math.min(e,t)},Number.POSITIVE_INFINITY)},i.sign=Math.sign?function(e){return Math.sign(e)}:function(e){return 0===(e=+e)||isNaN(e)?e:e>0?1:-1},i.log10=Math.log10?function(e){return Math.log10(e)}:function(e){var t=Math.log(e)*Math.LOG10E,n=Math.round(t);return e===Math.pow(10,n)?n:t},i.toRadians=function(e){return e*(Math.PI/180)},i.toDegrees=function(e){return e*(180/Math.PI)},i.getAngleFromPoint=function(e,t){var n=t.x-e.x,r=t.y-e.y,a=Math.sqrt(n*n+r*r),i=Math.atan2(r,n);return i<-.5*Math.PI&&(i+=2*Math.PI),{angle:i,distance:a}},i.distanceBetweenPoints=function(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))},i.aliasPixel=function(e){return e%2==0?0:.5},i.splineCurve=function(e,t,n,r){var a=e.skip?t:e,i=t,o=n.skip?t:n,s=Math.sqrt(Math.pow(i.x-a.x,2)+Math.pow(i.y-a.y,2)),l=Math.sqrt(Math.pow(o.x-i.x,2)+Math.pow(o.y-i.y,2)),u=s/(s+l),d=l/(s+l),c=r*(u=isNaN(u)?0:u),f=r*(d=isNaN(d)?0:d);return{previous:{x:i.x-c*(o.x-a.x),y:i.y-c*(o.y-a.y)},next:{x:i.x+f*(o.x-a.x),y:i.y+f*(o.y-a.y)}}},i.EPSILON=Number.EPSILON||1e-14,i.splineCurveMonotone=function(e){var t,n,r,a,o,s,l,u,d,c=(e||[]).map(function(e){return{model:e._model,deltaK:0,mK:0}}),f=c.length;for(t=0;t<f;++t)if(!(r=c[t]).model.skip){if(n=t>0?c[t-1]:null,(a=t<f-1?c[t+1]:null)&&!a.model.skip){var h=a.model.x-r.model.x;r.deltaK=0!==h?(a.model.y-r.model.y)/h:0}!n||n.model.skip?r.mK=r.deltaK:!a||a.model.skip?r.mK=n.deltaK:this.sign(n.deltaK)!==this.sign(r.deltaK)?r.mK=0:r.mK=(n.deltaK+r.deltaK)/2}for(t=0;t<f-1;++t)r=c[t],a=c[t+1],r.model.skip||a.model.skip||(i.almostEquals(r.deltaK,0,this.EPSILON)?r.mK=a.mK=0:(o=r.mK/r.deltaK,s=a.mK/r.deltaK,(u=Math.pow(o,2)+Math.pow(s,2))<=9||(l=3/Math.sqrt(u),r.mK=o*l*r.deltaK,a.mK=s*l*r.deltaK)));for(t=0;t<f;++t)(r=c[t]).model.skip||(n=t>0?c[t-1]:null,a=t<f-1?c[t+1]:null,n&&!n.model.skip&&(d=(r.model.x-n.model.x)/3,r.model.controlPointPreviousX=r.model.x-d,r.model.controlPointPreviousY=r.model.y-d*r.mK),a&&!a.model.skip&&(d=(a.model.x-r.model.x)/3,r.model.controlPointNextX=r.model.x+d,r.model.controlPointNextY=r.model.y+d*r.mK))},i.nextItem=function(e,t,n){return n?t>=e.length-1?e[0]:e[t+1]:t>=e.length-1?e[e.length-1]:e[t+1]},i.previousItem=function(e,t,n){return n?t<=0?e[e.length-1]:e[t-1]:t<=0?e[0]:e[t-1]},i.niceNum=function(e,t){var n=Math.floor(i.log10(e)),r=e/Math.pow(10,n);return(t?r<1.5?1:r<3?2:r<7?5:10:r<=1?1:r<=2?2:r<=5?5:10)*Math.pow(10,n)},i.requestAnimFrame="undefined"==typeof window?function(e){e()}:window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e){return window.setTimeout(e,1e3/60)},i.getRelativePosition=function(e,t){var n,r,a=e.originalEvent||e,o=e.currentTarget||e.srcElement,s=o.getBoundingClientRect(),l=a.touches;l&&l.length>0?(n=l[0].clientX,r=l[0].clientY):(n=a.clientX,r=a.clientY);var u=parseFloat(i.getStyle(o,"padding-left")),d=parseFloat(i.getStyle(o,"padding-top")),c=parseFloat(i.getStyle(o,"padding-right")),f=parseFloat(i.getStyle(o,"padding-bottom")),h=s.right-s.left-u-c,m=s.bottom-s.top-d-f;return{x:n=Math.round((n-s.left-u)/h*o.width/t.currentDevicePixelRatio),y:r=Math.round((r-s.top-d)/m*o.height/t.currentDevicePixelRatio)}},i.getConstraintWidth=function(e){return o(e,"max-width","clientWidth")},i.getConstraintHeight=function(e){return o(e,"max-height","clientHeight")},i.getMaximumWidth=function(e){var t=e.parentNode;if(!t)return e.clientWidth;var n=parseInt(i.getStyle(t,"padding-left"),10),r=parseInt(i.getStyle(t,"padding-right"),10),a=t.clientWidth-n-r,o=i.getConstraintWidth(e);return isNaN(o)?a:Math.min(a,o)},i.getMaximumHeight=function(e){var t=e.parentNode;if(!t)return e.clientHeight;var n=parseInt(i.getStyle(t,"padding-top"),10),r=parseInt(i.getStyle(t,"padding-bottom"),10),a=t.clientHeight-n-r,o=i.getConstraintHeight(e);return isNaN(o)?a:Math.min(a,o)},i.getStyle=function(e,t){return e.currentStyle?e.currentStyle[t]:document.defaultView.getComputedStyle(e,null).getPropertyValue(t)},i.retinaScale=function(e,t){var n=e.currentDevicePixelRatio=t||window.devicePixelRatio||1;if(1!==n){var r=e.canvas,a=e.height,i=e.width;r.height=a*n,r.width=i*n,e.ctx.scale(n,n),r.style.height||r.style.width||(r.style.height=a+"px",r.style.width=i+"px")}},i.fontString=function(e,t,n){return t+" "+e+"px "+n},i.longestText=function(e,t,n,r){var a=(r=r||{}).data=r.data||{},o=r.garbageCollect=r.garbageCollect||[];r.font!==t&&(a=r.data={},o=r.garbageCollect=[],r.font=t),e.font=t;var s=0;i.each(n,function(t){void 0!==t&&null!==t&&!0!==i.isArray(t)?s=i.measureText(e,a,o,s,t):i.isArray(t)&&i.each(t,function(t){void 0===t||null===t||i.isArray(t)||(s=i.measureText(e,a,o,s,t))})});var l=o.length/2;if(l>n.length){for(var u=0;u<l;u++)delete a[o[u]];o.splice(0,l)}return s},i.measureText=function(e,t,n,r,a){var i=t[a];return i||(i=t[a]=e.measureText(a).width,n.push(a)),i>r&&(r=i),r},i.numberOfLabelLines=function(e){var t=1;return i.each(e,function(e){i.isArray(e)&&e.length>t&&(t=e.length)}),t},i.color=r?function(e){return e instanceof CanvasGradient&&(e=a.global.defaultColor),r(e)}:function(e){return console.error("Color.js not found!"),e},i.getHoverColor=function(e){return e instanceof CanvasPattern?e:i.color(e).saturate(.5).darken(.1).rgbString()}}},function(e,t,n){var r=n(207),a=function(){return new u};for(var i in r){a[i+"Raw"]=function(e){return function(t){return"number"==typeof t&&(t=Array.prototype.slice.call(arguments)),r[e](t)}}(i);var o=/(\w+)2(\w+)/.exec(i),s=o[1],l=o[2];(a[s]=a[s]||{})[l]=a[i]=function(e){return function(t){"number"==typeof t&&(t=Array.prototype.slice.call(arguments));var n=r[e](t);if("string"==typeof n||void 0===n)return n;for(var a=0;a<n.length;a++)n[a]=Math.round(n[a]);return n}}(i)}var u=function(){this.convs={}};u.prototype.routeSpace=function(e,t){var n=t[0];return void 0===n?this.getValues(e):("number"==typeof n&&(n=Array.prototype.slice.call(t)),this.setValues(e,n))},u.prototype.setValues=function(e,t){return this.space=e,this.convs={},this.convs[e]=t,this},u.prototype.getValues=function(e){var t=this.convs[e];if(!t){var n=this.space,r=this.convs[n];t=a[n][e](r),this.convs[e]=t}return t},["rgb","hsl","hsv","cmyk","keyword"].forEach(function(e){u.prototype[e]=function(t){return this.routeSpace(e,arguments)}}),e.exports=a},function(e,t){function n(e){var t,n,r=e[0]/255,a=e[1]/255,i=e[2]/255,o=Math.min(r,a,i),s=Math.max(r,a,i),l=s-o;return s==o?t=0:r==s?t=(a-i)/l:a==s?t=2+(i-r)/l:i==s&&(t=4+(r-a)/l),(t=Math.min(60*t,360))<0&&(t+=360),n=(o+s)/2,[t,100*(s==o?0:n<=.5?l/(s+o):l/(2-s-o)),100*n]}function a(e){var t,n,r=e[0],a=e[1],i=e[2],o=Math.min(r,a,i),s=Math.max(r,a,i),l=s-o;return n=0==s?0:l/s*1e3/10,s==o?t=0:r==s?t=(a-i)/l:a==s?t=2+(i-r)/l:i==s&&(t=4+(r-a)/l),(t=Math.min(60*t,360))<0&&(t+=360),[t,n,s/255*1e3/10]}function i(e){var t=e[0],r=e[1],a=e[2];return[n(e)[0],100*(1/255*Math.min(t,Math.min(r,a))),100*(a=1-1/255*Math.max(t,Math.max(r,a)))]}function o(e){var t,n=e[0]/255,r=e[1]/255,a=e[2]/255;return[100*((1-n-(t=Math.min(1-n,1-r,1-a)))/(1-t)||0),100*((1-r-t)/(1-t)||0),100*((1-a-t)/(1-t)||0),100*t]}function s(e){return x[JSON.stringify(e)]}function l(e){var t=e[0]/255,n=e[1]/255,r=e[2]/255;return[100*(.4124*(t=t>.04045?Math.pow((t+.055)/1.055,2.4):t/12.92)+.3576*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)+.1805*(r=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92)),100*(.2126*t+.7152*n+.0722*r),100*(.0193*t+.1192*n+.9505*r)]}function u(e){var t=l(e),n=t[0],r=t[1],a=t[2];return r/=100,a/=108.883,n=(n/=95.047)>.008856?Math.pow(n,1/3):7.787*n+16/116,[116*(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116)-16,500*(n-r),200*(r-(a=a>.008856?Math.pow(a,1/3):7.787*a+16/116))]}function d(e){var t,n,r,a,i,o=e[0]/360,s=e[1]/100,l=e[2]/100;if(0==s)return[i=255*l,i,i];t=2*l-(n=l<.5?l*(1+s):l+s-l*s),a=[0,0,0];for(var u=0;u<3;u++)(r=o+1/3*-(u-1))<0&&r++,r>1&&r--,i=6*r<1?t+6*(n-t)*r:2*r<1?n:3*r<2?t+(n-t)*(2/3-r)*6:t,a[u]=255*i;return a}function c(e){var t=e[0]/60,n=e[1]/100,r=e[2]/100,a=Math.floor(t)%6,i=t-Math.floor(t),o=255*r*(1-n),s=255*r*(1-n*i),l=255*r*(1-n*(1-i));r*=255;switch(a){case 0:return[r,l,o];case 1:return[s,r,o];case 2:return[o,r,l];case 3:return[o,s,r];case 4:return[l,o,r];case 5:return[r,o,s]}}function f(e){var t,n,a,i,o=e[0]/360,s=e[1]/100,l=e[2]/100,u=s+l;switch(u>1&&(s/=u,l/=u),n=1-l,a=6*o-(t=Math.floor(6*o)),0!=(1&t)&&(a=1-a),i=s+a*(n-s),t){default:case 6:case 0:r=n,g=i,b=s;break;case 1:r=i,g=n,b=s;break;case 2:r=s,g=n,b=i;break;case 3:r=s,g=i,b=n;break;case 4:r=i,g=s,b=n;break;case 5:r=n,g=s,b=i}return[255*r,255*g,255*b]}function h(e){var t=e[0]/100,n=e[1]/100,r=e[2]/100,a=e[3]/100;return[255*(1-Math.min(1,t*(1-a)+a)),255*(1-Math.min(1,n*(1-a)+a)),255*(1-Math.min(1,r*(1-a)+a))]}function m(e){var t,n,r,a=e[0]/100,i=e[1]/100,o=e[2]/100;return n=-.9689*a+1.8758*i+.0415*o,r=.0557*a+-.204*i+1.057*o,t=(t=3.2406*a+-1.5372*i+-.4986*o)>.0031308?1.055*Math.pow(t,1/2.4)-.055:t*=12.92,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:n*=12.92,r=r>.0031308?1.055*Math.pow(r,1/2.4)-.055:r*=12.92,[255*(t=Math.min(Math.max(0,t),1)),255*(n=Math.min(Math.max(0,n),1)),255*(r=Math.min(Math.max(0,r),1))]}function p(e){var t=e[0],n=e[1],r=e[2];return n/=100,r/=108.883,t=(t/=95.047)>.008856?Math.pow(t,1/3):7.787*t+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(t-n),200*(n-(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116))]}function _(e){var t,n,r,a,i=e[0],o=e[1],s=e[2];return i<=8?a=(n=100*i/903.3)/100*7.787+16/116:(n=100*Math.pow((i+16)/116,3),a=Math.pow(n/100,1/3)),[t=t/95.047<=.008856?t=95.047*(o/500+a-16/116)/7.787:95.047*Math.pow(o/500+a,3),n,r=r/108.883<=.008859?r=108.883*(a-s/200-16/116)/7.787:108.883*Math.pow(a-s/200,3)]}function y(e){var t,n=e[0],r=e[1],a=e[2];return(t=360*Math.atan2(a,r)/2/Math.PI)<0&&(t+=360),[n,Math.sqrt(r*r+a*a),t]}function v(e){return m(_(e))}function M(e){var t,n=e[0],r=e[1];return t=e[2]/360*2*Math.PI,[n,r*Math.cos(t),r*Math.sin(t)]}function L(e){return k[e]}e.exports={rgb2hsl:n,rgb2hsv:a,rgb2hwb:i,rgb2cmyk:o,rgb2keyword:s,rgb2xyz:l,rgb2lab:u,rgb2lch:function(e){return y(u(e))},hsl2rgb:d,hsl2hsv:function(e){var t=e[0],n=e[1]/100,r=e[2]/100;if(0===r)return[0,0,0];return[t,100*(2*(n*=(r*=2)<=1?r:2-r)/(r+n)),100*((r+n)/2)]},hsl2hwb:function(e){return i(d(e))},hsl2cmyk:function(e){return o(d(e))},hsl2keyword:function(e){return s(d(e))},hsv2rgb:c,hsv2hsl:function(e){var t,n,r=e[0],a=e[1]/100,i=e[2]/100;return t=a*i,[r,100*(t=(t/=(n=(2-a)*i)<=1?n:2-n)||0),100*(n/=2)]},hsv2hwb:function(e){return i(c(e))},hsv2cmyk:function(e){return o(c(e))},hsv2keyword:function(e){return s(c(e))},hwb2rgb:f,hwb2hsl:function(e){return n(f(e))},hwb2hsv:function(e){return a(f(e))},hwb2cmyk:function(e){return o(f(e))},hwb2keyword:function(e){return s(f(e))},cmyk2rgb:h,cmyk2hsl:function(e){return n(h(e))},cmyk2hsv:function(e){return a(h(e))},cmyk2hwb:function(e){return i(h(e))},cmyk2keyword:function(e){return s(h(e))},keyword2rgb:L,keyword2hsl:function(e){return n(L(e))},keyword2hsv:function(e){return a(L(e))},keyword2hwb:function(e){return i(L(e))},keyword2cmyk:function(e){return o(L(e))},keyword2lab:function(e){return u(L(e))},keyword2xyz:function(e){return l(L(e))},xyz2rgb:m,xyz2lab:p,xyz2lch:function(e){return y(p(e))},lab2xyz:_,lab2rgb:v,lab2lch:y,lch2lab:M,lch2xyz:function(e){return _(M(e))},lch2rgb:function(e){return v(M(e))}};var k={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},x={};for(var w in k)x[JSON.stringify(k[w])]=w},function(e,t,n){var r=n(209);function a(e){if(e){var t=[0,0,0],n=1,a=e.match(/^#([a-fA-F0-9]{3})$/i);if(a){a=a[1];for(var i=0;i<t.length;i++)t[i]=parseInt(a[i]+a[i],16)}else if(a=e.match(/^#([a-fA-F0-9]{6})$/i)){a=a[1];for(i=0;i<t.length;i++)t[i]=parseInt(a.slice(2*i,2*i+2),16)}else if(a=e.match(/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(i=0;i<t.length;i++)t[i]=parseInt(a[i+1]);n=parseFloat(a[4])}else if(a=e.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(i=0;i<t.length;i++)t[i]=Math.round(2.55*parseFloat(a[i+1]));n=parseFloat(a[4])}else if(a=e.match(/(\w+)/)){if("transparent"==a[1])return[0,0,0,0];if(!(t=r[a[1]]))return}for(i=0;i<t.length;i++)t[i]=d(t[i],0,255);return n=n||0==n?d(n,0,1):1,t[3]=n,t}}function i(e){if(e){var t=e.match(/^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(t){var n=parseFloat(t[4]);return[d(parseInt(t[1]),0,360),d(parseFloat(t[2]),0,100),d(parseFloat(t[3]),0,100),d(isNaN(n)?1:n,0,1)]}}}function o(e){if(e){var t=e.match(/^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(t){var n=parseFloat(t[4]);return[d(parseInt(t[1]),0,360),d(parseFloat(t[2]),0,100),d(parseFloat(t[3]),0,100),d(isNaN(n)?1:n,0,1)]}}}function s(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"rgba("+e[0]+", "+e[1]+", "+e[2]+", "+t+")"}function l(e,t){return"rgba("+Math.round(e[0]/255*100)+"%, "+Math.round(e[1]/255*100)+"%, "+Math.round(e[2]/255*100)+"%, "+(t||e[3]||1)+")"}function u(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"hsla("+e[0]+", "+e[1]+"%, "+e[2]+"%, "+t+")"}function d(e,t,n){return Math.min(Math.max(t,e),n)}function c(e){var t=e.toString(16).toUpperCase();return t.length<2?"0"+t:t}e.exports={getRgba:a,getHsla:i,getRgb:function(e){var t=a(e);return t&&t.slice(0,3)},getHsl:function(e){var t=i(e);return t&&t.slice(0,3)},getHwb:o,getAlpha:function(e){var t=a(e);if(t)return t[3];if(t=i(e))return t[3];if(t=o(e))return t[3]},hexString:function(e){return"#"+c(e[0])+c(e[1])+c(e[2])},rgbString:function(e,t){if(t<1||e[3]&&e[3]<1)return s(e,t);return"rgb("+e[0]+", "+e[1]+", "+e[2]+")"},rgbaString:s,percentString:function(e,t){if(t<1||e[3]&&e[3]<1)return l(e,t);var n=Math.round(e[0]/255*100),r=Math.round(e[1]/255*100),a=Math.round(e[2]/255*100);return"rgb("+n+"%, "+r+"%, "+a+"%)"},percentaString:l,hslString:function(e,t){if(t<1||e[3]&&e[3]<1)return u(e,t);return"hsl("+e[0]+", "+e[1]+"%, "+e[2]+"%)"},hslaString:u,hwbString:function(e,t){void 0===t&&(t=void 0!==e[3]?e[3]:1);return"hwb("+e[0]+", "+e[1]+"%, "+e[2]+"%"+(void 0!==t&&1!==t?", "+t:"")+")"},keyword:function(e){return f[e.slice(0,3)]}};var f={};for(var h in r)f[r[h]]=h},function(e,t){e.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},function(e,t,n){"use strict";var r=n(4),a=n(10),i=n(3);r._set("global",{elements:{arc:{backgroundColor:r.global.defaultColor,borderColor:"#fff",borderWidth:2}}}),e.exports=a.extend({inLabelRange:function(e){var t=this._view;return!!t&&Math.pow(e-t.x,2)<Math.pow(t.radius+t.hoverRadius,2)},inRange:function(e,t){var n=this._view;if(n){for(var r=i.getAngleFromPoint(n,{x:e,y:t}),a=r.angle,o=r.distance,s=n.startAngle,l=n.endAngle;l<s;)l+=2*Math.PI;for(;a>l;)a-=2*Math.PI;for(;a<s;)a+=2*Math.PI;var u=a>=s&&a<=l,d=o>=n.innerRadius&&o<=n.outerRadius;return u&&d}return!1},getCenterPoint:function(){var e=this._view,t=(e.startAngle+e.endAngle)/2,n=(e.innerRadius+e.outerRadius)/2;return{x:e.x+Math.cos(t)*n,y:e.y+Math.sin(t)*n}},getArea:function(){var e=this._view;return Math.PI*((e.endAngle-e.startAngle)/(2*Math.PI))*(Math.pow(e.outerRadius,2)-Math.pow(e.innerRadius,2))},tooltipPosition:function(){var e=this._view,t=e.startAngle+(e.endAngle-e.startAngle)/2,n=(e.outerRadius-e.innerRadius)/2+e.innerRadius;return{x:e.x+Math.cos(t)*n,y:e.y+Math.sin(t)*n}},draw:function(){var e=this._chart.ctx,t=this._view,n=t.startAngle,r=t.endAngle;e.beginPath(),e.arc(t.x,t.y,t.outerRadius,n,r),e.arc(t.x,t.y,t.innerRadius,r,n,!0),e.closePath(),e.strokeStyle=t.borderColor,e.lineWidth=t.borderWidth,e.fillStyle=t.backgroundColor,e.fill(),e.lineJoin="bevel",t.borderWidth&&e.stroke()}})},function(e,t,n){"use strict";var r=n(4),a=n(10),i=n(3),o=r.global;r._set("global",{elements:{line:{tension:.4,backgroundColor:o.defaultColor,borderWidth:3,borderColor:o.defaultColor,borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",capBezierPoints:!0,fill:!0}}}),e.exports=a.extend({draw:function(){var e,t,n,r,a=this._view,s=this._chart.ctx,l=a.spanGaps,u=this._children.slice(),d=o.elements.line,c=-1;for(this._loop&&u.length&&u.push(u[0]),s.save(),s.lineCap=a.borderCapStyle||d.borderCapStyle,s.setLineDash&&s.setLineDash(a.borderDash||d.borderDash),s.lineDashOffset=a.borderDashOffset||d.borderDashOffset,s.lineJoin=a.borderJoinStyle||d.borderJoinStyle,s.lineWidth=a.borderWidth||d.borderWidth,s.strokeStyle=a.borderColor||o.defaultColor,s.beginPath(),c=-1,e=0;e<u.length;++e)t=u[e],n=i.previousItem(u,e),r=t._view,0===e?r.skip||(s.moveTo(r.x,r.y),c=e):(n=-1===c?n:u[c],r.skip||(c!==e-1&&!l||-1===c?s.moveTo(r.x,r.y):i.canvas.lineTo(s,n._view,t._view),c=e));s.stroke(),s.restore()}})},function(e,t,n){"use strict";var r=n(4),a=n(10),i=n(3),o=r.global.defaultColor;function s(e){var t=this._view;return!!t&&Math.abs(e-t.x)<t.radius+t.hitRadius}r._set("global",{elements:{point:{radius:3,pointStyle:"circle",backgroundColor:o,borderColor:o,borderWidth:1,hitRadius:1,hoverRadius:4,hoverBorderWidth:1}}}),e.exports=a.extend({inRange:function(e,t){var n=this._view;return!!n&&Math.pow(e-n.x,2)+Math.pow(t-n.y,2)<Math.pow(n.hitRadius+n.radius,2)},inLabelRange:s,inXRange:s,inYRange:function(e){var t=this._view;return!!t&&Math.abs(e-t.y)<t.radius+t.hitRadius},getCenterPoint:function(){var e=this._view;return{x:e.x,y:e.y}},getArea:function(){return Math.PI*Math.pow(this._view.radius,2)},tooltipPosition:function(){var e=this._view;return{x:e.x,y:e.y,padding:e.radius+e.borderWidth}},draw:function(e){var t=this._view,n=this._model,a=this._chart.ctx,s=t.pointStyle,l=t.radius,u=t.x,d=t.y,c=i.color,f=0;t.skip||(a.strokeStyle=t.borderColor||o,a.lineWidth=i.valueOrDefault(t.borderWidth,r.global.elements.point.borderWidth),a.fillStyle=t.backgroundColor||o,void 0!==e&&(n.x<e.left||1.01*e.right<n.x||n.y<e.top||1.01*e.bottom<n.y)&&(n.x<e.left?f=(u-n.x)/(e.left-n.x):1.01*e.right<n.x?f=(n.x-u)/(n.x-e.right):n.y<e.top?f=(d-n.y)/(e.top-n.y):1.01*e.bottom<n.y&&(f=(n.y-d)/(n.y-e.bottom)),f=Math.round(100*f)/100,a.strokeStyle=c(a.strokeStyle).alpha(f).rgbString(),a.fillStyle=c(a.fillStyle).alpha(f).rgbString()),i.canvas.drawPoint(a,s,l,u,d))}})},function(e,t,n){"use strict";var r=n(4),a=n(10);function i(e){return void 0!==e._view.width}function o(e){var t,n,r,a,o=e._view;if(i(e)){var s=o.width/2;t=o.x-s,n=o.x+s,r=Math.min(o.y,o.base),a=Math.max(o.y,o.base)}else{var l=o.height/2;t=Math.min(o.x,o.base),n=Math.max(o.x,o.base),r=o.y-l,a=o.y+l}return{left:t,top:r,right:n,bottom:a}}r._set("global",{elements:{rectangle:{backgroundColor:r.global.defaultColor,borderColor:r.global.defaultColor,borderSkipped:"bottom",borderWidth:0}}}),e.exports=a.extend({draw:function(){var e,t,n,r,a,i,o,s=this._chart.ctx,l=this._view,u=l.borderWidth;if(l.horizontal?(e=l.base,t=l.x,n=l.y-l.height/2,r=l.y+l.height/2,a=t>e?1:-1,i=1,o=l.borderSkipped||"left"):(e=l.x-l.width/2,t=l.x+l.width/2,n=l.y,a=1,i=(r=l.base)>n?1:-1,o=l.borderSkipped||"bottom"),u){var d=Math.min(Math.abs(e-t),Math.abs(n-r)),c=(u=u>d?d:u)/2,f=e+("left"!==o?c*a:0),h=t+("right"!==o?-c*a:0),m=n+("top"!==o?c*i:0),p=r+("bottom"!==o?-c*i:0);f!==h&&(n=m,r=p),m!==p&&(e=f,t=h)}s.beginPath(),s.fillStyle=l.backgroundColor,s.strokeStyle=l.borderColor,s.lineWidth=u;var _=[[e,r],[e,n],[t,n],[t,r]],y=["bottom","left","top","right"].indexOf(o,0);function g(e){return _[(y+e)%4]}-1===y&&(y=0);var v=g(0);s.moveTo(v[0],v[1]);for(var M=1;M<4;M++)v=g(M),s.lineTo(v[0],v[1]);s.fill(),u&&s.stroke()},height:function(){var e=this._view;return e.base-e.y},inRange:function(e,t){var n=!1;if(this._view){var r=o(this);n=e>=r.left&&e<=r.right&&t>=r.top&&t<=r.bottom}return n},inLabelRange:function(e,t){if(!this._view)return!1;var n=o(this);return i(this)?e>=n.left&&e<=n.right:t>=n.top&&t<=n.bottom},inXRange:function(e){var t=o(this);return e>=t.left&&e<=t.right},inYRange:function(e){var t=o(this);return e>=t.top&&e<=t.bottom},getCenterPoint:function(){var e,t,n=this._view;return i(this)?(e=n.x,t=(n.y+n.base)/2):(e=(n.x+n.base)/2,t=n.y),{x:e,y:t}},getArea:function(){var e=this._view;return e.width*Math.abs(e.y-e.base)},tooltipPosition:function(){var e=this._view;return{x:e.x,y:e.y}}})},function(e,t){e.exports={acquireContext:function(e){return e&&e.canvas&&(e=e.canvas),e&&e.getContext("2d")||null}}},function(e,t,n){"use strict";var r=n(3),a="$chartjs",i="chartjs-",o=i+"render-monitor",s=i+"render-animation",l=["animationstart","webkitAnimationStart"],u={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"};function d(e,t){var n=r.getStyle(e,t),a=n&&n.match(/^(\d+)(\.\d+)?px$/);return a?Number(a[1]):void 0}var c=!!function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("e",null,t)}catch(e){}return e}()&&{passive:!0};function f(e,t,n){e.addEventListener(t,n,c)}function h(e,t,n){e.removeEventListener(t,n,c)}function m(e,t,n,r,a){return{type:e,chart:t,native:a||null,x:void 0!==n?n:null,y:void 0!==r?r:null}}function p(e,t,n){var u=e[a]||(e[a]={}),d=u.resizer=function(e){var t=document.createElement("div"),n=i+"size-monitor",r="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1;";t.style.cssText=r,t.className=n,t.innerHTML='<div class="'+n+'-expand" style="'+r+'"><div style="position:absolute;width:1000000px;height:1000000px;left:0;top:0"></div></div><div class="'+n+'-shrink" style="'+r+'"><div style="position:absolute;width:200%;height:200%;left:0; top:0"></div></div>';var a=t.childNodes[0],o=t.childNodes[1];t._reset=function(){a.scrollLeft=1e6,a.scrollTop=1e6,o.scrollLeft=1e6,o.scrollTop=1e6};var s=function(){t._reset(),e()};return f(a,"scroll",s.bind(a,"expand")),f(o,"scroll",s.bind(o,"shrink")),t}(function(e,t){var n=!1,a=[];return function(){a=Array.prototype.slice.call(arguments),t=t||this,n||(n=!0,r.requestAnimFrame.call(window,function(){n=!1,e.apply(t,a)}))}}(function(){if(u.resizer)return t(m("resize",n))}));!function(e,t){var n=e[a]||(e[a]={}),i=n.renderProxy=function(e){e.animationName===s&&t()};r.each(l,function(t){f(e,t,i)}),n.reflow=!!e.offsetParent,e.classList.add(o)}(e,function(){if(u.resizer){var t=e.parentNode;t&&t!==d.parentNode&&t.insertBefore(d,t.firstChild),d._reset()}})}function _(e){var t=e[a]||{},n=t.resizer;delete t.resizer,function(e){var t=e[a]||{},n=t.renderProxy;n&&(r.each(l,function(t){h(e,t,n)}),delete t.renderProxy),e.classList.remove(o)}(e),n&&n.parentNode&&n.parentNode.removeChild(n)}e.exports={_enabled:"undefined"!=typeof window&&"undefined"!=typeof document,initialize:function(){var e="from{opacity:0.99}to{opacity:1}";!function(e,t){var n=e._style||document.createElement("style");e._style||(e._style=n,t="/* Chart.js */\n"+t,n.setAttribute("type","text/css"),document.getElementsByTagName("head")[0].appendChild(n)),n.appendChild(document.createTextNode(t))}(this,"@-webkit-keyframes "+s+"{"+e+"}@keyframes "+s+"{"+e+"}."+o+"{-webkit-animation:"+s+" 0.001s;animation:"+s+" 0.001s;}")},acquireContext:function(e,t){"string"==typeof e?e=document.getElementById(e):e.length&&(e=e[0]),e&&e.canvas&&(e=e.canvas);var n=e&&e.getContext&&e.getContext("2d");return n&&n.canvas===e?(function(e,t){var n=e.style,r=e.getAttribute("height"),i=e.getAttribute("width");if(e[a]={initial:{height:r,width:i,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",null===i||""===i){var o=d(e,"width");void 0!==o&&(e.width=o)}if(null===r||""===r)if(""===e.style.height)e.height=e.width/(t.options.aspectRatio||2);else{var s=d(e,"height");void 0!==o&&(e.height=s)}}(e,t),n):null},releaseContext:function(e){var t=e.canvas;if(t[a]){var n=t[a].initial;["height","width"].forEach(function(e){var a=n[e];r.isNullOrUndef(a)?t.removeAttribute(e):t.setAttribute(e,a)}),r.each(n.style||{},function(e,n){t.style[n]=e}),t.width=t.width,delete t[a]}},addEventListener:function(e,t,n){var i=e.canvas;if("resize"!==t){var o=n[a]||(n[a]={});f(i,t,(o.proxies||(o.proxies={}))[e.id+"_"+t]=function(t){n(function(e,t){var n=u[e.type]||e.type,a=r.getRelativePosition(e,t);return m(n,t,a.x,a.y,e)}(t,e))})}else p(i,n,e)},removeEventListener:function(e,t,n){var r=e.canvas;if("resize"!==t){var i=((n[a]||{}).proxies||{})[e.id+"_"+t];i&&h(r,t,i)}else _(r)}},r.addEvent=f,r.removeEvent=h},function(e,t,n){"use strict";var r=n(4),a=n(10),i=n(3);r._set("global",{animation:{duration:1e3,easing:"easeOutQuart",onProgress:i.noop,onComplete:i.noop}}),e.exports=function(e){e.Animation=a.extend({chart:null,currentStep:0,numSteps:60,easing:"",render:null,onAnimationProgress:null,onAnimationComplete:null}),e.animationService={frameDuration:17,animations:[],dropFrames:0,request:null,addAnimation:function(e,t,n,r){var a,i,o=this.animations;for(t.chart=e,r||(e.animating=!0),a=0,i=o.length;a<i;++a)if(o[a].chart===e)return void(o[a]=t);o.push(t),1===o.length&&this.requestAnimationFrame()},cancelAnimation:function(e){var t=i.findIndex(this.animations,function(t){return t.chart===e});-1!==t&&(this.animations.splice(t,1),e.animating=!1)},requestAnimationFrame:function(){var e=this;null===e.request&&(e.request=i.requestAnimFrame.call(window,function(){e.request=null,e.startDigest()}))},startDigest:function(){var e=this,t=Date.now(),n=0;e.dropFrames>1&&(n=Math.floor(e.dropFrames),e.dropFrames=e.dropFrames%1),e.advance(1+n);var r=Date.now();e.dropFrames+=(r-t)/e.frameDuration,e.animations.length>0&&e.requestAnimationFrame()},advance:function(e){for(var t,n,r=this.animations,a=0;a<r.length;)n=(t=r[a]).chart,t.currentStep=(t.currentStep||0)+e,t.currentStep=Math.min(t.currentStep,t.numSteps),i.callback(t.render,[n,t],n),i.callback(t.onAnimationProgress,[t],n),t.currentStep>=t.numSteps?(i.callback(t.onAnimationComplete,[t],n),n.animating=!1,r.splice(a,1)):++a}},Object.defineProperty(e.Animation.prototype,"animationObject",{get:function(){return this}}),Object.defineProperty(e.Animation.prototype,"chartInstance",{get:function(){return this.chart},set:function(e){this.chart=e}})}},function(e,t,n){"use strict";var r=n(4),a=n(3),i=n(25),o=n(12),s=n(26),l=n(27);e.exports=function(e){function t(e){return"top"===e||"bottom"===e}e.types={},e.instances={},e.controllers={},a.extend(e.prototype,{construct:function(t,n){var i=this;n=function(e){var t=(e=e||{}).data=e.data||{};return t.datasets=t.datasets||[],t.labels=t.labels||[],e.options=a.configMerge(r.global,r[e.type],e.options||{}),e}(n);var o=s.acquireContext(t,n),l=o&&o.canvas,u=l&&l.height,d=l&&l.width;i.id=a.uid(),i.ctx=o,i.canvas=l,i.config=n,i.width=d,i.height=u,i.aspectRatio=u?d/u:null,i.options=n.options,i._bufferedRender=!1,i.chart=i,i.controller=i,e.instances[i.id]=i,Object.defineProperty(i,"data",{get:function(){return i.config.data},set:function(e){i.config.data=e}}),o&&l?(i.initialize(),i.update()):console.error("Failed to create chart: can't acquire context from the given item")},initialize:function(){var e=this;return l.notify(e,"beforeInit"),a.retinaScale(e,e.options.devicePixelRatio),e.bindEvents(),e.options.responsive&&e.resize(!0),e.ensureScalesHaveIDs(),e.buildOrUpdateScales(),e.initToolTip(),l.notify(e,"afterInit"),e},clear:function(){return a.canvas.clear(this),this},stop:function(){return e.animationService.cancelAnimation(this),this},resize:function(e){var t=this,n=t.options,r=t.canvas,i=n.maintainAspectRatio&&t.aspectRatio||null,o=Math.max(0,Math.floor(a.getMaximumWidth(r))),s=Math.max(0,Math.floor(i?o/i:a.getMaximumHeight(r)));if((t.width!==o||t.height!==s)&&(r.width=t.width=o,r.height=t.height=s,r.style.width=o+"px",r.style.height=s+"px",a.retinaScale(t,n.devicePixelRatio),!e)){var u={width:o,height:s};l.notify(t,"resize",[u]),t.options.onResize&&t.options.onResize(t,u),t.stop(),t.update(t.options.responsiveAnimationDuration)}},ensureScalesHaveIDs:function(){var e=this.options,t=e.scales||{},n=e.scale;a.each(t.xAxes,function(e,t){e.id=e.id||"x-axis-"+t}),a.each(t.yAxes,function(e,t){e.id=e.id||"y-axis-"+t}),n&&(n.id=n.id||"scale")},buildOrUpdateScales:function(){var n=this,r=n.options,i=n.scales||{},o=[],s=Object.keys(i).reduce(function(e,t){return e[t]=!1,e},{});r.scales&&(o=o.concat((r.scales.xAxes||[]).map(function(e){return{options:e,dtype:"category",dposition:"bottom"}}),(r.scales.yAxes||[]).map(function(e){return{options:e,dtype:"linear",dposition:"left"}}))),r.scale&&o.push({options:r.scale,dtype:"radialLinear",isDefault:!0,dposition:"chartArea"}),a.each(o,function(r){var o=r.options,l=o.id,u=a.valueOrDefault(o.type,r.dtype);t(o.position)!==t(r.dposition)&&(o.position=r.dposition),s[l]=!0;var d=null;if(l in i&&i[l].type===u)(d=i[l]).options=o,d.ctx=n.ctx,d.chart=n;else{var c=e.scaleService.getScaleConstructor(u);if(!c)return;d=new c({id:l,type:u,options:o,ctx:n.ctx,chart:n}),i[d.id]=d}d.mergeTicksOptions(),r.isDefault&&(n.scale=d)}),a.each(s,function(e,t){e||delete i[t]}),n.scales=i,e.scaleService.addScalesToLayout(this)},buildOrUpdateControllers:function(){var t=this,n=[],r=[];return a.each(t.data.datasets,function(a,i){var o=t.getDatasetMeta(i),s=a.type||t.config.type;if(o.type&&o.type!==s&&(t.destroyDatasetMeta(i),o=t.getDatasetMeta(i)),o.type=s,n.push(o.type),o.controller)o.controller.updateIndex(i),o.controller.linkScales();else{var l=e.controllers[o.type];if(void 0===l)throw new Error('"'+o.type+'" is not a chart type.');o.controller=new l(t,i),r.push(o.controller)}},t),r},resetElements:function(){var e=this;a.each(e.data.datasets,function(t,n){e.getDatasetMeta(n).controller.reset()},e)},reset:function(){this.resetElements(),this.tooltip.initialize()},update:function(t){var n=this;if(t&&"object"==typeof t||(t={duration:t,lazy:arguments[1]}),function(t){var n=t.options;a.each(t.scales,function(e){o.removeBox(t,e)}),n=a.configMerge(e.defaults.global,e.defaults[t.config.type],n),t.options=t.config.options=n,t.ensureScalesHaveIDs(),t.buildOrUpdateScales(),t.tooltip._options=n.tooltips,t.tooltip.initialize()}(n),l._invalidate(n),!1!==l.notify(n,"beforeUpdate")){n.tooltip._data=n.data;var r=n.buildOrUpdateControllers();a.each(n.data.datasets,function(e,t){n.getDatasetMeta(t).controller.buildOrUpdateElements()},n),n.updateLayout(),n.options.animation&&n.options.animation.duration&&a.each(r,function(e){e.reset()}),n.updateDatasets(),n.tooltip.initialize(),n.lastActive=[],l.notify(n,"afterUpdate"),n._bufferedRender?n._bufferedRequest={duration:t.duration,easing:t.easing,lazy:t.lazy}:n.render(t)}},updateLayout:function(){!1!==l.notify(this,"beforeLayout")&&(o.update(this,this.width,this.height),l.notify(this,"afterScaleUpdate"),l.notify(this,"afterLayout"))},updateDatasets:function(){if(!1!==l.notify(this,"beforeDatasetsUpdate")){for(var e=0,t=this.data.datasets.length;e<t;++e)this.updateDataset(e);l.notify(this,"afterDatasetsUpdate")}},updateDataset:function(e){var t=this.getDatasetMeta(e),n={meta:t,index:e};!1!==l.notify(this,"beforeDatasetUpdate",[n])&&(t.controller.update(),l.notify(this,"afterDatasetUpdate",[n]))},render:function(t){var n=this;t&&"object"==typeof t||(t={duration:t,lazy:arguments[1]});var r=t.duration,i=t.lazy;if(!1!==l.notify(n,"beforeRender")){var o=n.options.animation,s=function(e){l.notify(n,"afterRender"),a.callback(o&&o.onComplete,[e],n)};if(o&&(void 0!==r&&0!==r||void 0===r&&0!==o.duration)){var u=new e.Animation({numSteps:(r||o.duration)/16.66,easing:t.easing||o.easing,render:function(e,t){var n=a.easing.effects[t.easing],r=t.currentStep,i=r/t.numSteps;e.draw(n(i),i,r)},onAnimationProgress:o.onProgress,onAnimationComplete:s});e.animationService.addAnimation(n,u,r,i)}else n.draw(),s(new e.Animation({numSteps:0,chart:n}));return n}},draw:function(e){var t=this;t.clear(),a.isNullOrUndef(e)&&(e=1),t.transition(e),!1!==l.notify(t,"beforeDraw",[e])&&(a.each(t.boxes,function(e){e.draw(t.chartArea)},t),t.scale&&t.scale.draw(),t.drawDatasets(e),t._drawTooltip(e),l.notify(t,"afterDraw",[e]))},transition:function(e){for(var t=0,n=(this.data.datasets||[]).length;t<n;++t)this.isDatasetVisible(t)&&this.getDatasetMeta(t).controller.transition(e);this.tooltip.transition(e)},drawDatasets:function(e){var t=this;if(!1!==l.notify(t,"beforeDatasetsDraw",[e])){for(var n=(t.data.datasets||[]).length-1;n>=0;--n)t.isDatasetVisible(n)&&t.drawDataset(n,e);l.notify(t,"afterDatasetsDraw",[e])}},drawDataset:function(e,t){var n=this.getDatasetMeta(e),r={meta:n,index:e,easingValue:t};!1!==l.notify(this,"beforeDatasetDraw",[r])&&(n.controller.draw(t),l.notify(this,"afterDatasetDraw",[r]))},_drawTooltip:function(e){var t=this.tooltip,n={tooltip:t,easingValue:e};!1!==l.notify(this,"beforeTooltipDraw",[n])&&(t.draw(),l.notify(this,"afterTooltipDraw",[n]))},getElementAtEvent:function(e){return i.modes.single(this,e)},getElementsAtEvent:function(e){return i.modes.label(this,e,{intersect:!0})},getElementsAtXAxis:function(e){return i.modes["x-axis"](this,e,{intersect:!0})},getElementsAtEventForMode:function(e,t,n){var r=i.modes[t];return"function"==typeof r?r(this,e,n):[]},getDatasetAtEvent:function(e){return i.modes.dataset(this,e,{intersect:!0})},getDatasetMeta:function(e){var t=this.data.datasets[e];t._meta||(t._meta={});var n=t._meta[this.id];return n||(n=t._meta[this.id]={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null}),n},getVisibleDatasetCount:function(){for(var e=0,t=0,n=this.data.datasets.length;t<n;++t)this.isDatasetVisible(t)&&e++;return e},isDatasetVisible:function(e){var t=this.getDatasetMeta(e);return"boolean"==typeof t.hidden?!t.hidden:!this.data.datasets[e].hidden},generateLegend:function(){return this.options.legendCallback(this)},destroyDatasetMeta:function(e){var t=this.id,n=this.data.datasets[e],r=n._meta&&n._meta[t];r&&(r.controller.destroy(),delete n._meta[t])},destroy:function(){var t,n,r=this,i=r.canvas;for(r.stop(),t=0,n=r.data.datasets.length;t<n;++t)r.destroyDatasetMeta(t);i&&(r.unbindEvents(),a.canvas.clear(r),s.releaseContext(r.ctx),r.canvas=null,r.ctx=null),l.notify(r,"destroy"),delete e.instances[r.id]},toBase64Image:function(){return this.canvas.toDataURL.apply(this.canvas,arguments)},initToolTip:function(){var t=this;t.tooltip=new e.Tooltip({_chart:t,_chartInstance:t,_data:t.data,_options:t.options.tooltips},t)},bindEvents:function(){var e=this,t=e._listeners={},n=function(){e.eventHandler.apply(e,arguments)};a.each(e.options.events,function(r){s.addEventListener(e,r,n),t[r]=n}),e.options.responsive&&(n=function(){e.resize()},s.addEventListener(e,"resize",n),t.resize=n)},unbindEvents:function(){var e=this,t=e._listeners;t&&(delete e._listeners,a.each(t,function(t,n){s.removeEventListener(e,n,t)}))},updateHoverStyle:function(e,t,n){var r,a,i,o=n?"setHoverStyle":"removeHoverStyle";for(a=0,i=e.length;a<i;++a)(r=e[a])&&this.getDatasetMeta(r._datasetIndex).controller[o](r)},eventHandler:function(e){var t=this,n=t.tooltip;if(!1!==l.notify(t,"beforeEvent",[e])){t._bufferedRender=!0,t._bufferedRequest=null;var r=t.handleEvent(e);n&&(r=n._start?n.handleEvent(e):r|n.handleEvent(e)),l.notify(t,"afterEvent",[e]);var a=t._bufferedRequest;return a?t.render(a):r&&!t.animating&&(t.stop(),t.render(t.options.hover.animationDuration,!0)),t._bufferedRender=!1,t._bufferedRequest=null,t}},handleEvent:function(e){var t,n=this,r=n.options||{},i=r.hover;return n.lastActive=n.lastActive||[],"mouseout"===e.type?n.active=[]:n.active=n.getElementsAtEventForMode(e,i.mode,i),a.callback(r.onHover||r.hover.onHover,[e.native,n.active],n),"mouseup"!==e.type&&"click"!==e.type||r.onClick&&r.onClick.call(n,e.native,n.active),n.lastActive.length&&n.updateHoverStyle(n.lastActive,i.mode,!1),n.active.length&&i.mode&&n.updateHoverStyle(n.active,i.mode,!0),t=!a.arrayEquals(n.active,n.lastActive),n.lastActive=n.active,t}}),e.Controller=e}},function(e,t,n){"use strict";var r=n(3);e.exports=function(e){var t=["push","pop","shift","splice","unshift"];function n(e,n){var r=e._chartjs;if(r){var a=r.listeners,i=a.indexOf(n);-1!==i&&a.splice(i,1),a.length>0||(t.forEach(function(t){delete e[t]}),delete e._chartjs)}}e.DatasetController=function(e,t){this.initialize(e,t)},r.extend(e.DatasetController.prototype,{datasetElementType:null,dataElementType:null,initialize:function(e,t){this.chart=e,this.index=t,this.linkScales(),this.addElements()},updateIndex:function(e){this.index=e},linkScales:function(){var e=this,t=e.getMeta(),n=e.getDataset();null!==t.xAxisID&&t.xAxisID in e.chart.scales||(t.xAxisID=n.xAxisID||e.chart.options.scales.xAxes[0].id),null!==t.yAxisID&&t.yAxisID in e.chart.scales||(t.yAxisID=n.yAxisID||e.chart.options.scales.yAxes[0].id)},getDataset:function(){return this.chart.data.datasets[this.index]},getMeta:function(){return this.chart.getDatasetMeta(this.index)},getScaleForId:function(e){return this.chart.scales[e]},reset:function(){this.update(!0)},destroy:function(){this._data&&n(this._data,this)},createMetaDataset:function(){var e=this.datasetElementType;return e&&new e({_chart:this.chart,_datasetIndex:this.index})},createMetaData:function(e){var t=this.dataElementType;return t&&new t({_chart:this.chart,_datasetIndex:this.index,_index:e})},addElements:function(){var e,t,n=this.getMeta(),r=this.getDataset().data||[],a=n.data;for(e=0,t=r.length;e<t;++e)a[e]=a[e]||this.createMetaData(e);n.dataset=n.dataset||this.createMetaDataset()},addElementAndReset:function(e){var t=this.createMetaData(e);this.getMeta().data.splice(e,0,t),this.updateElement(t,e,!0)},buildOrUpdateElements:function(){var e=this,a=e.getDataset(),i=a.data||(a.data=[]);e._data!==i&&(e._data&&n(e._data,e),function(e,n){e._chartjs?e._chartjs.listeners.push(n):(Object.defineProperty(e,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[n]}}),t.forEach(function(t){var n="onData"+t.charAt(0).toUpperCase()+t.slice(1),a=e[t];Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:function(){var t=Array.prototype.slice.call(arguments),i=a.apply(this,t);return r.each(e._chartjs.listeners,function(e){"function"==typeof e[n]&&e[n].apply(e,t)}),i}})}))}(i,e),e._data=i),e.resyncElements()},update:r.noop,transition:function(e){for(var t=this.getMeta(),n=t.data||[],r=n.length,a=0;a<r;++a)n[a].transition(e);t.dataset&&t.dataset.transition(e)},draw:function(){var e=this.getMeta(),t=e.data||[],n=t.length,r=0;for(e.dataset&&e.dataset.draw();r<n;++r)t[r].draw()},removeHoverStyle:function(e,t){var n=this.chart.data.datasets[e._datasetIndex],a=e._index,i=e.custom||{},o=r.valueAtIndexOrDefault,s=e._model;s.backgroundColor=i.backgroundColor?i.backgroundColor:o(n.backgroundColor,a,t.backgroundColor),s.borderColor=i.borderColor?i.borderColor:o(n.borderColor,a,t.borderColor),s.borderWidth=i.borderWidth?i.borderWidth:o(n.borderWidth,a,t.borderWidth)},setHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],n=e._index,a=e.custom||{},i=r.valueAtIndexOrDefault,o=r.getHoverColor,s=e._model;s.backgroundColor=a.hoverBackgroundColor?a.hoverBackgroundColor:i(t.hoverBackgroundColor,n,o(s.backgroundColor)),s.borderColor=a.hoverBorderColor?a.hoverBorderColor:i(t.hoverBorderColor,n,o(s.borderColor)),s.borderWidth=a.hoverBorderWidth?a.hoverBorderWidth:i(t.hoverBorderWidth,n,s.borderWidth)},resyncElements:function(){var e=this.getMeta(),t=this.getDataset().data,n=e.data.length,r=t.length;r<n?e.data.splice(r,n-r):r>n&&this.insertElements(n,r-n)},insertElements:function(e,t){for(var n=0;n<t;++n)this.addElementAndReset(e+n)},onDataPush:function(){this.insertElements(this.getDataset().data.length-1,arguments.length)},onDataPop:function(){this.getMeta().data.pop()},onDataShift:function(){this.getMeta().data.shift()},onDataSplice:function(e,t){this.getMeta().data.splice(e,t),this.insertElements(e,arguments.length-2)},onDataUnshift:function(){this.insertElements(0,arguments.length)}}),e.DatasetController.extend=r.inherits}},function(e,t,n){"use strict";var r=n(4),a=n(3),i=n(12);e.exports=function(e){e.scaleService={constructors:{},defaults:{},registerScaleType:function(e,t,n){this.constructors[e]=t,this.defaults[e]=a.clone(n)},getScaleConstructor:function(e){return this.constructors.hasOwnProperty(e)?this.constructors[e]:void 0},getScaleDefaults:function(e){return this.defaults.hasOwnProperty(e)?a.merge({},[r.scale,this.defaults[e]]):{}},updateScaleDefaults:function(e,t){this.defaults.hasOwnProperty(e)&&(this.defaults[e]=a.extend(this.defaults[e],t))},addScalesToLayout:function(e){a.each(e.scales,function(t){t.fullWidth=t.options.fullWidth,t.position=t.options.position,t.weight=t.options.weight,i.addBox(e,t)})}}}},function(e,t,n){"use strict";var r=n(4),a=n(10),i=n(3),o=n(13);function s(e){var t,n,r=[];for(t=0,n=e.length;t<n;++t)r.push(e[t].label);return r}function l(e,t,n){var r=e.getPixelForTick(t);return n&&(r-=0===t?(e.getPixelForTick(1)-r)/2:(r-e.getPixelForTick(t-1))/2),r}r._set("scale",{display:!0,position:"left",offset:!1,gridLines:{display:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickMarkLength:10,zeroLineWidth:1,zeroLineColor:"rgba(0,0,0,0.25)",zeroLineBorderDash:[],zeroLineBorderDashOffset:0,offsetGridLines:!1,borderDash:[],borderDashOffset:0},scaleLabel:{display:!1,labelString:"",lineHeight:1.2,padding:{top:4,bottom:4}},ticks:{beginAtZero:!1,minRotation:0,maxRotation:50,mirror:!1,padding:0,reverse:!1,display:!0,autoSkip:!0,autoSkipPadding:0,labelOffset:0,callback:o.formatters.values,minor:{},major:{}}}),e.exports=function(e){function t(e,t,n){return i.isArray(t)?i.longestText(e,n,t):e.measureText(t).width}function n(e){var t=i.valueOrDefault,n=r.global,a=t(e.fontSize,n.defaultFontSize),o=t(e.fontStyle,n.defaultFontStyle),s=t(e.fontFamily,n.defaultFontFamily);return{size:a,style:o,family:s,font:i.fontString(a,o,s)}}function o(e){return i.options.toLineHeight(i.valueOrDefault(e.lineHeight,1.2),i.valueOrDefault(e.fontSize,r.global.defaultFontSize))}e.Scale=a.extend({getPadding:function(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}},getTicks:function(){return this._ticks},mergeTicksOptions:function(){var e=this.options.ticks;for(var t in!1===e.minor&&(e.minor={display:!1}),!1===e.major&&(e.major={display:!1}),e)"major"!==t&&"minor"!==t&&(void 0===e.minor[t]&&(e.minor[t]=e[t]),void 0===e.major[t]&&(e.major[t]=e[t]))},beforeUpdate:function(){i.callback(this.options.beforeUpdate,[this])},update:function(e,t,n){var r,a,o,s,l,u,d=this;for(d.beforeUpdate(),d.maxWidth=e,d.maxHeight=t,d.margins=i.extend({left:0,right:0,top:0,bottom:0},n),d.longestTextCache=d.longestTextCache||{},d.beforeSetDimensions(),d.setDimensions(),d.afterSetDimensions(),d.beforeDataLimits(),d.determineDataLimits(),d.afterDataLimits(),d.beforeBuildTicks(),l=d.buildTicks()||[],d.afterBuildTicks(),d.beforeTickToLabelConversion(),o=d.convertTicksToLabels(l)||d.ticks,d.afterTickToLabelConversion(),d.ticks=o,r=0,a=o.length;r<a;++r)s=o[r],(u=l[r])?u.label=s:l.push(u={label:s,major:!1});return d._ticks=l,d.beforeCalculateTickRotation(),d.calculateTickRotation(),d.afterCalculateTickRotation(),d.beforeFit(),d.fit(),d.afterFit(),d.afterUpdate(),d.minSize},afterUpdate:function(){i.callback(this.options.afterUpdate,[this])},beforeSetDimensions:function(){i.callback(this.options.beforeSetDimensions,[this])},setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0},afterSetDimensions:function(){i.callback(this.options.afterSetDimensions,[this])},beforeDataLimits:function(){i.callback(this.options.beforeDataLimits,[this])},determineDataLimits:i.noop,afterDataLimits:function(){i.callback(this.options.afterDataLimits,[this])},beforeBuildTicks:function(){i.callback(this.options.beforeBuildTicks,[this])},buildTicks:i.noop,afterBuildTicks:function(){i.callback(this.options.afterBuildTicks,[this])},beforeTickToLabelConversion:function(){i.callback(this.options.beforeTickToLabelConversion,[this])},convertTicksToLabels:function(){var e=this.options.ticks;this.ticks=this.ticks.map(e.userCallback||e.callback,this)},afterTickToLabelConversion:function(){i.callback(this.options.afterTickToLabelConversion,[this])},beforeCalculateTickRotation:function(){i.callback(this.options.beforeCalculateTickRotation,[this])},calculateTickRotation:function(){var e=this,t=e.ctx,r=e.options.ticks,a=s(e._ticks),o=n(r);t.font=o.font;var l=r.minRotation||0;if(a.length&&e.options.display&&e.isHorizontal())for(var u,d=i.longestText(t,o.font,a,e.longestTextCache),c=d,f=e.getPixelForTick(1)-e.getPixelForTick(0)-6;c>f&&l<r.maxRotation;){var h=i.toRadians(l);if(u=Math.cos(h),Math.sin(h)*d>e.maxHeight){l--;break}l++,c=u*d}e.labelRotation=l},afterCalculateTickRotation:function(){i.callback(this.options.afterCalculateTickRotation,[this])},beforeFit:function(){i.callback(this.options.beforeFit,[this])},fit:function(){var e=this,r=e.minSize={width:0,height:0},a=s(e._ticks),l=e.options,u=l.ticks,d=l.scaleLabel,c=l.gridLines,f=l.display,h=e.isHorizontal(),m=n(u),p=l.gridLines.tickMarkLength;if(r.width=h?e.isFullWidth()?e.maxWidth-e.margins.left-e.margins.right:e.maxWidth:f&&c.drawTicks?p:0,r.height=h?f&&c.drawTicks?p:0:e.maxHeight,d.display&&f){var _=o(d)+i.options.toPadding(d.padding).height;h?r.height+=_:r.width+=_}if(u.display&&f){var y=i.longestText(e.ctx,m.font,a,e.longestTextCache),g=i.numberOfLabelLines(a),v=.5*m.size,M=e.options.ticks.padding;if(h){e.longestLabelWidth=y;var b=i.toRadians(e.labelRotation),L=Math.cos(b),k=Math.sin(b)*y+m.size*g+v*(g-1)+v;r.height=Math.min(e.maxHeight,r.height+k+M),e.ctx.font=m.font;var x=t(e.ctx,a[0],m.font),w=t(e.ctx,a[a.length-1],m.font);0!==e.labelRotation?(e.paddingLeft="bottom"===l.position?L*x+3:L*v+3,e.paddingRight="bottom"===l.position?L*v+3:L*w+3):(e.paddingLeft=x/2+3,e.paddingRight=w/2+3)}else u.mirror?y=0:y+=M+v,r.width=Math.min(e.maxWidth,r.width+y),e.paddingTop=m.size/2,e.paddingBottom=m.size/2}e.handleMargins(),e.width=r.width,e.height=r.height},handleMargins:function(){var e=this;e.margins&&(e.paddingLeft=Math.max(e.paddingLeft-e.margins.left,0),e.paddingTop=Math.max(e.paddingTop-e.margins.top,0),e.paddingRight=Math.max(e.paddingRight-e.margins.right,0),e.paddingBottom=Math.max(e.paddingBottom-e.margins.bottom,0))},afterFit:function(){i.callback(this.options.afterFit,[this])},isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},isFullWidth:function(){return this.options.fullWidth},getRightValue:function(e){if(i.isNullOrUndef(e))return NaN;if("number"==typeof e&&!isFinite(e))return NaN;if(e)if(this.isHorizontal()){if(void 0!==e.x)return this.getRightValue(e.x)}else if(void 0!==e.y)return this.getRightValue(e.y);return e},getLabelForIndex:i.noop,getPixelForValue:i.noop,getValueForPixel:i.noop,getPixelForTick:function(e){var t=this,n=t.options.offset;if(t.isHorizontal()){var r=(t.width-(t.paddingLeft+t.paddingRight))/Math.max(t._ticks.length-(n?0:1),1),a=r*e+t.paddingLeft;n&&(a+=r/2);var i=t.left+Math.round(a);return i+=t.isFullWidth()?t.margins.left:0}var o=t.height-(t.paddingTop+t.paddingBottom);return t.top+e*(o/(t._ticks.length-1))},getPixelForDecimal:function(e){var t=this;if(t.isHorizontal()){var n=(t.width-(t.paddingLeft+t.paddingRight))*e+t.paddingLeft,r=t.left+Math.round(n);return r+=t.isFullWidth()?t.margins.left:0}return t.top+e*t.height},getBasePixel:function(){return this.getPixelForValue(this.getBaseValue())},getBaseValue:function(){var e=this.min,t=this.max;return this.beginAtZero?0:e<0&&t<0?t:e>0&&t>0?e:0},_autoSkip:function(e){var t,n,r,a,o=this,s=o.isHorizontal(),l=o.options.ticks.minor,u=e.length,d=i.toRadians(o.labelRotation),c=Math.cos(d),f=o.longestLabelWidth*c,h=[];for(l.maxTicksLimit&&(a=l.maxTicksLimit),s&&(t=!1,(f+l.autoSkipPadding)*u>o.width-(o.paddingLeft+o.paddingRight)&&(t=1+Math.floor((f+l.autoSkipPadding)*u/(o.width-(o.paddingLeft+o.paddingRight)))),a&&u>a&&(t=Math.max(t,Math.floor(u/a)))),n=0;n<u;n++)r=e[n],(t>1&&n%t>0||n%t==0&&n+t>=u)&&n!==u-1&&delete r.label,h.push(r);return h},draw:function(e){var t=this,a=t.options;if(a.display){var s=t.ctx,u=r.global,d=a.ticks.minor,c=a.ticks.major||d,f=a.gridLines,h=a.scaleLabel,m=0!==t.labelRotation,p=t.isHorizontal(),_=d.autoSkip?t._autoSkip(t.getTicks()):t.getTicks(),y=i.valueOrDefault(d.fontColor,u.defaultFontColor),g=n(d),v=i.valueOrDefault(c.fontColor,u.defaultFontColor),M=n(c),b=f.drawTicks?f.tickMarkLength:0,L=i.valueOrDefault(h.fontColor,u.defaultFontColor),k=n(h),x=i.options.toPadding(h.padding),w=i.toRadians(t.labelRotation),Y=[],T=t.options.gridLines.lineWidth,D="right"===a.position?t.right:t.right-T-b,S="right"===a.position?t.right+b:t.right,C="bottom"===a.position?t.top+T:t.bottom-b-T,A="bottom"===a.position?t.top+T+b:t.bottom+T;if(i.each(_,function(n,r){if(!i.isNullOrUndef(n.label)){var o,s,c,h,y,g,v,M,L,k,x,j,E,P,H=n.label;r===t.zeroLineIndex&&a.offset===f.offsetGridLines?(o=f.zeroLineWidth,s=f.zeroLineColor,c=f.zeroLineBorderDash,h=f.zeroLineBorderDashOffset):(o=i.valueAtIndexOrDefault(f.lineWidth,r),s=i.valueAtIndexOrDefault(f.color,r),c=i.valueOrDefault(f.borderDash,u.borderDash),h=i.valueOrDefault(f.borderDashOffset,u.borderDashOffset));var O="middle",F="middle",R=d.padding;if(p){var N=b+R;"bottom"===a.position?(F=m?"middle":"top",O=m?"right":"center",P=t.top+N):(F=m?"middle":"bottom",O=m?"left":"center",P=t.bottom-N);var I=l(t,r,f.offsetGridLines&&_.length>1);I<t.left&&(s="rgba(0,0,0,0)"),I+=i.aliasPixel(o),E=t.getPixelForTick(r)+d.labelOffset,y=v=L=x=I,g=C,M=A,k=e.top,j=e.bottom+T}else{var W,z="left"===a.position;d.mirror?(O=z?"left":"right",W=R):(O=z?"right":"left",W=b+R),E=z?t.right-W:t.left+W;var B=l(t,r,f.offsetGridLines&&_.length>1);B<t.top&&(s="rgba(0,0,0,0)"),B+=i.aliasPixel(o),P=t.getPixelForTick(r)+d.labelOffset,y=D,v=S,L=e.left,x=e.right+T,g=M=k=j=B}Y.push({tx1:y,ty1:g,tx2:v,ty2:M,x1:L,y1:k,x2:x,y2:j,labelX:E,labelY:P,glWidth:o,glColor:s,glBorderDash:c,glBorderDashOffset:h,rotation:-1*w,label:H,major:n.major,textBaseline:F,textAlign:O})}}),i.each(Y,function(e){if(f.display&&(s.save(),s.lineWidth=e.glWidth,s.strokeStyle=e.glColor,s.setLineDash&&(s.setLineDash(e.glBorderDash),s.lineDashOffset=e.glBorderDashOffset),s.beginPath(),f.drawTicks&&(s.moveTo(e.tx1,e.ty1),s.lineTo(e.tx2,e.ty2)),f.drawOnChartArea&&(s.moveTo(e.x1,e.y1),s.lineTo(e.x2,e.y2)),s.stroke(),s.restore()),d.display){s.save(),s.translate(e.labelX,e.labelY),s.rotate(e.rotation),s.font=e.major?M.font:g.font,s.fillStyle=e.major?v:y,s.textBaseline=e.textBaseline,s.textAlign=e.textAlign;var n=e.label;if(i.isArray(n))for(var r=n.length,a=1.5*g.size,o=t.isHorizontal()?0:-a*(r-1)/2,l=0;l<r;++l)s.fillText(""+n[l],0,o),o+=a;else s.fillText(n,0,0);s.restore()}}),h.display){var j,E,P=0,H=o(h)/2;if(p)j=t.left+(t.right-t.left)/2,E="bottom"===a.position?t.bottom-H-x.bottom:t.top+H+x.top;else{var O="left"===a.position;j=O?t.left+H+x.top:t.right-H-x.top,E=t.top+(t.bottom-t.top)/2,P=O?-.5*Math.PI:.5*Math.PI}s.save(),s.translate(j,E),s.rotate(P),s.textAlign="center",s.textBaseline="middle",s.fillStyle=L,s.font=k.font,s.fillText(h.labelString,0,0),s.restore()}if(f.drawBorder){s.lineWidth=i.valueAtIndexOrDefault(f.lineWidth,0),s.strokeStyle=i.valueAtIndexOrDefault(f.color,0);var F=t.left,R=t.right+T,N=t.top,I=t.bottom+T,W=i.aliasPixel(s.lineWidth);p?(N=I="top"===a.position?t.bottom:t.top,N+=W,I+=W):(F=R="left"===a.position?t.right:t.left,F+=W,R+=W),s.beginPath(),s.moveTo(F,N),s.lineTo(R,I),s.stroke()}}}})}},function(e,t,n){"use strict";var r=n(4),a=n(10),i=n(3);r._set("global",{tooltips:{enabled:!0,custom:null,mode:"nearest",position:"average",intersect:!0,backgroundColor:"rgba(0,0,0,0.8)",titleFontStyle:"bold",titleSpacing:2,titleMarginBottom:6,titleFontColor:"#fff",titleAlign:"left",bodySpacing:2,bodyFontColor:"#fff",bodyAlign:"left",footerFontStyle:"bold",footerSpacing:2,footerMarginTop:6,footerFontColor:"#fff",footerAlign:"left",yPadding:6,xPadding:6,caretPadding:2,caretSize:5,cornerRadius:6,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,callbacks:{beforeTitle:i.noop,title:function(e,t){var n="",r=t.labels,a=r?r.length:0;if(e.length>0){var i=e[0];i.xLabel?n=i.xLabel:a>0&&i.index<a&&(n=r[i.index])}return n},afterTitle:i.noop,beforeBody:i.noop,beforeLabel:i.noop,label:function(e,t){var n=t.datasets[e.datasetIndex].label||"";return n&&(n+=": "),n+=e.yLabel},labelColor:function(e,t){var n=t.getDatasetMeta(e.datasetIndex).data[e.index]._view;return{borderColor:n.borderColor,backgroundColor:n.backgroundColor}},labelTextColor:function(){return this._options.bodyFontColor},afterLabel:i.noop,afterBody:i.noop,beforeFooter:i.noop,footer:i.noop,afterFooter:i.noop}}}),e.exports=function(e){function t(e,t){var n=i.color(e);return n.alpha(t*n.alpha()).rgbaString()}function n(e,t){return t&&(i.isArray(t)?Array.prototype.push.apply(e,t):e.push(t)),e}function o(e){var t=e._xScale,n=e._yScale||e._scale,r=e._index,a=e._datasetIndex;return{xLabel:t?t.getLabelForIndex(r,a):"",yLabel:n?n.getLabelForIndex(r,a):"",index:r,datasetIndex:a,x:e._model.x,y:e._model.y}}function s(e){var t=r.global,n=i.valueOrDefault;return{xPadding:e.xPadding,yPadding:e.yPadding,xAlign:e.xAlign,yAlign:e.yAlign,bodyFontColor:e.bodyFontColor,_bodyFontFamily:n(e.bodyFontFamily,t.defaultFontFamily),_bodyFontStyle:n(e.bodyFontStyle,t.defaultFontStyle),_bodyAlign:e.bodyAlign,bodyFontSize:n(e.bodyFontSize,t.defaultFontSize),bodySpacing:e.bodySpacing,titleFontColor:e.titleFontColor,_titleFontFamily:n(e.titleFontFamily,t.defaultFontFamily),_titleFontStyle:n(e.titleFontStyle,t.defaultFontStyle),titleFontSize:n(e.titleFontSize,t.defaultFontSize),_titleAlign:e.titleAlign,titleSpacing:e.titleSpacing,titleMarginBottom:e.titleMarginBottom,footerFontColor:e.footerFontColor,_footerFontFamily:n(e.footerFontFamily,t.defaultFontFamily),_footerFontStyle:n(e.footerFontStyle,t.defaultFontStyle),footerFontSize:n(e.footerFontSize,t.defaultFontSize),_footerAlign:e.footerAlign,footerSpacing:e.footerSpacing,footerMarginTop:e.footerMarginTop,caretSize:e.caretSize,cornerRadius:e.cornerRadius,backgroundColor:e.backgroundColor,opacity:0,legendColorBackground:e.multiKeyBackground,displayColors:e.displayColors,borderColor:e.borderColor,borderWidth:e.borderWidth}}e.Tooltip=a.extend({initialize:function(){this._model=s(this._options),this._lastActive=[]},getTitle:function(){var e=this._options.callbacks,t=e.beforeTitle.apply(this,arguments),r=e.title.apply(this,arguments),a=e.afterTitle.apply(this,arguments),i=[];return i=n(i=n(i=n(i,t),r),a)},getBeforeBody:function(){var e=this._options.callbacks.beforeBody.apply(this,arguments);return i.isArray(e)?e:void 0!==e?[e]:[]},getBody:function(e,t){var r=this,a=r._options.callbacks,o=[];return i.each(e,function(e){var i={before:[],lines:[],after:[]};n(i.before,a.beforeLabel.call(r,e,t)),n(i.lines,a.label.call(r,e,t)),n(i.after,a.afterLabel.call(r,e,t)),o.push(i)}),o},getAfterBody:function(){var e=this._options.callbacks.afterBody.apply(this,arguments);return i.isArray(e)?e:void 0!==e?[e]:[]},getFooter:function(){var e=this._options.callbacks,t=e.beforeFooter.apply(this,arguments),r=e.footer.apply(this,arguments),a=e.afterFooter.apply(this,arguments),i=[];return i=n(i=n(i=n(i,t),r),a)},update:function(t){var n,r,a=this,l=a._options,u=a._model,d=a._model=s(l),c=a._active,f=a._data,h={xAlign:u.xAlign,yAlign:u.yAlign},m={x:u.x,y:u.y},p={width:u.width,height:u.height},_={x:u.caretX,y:u.caretY};if(c.length){d.opacity=1;var y=[],g=[];_=e.Tooltip.positioners[l.position].call(a,c,a._eventPosition);var v=[];for(n=0,r=c.length;n<r;++n)v.push(o(c[n]));l.filter&&(v=v.filter(function(e){return l.filter(e,f)})),l.itemSort&&(v=v.sort(function(e,t){return l.itemSort(e,t,f)})),i.each(v,function(e){y.push(l.callbacks.labelColor.call(a,e,a._chart)),g.push(l.callbacks.labelTextColor.call(a,e,a._chart))}),d.title=a.getTitle(v,f),d.beforeBody=a.getBeforeBody(v,f),d.body=a.getBody(v,f),d.afterBody=a.getAfterBody(v,f),d.footer=a.getFooter(v,f),d.x=Math.round(_.x),d.y=Math.round(_.y),d.caretPadding=l.caretPadding,d.labelColors=y,d.labelTextColors=g,d.dataPoints=v,m=function(e,t,n,r){var a=e.x,i=e.y,o=e.caretSize,s=e.caretPadding,l=e.cornerRadius,u=n.xAlign,d=n.yAlign,c=o+s,f=l+s;return"right"===u?a-=t.width:"center"===u&&((a-=t.width/2)+t.width>r.width&&(a=r.width-t.width),a<0&&(a=0)),"top"===d?i+=c:i-="bottom"===d?t.height+c:t.height/2,"center"===d?"left"===u?a+=c:"right"===u&&(a-=c):"left"===u?a-=f:"right"===u&&(a+=f),{x:a,y:i}}(d,p=function(e,t){var n=e._chart.ctx,r=2*t.yPadding,a=0,o=t.body,s=o.reduce(function(e,t){return e+t.before.length+t.lines.length+t.after.length},0);s+=t.beforeBody.length+t.afterBody.length;var l=t.title.length,u=t.footer.length,d=t.titleFontSize,c=t.bodyFontSize,f=t.footerFontSize;r+=l*d,r+=l?(l-1)*t.titleSpacing:0,r+=l?t.titleMarginBottom:0,r+=s*c,r+=s?(s-1)*t.bodySpacing:0,r+=u?t.footerMarginTop:0,r+=u*f,r+=u?(u-1)*t.footerSpacing:0;var h=0,m=function(e){a=Math.max(a,n.measureText(e).width+h)};return n.font=i.fontString(d,t._titleFontStyle,t._titleFontFamily),i.each(t.title,m),n.font=i.fontString(c,t._bodyFontStyle,t._bodyFontFamily),i.each(t.beforeBody.concat(t.afterBody),m),h=t.displayColors?c+2:0,i.each(o,function(e){i.each(e.before,m),i.each(e.lines,m),i.each(e.after,m)}),h=0,n.font=i.fontString(f,t._footerFontStyle,t._footerFontFamily),i.each(t.footer,m),{width:a+=2*t.xPadding,height:r}}(this,d),h=function(e,t){var n,r,a,i,o,s=e._model,l=e._chart,u=e._chart.chartArea,d="center",c="center";s.y<t.height?c="top":s.y>l.height-t.height&&(c="bottom");var f=(u.left+u.right)/2,h=(u.top+u.bottom)/2;"center"===c?(n=function(e){return e<=f},r=function(e){return e>f}):(n=function(e){return e<=t.width/2},r=function(e){return e>=l.width-t.width/2}),a=function(e){return e+t.width+s.caretSize+s.caretPadding>l.width},i=function(e){return e-t.width-s.caretSize-s.caretPadding<0},o=function(e){return e<=h?"top":"bottom"},n(s.x)?(d="left",a(s.x)&&(d="center",c=o(s.y))):r(s.x)&&(d="right",i(s.x)&&(d="center",c=o(s.y)));var m=e._options;return{xAlign:m.xAlign?m.xAlign:d,yAlign:m.yAlign?m.yAlign:c}}(this,p),a._chart)}else d.opacity=0;return d.xAlign=h.xAlign,d.yAlign=h.yAlign,d.x=m.x,d.y=m.y,d.width=p.width,d.height=p.height,d.caretX=_.x,d.caretY=_.y,a._model=d,t&&l.custom&&l.custom.call(a,d),a},drawCaret:function(e,t){var n=this._chart.ctx,r=this._view,a=this.getCaretPosition(e,t,r);n.lineTo(a.x1,a.y1),n.lineTo(a.x2,a.y2),n.lineTo(a.x3,a.y3)},getCaretPosition:function(e,t,n){var r,a,i,o,s,l,u=n.caretSize,d=n.cornerRadius,c=n.xAlign,f=n.yAlign,h=e.x,m=e.y,p=t.width,_=t.height;if("center"===f)s=m+_/2,"left"===c?(a=(r=h)-u,i=r,o=s+u,l=s-u):(a=(r=h+p)+u,i=r,o=s-u,l=s+u);else if("left"===c?(r=(a=h+d+u)-u,i=a+u):"right"===c?(r=(a=h+p-d-u)-u,i=a+u):(r=(a=n.caretX)-u,i=a+u),"top"===f)s=(o=m)-u,l=o;else{s=(o=m+_)+u,l=o;var y=i;i=r,r=y}return{x1:r,x2:a,x3:i,y1:o,y2:s,y3:l}},drawTitle:function(e,n,r,a){var o=n.title;if(o.length){r.textAlign=n._titleAlign,r.textBaseline="top";var s,l,u=n.titleFontSize,d=n.titleSpacing;for(r.fillStyle=t(n.titleFontColor,a),r.font=i.fontString(u,n._titleFontStyle,n._titleFontFamily),s=0,l=o.length;s<l;++s)r.fillText(o[s],e.x,e.y),e.y+=u+d,s+1===o.length&&(e.y+=n.titleMarginBottom-d)}},drawBody:function(e,n,r,a){var o=n.bodyFontSize,s=n.bodySpacing,l=n.body;r.textAlign=n._bodyAlign,r.textBaseline="top",r.font=i.fontString(o,n._bodyFontStyle,n._bodyFontFamily);var u=0,d=function(t){r.fillText(t,e.x+u,e.y),e.y+=o+s};r.fillStyle=t(n.bodyFontColor,a),i.each(n.beforeBody,d);var c=n.displayColors;u=c?o+2:0,i.each(l,function(s,l){var u=t(n.labelTextColors[l],a);r.fillStyle=u,i.each(s.before,d),i.each(s.lines,function(i){c&&(r.fillStyle=t(n.legendColorBackground,a),r.fillRect(e.x,e.y,o,o),r.lineWidth=1,r.strokeStyle=t(n.labelColors[l].borderColor,a),r.strokeRect(e.x,e.y,o,o),r.fillStyle=t(n.labelColors[l].backgroundColor,a),r.fillRect(e.x+1,e.y+1,o-2,o-2),r.fillStyle=u),d(i)}),i.each(s.after,d)}),u=0,i.each(n.afterBody,d),e.y-=s},drawFooter:function(e,n,r,a){var o=n.footer;o.length&&(e.y+=n.footerMarginTop,r.textAlign=n._footerAlign,r.textBaseline="top",r.fillStyle=t(n.footerFontColor,a),r.font=i.fontString(n.footerFontSize,n._footerFontStyle,n._footerFontFamily),i.each(o,function(t){r.fillText(t,e.x,e.y),e.y+=n.footerFontSize+n.footerSpacing}))},drawBackground:function(e,n,r,a,i){r.fillStyle=t(n.backgroundColor,i),r.strokeStyle=t(n.borderColor,i),r.lineWidth=n.borderWidth;var o=n.xAlign,s=n.yAlign,l=e.x,u=e.y,d=a.width,c=a.height,f=n.cornerRadius;r.beginPath(),r.moveTo(l+f,u),"top"===s&&this.drawCaret(e,a),r.lineTo(l+d-f,u),r.quadraticCurveTo(l+d,u,l+d,u+f),"center"===s&&"right"===o&&this.drawCaret(e,a),r.lineTo(l+d,u+c-f),r.quadraticCurveTo(l+d,u+c,l+d-f,u+c),"bottom"===s&&this.drawCaret(e,a),r.lineTo(l+f,u+c),r.quadraticCurveTo(l,u+c,l,u+c-f),"center"===s&&"left"===o&&this.drawCaret(e,a),r.lineTo(l,u+f),r.quadraticCurveTo(l,u,l+f,u),r.closePath(),r.fill(),n.borderWidth>0&&r.stroke()},draw:function(){var e=this._chart.ctx,t=this._view;if(0!==t.opacity){var n={width:t.width,height:t.height},r={x:t.x,y:t.y},a=Math.abs(t.opacity<.001)?0:t.opacity,i=t.title.length||t.beforeBody.length||t.body.length||t.afterBody.length||t.footer.length;this._options.enabled&&i&&(this.drawBackground(r,t,e,n,a),r.x+=t.xPadding,r.y+=t.yPadding,this.drawTitle(r,t,e,a),this.drawBody(r,t,e,a),this.drawFooter(r,t,e,a))}},handleEvent:function(e){var t,n=this,r=n._options;return n._lastActive=n._lastActive||[],"mouseout"===e.type?n._active=[]:n._active=n._chart.getElementsAtEventForMode(e,r.mode,r),(t=!i.arrayEquals(n._active,n._lastActive))&&(n._lastActive=n._active,(r.enabled||r.custom)&&(n._eventPosition={x:e.x,y:e.y},n.update(!0),n.pivot())),t}}),e.Tooltip.positioners={average:function(e){if(!e.length)return!1;var t,n,r=0,a=0,i=0;for(t=0,n=e.length;t<n;++t){var o=e[t];if(o&&o.hasValue()){var s=o.tooltipPosition();r+=s.x,a+=s.y,++i}}return{x:Math.round(r/i),y:Math.round(a/i)}},nearest:function(e,t){var n,r,a,o=t.x,s=t.y,l=Number.POSITIVE_INFINITY;for(n=0,r=e.length;n<r;++n){var u=e[n];if(u&&u.hasValue()){var d=u.getCenterPoint(),c=i.distanceBetweenPoints(t,d);c<l&&(l=c,a=u)}}if(a){var f=a.tooltipPosition();o=f.x,s=f.y}return{x:o,y:s}}}}},function(e,t,n){"use strict";var r=n(3);e.exports=function(e){var t=r.noop;e.LinearScaleBase=e.Scale.extend({getRightValue:function(t){return"string"==typeof t?+t:e.Scale.prototype.getRightValue.call(this,t)},handleTickRangeOptions:function(){var e=this,t=e.options.ticks;if(t.beginAtZero){var n=r.sign(e.min),a=r.sign(e.max);n<0&&a<0?e.max=0:n>0&&a>0&&(e.min=0)}var i=void 0!==t.min||void 0!==t.suggestedMin,o=void 0!==t.max||void 0!==t.suggestedMax;void 0!==t.min?e.min=t.min:void 0!==t.suggestedMin&&(null===e.min?e.min=t.suggestedMin:e.min=Math.min(e.min,t.suggestedMin)),void 0!==t.max?e.max=t.max:void 0!==t.suggestedMax&&(null===e.max?e.max=t.suggestedMax:e.max=Math.max(e.max,t.suggestedMax)),i!==o&&e.min>=e.max&&(i?e.max=e.min+1:e.min=e.max-1),e.min===e.max&&(e.max++,t.beginAtZero||e.min--)},getTickLimit:t,handleDirectionalChanges:t,buildTicks:function(){var e=this,t=e.options.ticks,n=e.getTickLimit(),a={maxTicks:n=Math.max(2,n),min:t.min,max:t.max,stepSize:r.valueOrDefault(t.fixedStepSize,t.stepSize)},i=e.ticks=function(e,t){var n,a=[];if(e.stepSize&&e.stepSize>0)n=e.stepSize;else{var i=r.niceNum(t.max-t.min,!1);n=r.niceNum(i/(e.maxTicks-1),!0)}var o=Math.floor(t.min/n)*n,s=Math.ceil(t.max/n)*n;e.min&&e.max&&e.stepSize&&r.almostWhole((e.max-e.min)/e.stepSize,n/1e3)&&(o=e.min,s=e.max);var l=(s-o)/n;l=r.almostEquals(l,Math.round(l),n/1e3)?Math.round(l):Math.ceil(l);var u=1;n<1&&(u=Math.pow(10,n.toString().length-2),o=Math.round(o*u)/u,s=Math.round(s*u)/u),a.push(void 0!==e.min?e.min:o);for(var d=1;d<l;++d)a.push(Math.round((o+d*n)*u)/u);return a.push(void 0!==e.max?e.max:s),a}(a,e);e.handleDirectionalChanges(),e.max=r.max(i),e.min=r.min(i),t.reverse?(i.reverse(),e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max)},convertTicksToLabels:function(){var t=this;t.ticksAsNumbers=t.ticks.slice(),t.zeroLineIndex=t.ticks.indexOf(0),e.Scale.prototype.convertTicksToLabels.call(t)}})}},function(e,t,n){"use strict";e.exports=function(e){var t=e.Scale.extend({getLabels:function(){var e=this.chart.data;return this.options.labels||(this.isHorizontal()?e.xLabels:e.yLabels)||e.labels},determineDataLimits:function(){var e,t=this,n=t.getLabels();t.minIndex=0,t.maxIndex=n.length-1,void 0!==t.options.ticks.min&&(e=n.indexOf(t.options.ticks.min),t.minIndex=-1!==e?e:t.minIndex),void 0!==t.options.ticks.max&&(e=n.indexOf(t.options.ticks.max),t.maxIndex=-1!==e?e:t.maxIndex),t.min=n[t.minIndex],t.max=n[t.maxIndex]},buildTicks:function(){var e=this,t=e.getLabels();e.ticks=0===e.minIndex&&e.maxIndex===t.length-1?t:t.slice(e.minIndex,e.maxIndex+1)},getLabelForIndex:function(e,t){var n=this,r=n.chart.data,a=n.isHorizontal();return r.yLabels&&!a?n.getRightValue(r.datasets[t].data[e]):n.ticks[e-n.minIndex]},getPixelForValue:function(e,t){var n,r=this,a=r.options.offset,i=Math.max(r.maxIndex+1-r.minIndex-(a?0:1),1);if(void 0!==e&&null!==e&&(n=r.isHorizontal()?e.x:e.y),void 0!==n||void 0!==e&&isNaN(t)){var o=r.getLabels();e=n||e;var s=o.indexOf(e);t=-1!==s?s:t}if(r.isHorizontal()){var l=r.width/i,u=l*(t-r.minIndex);return a&&(u+=l/2),r.left+Math.round(u)}var d=r.height/i,c=d*(t-r.minIndex);return a&&(c+=d/2),r.top+Math.round(c)},getPixelForTick:function(e){return this.getPixelForValue(this.ticks[e],e+this.minIndex,null)},getValueForPixel:function(e){var t=this,n=t.options.offset,r=Math.max(t._ticks.length-(n?0:1),1),a=t.isHorizontal(),i=(a?t.width:t.height)/r;return e-=a?t.left:t.top,n&&(e-=i/2),(e<=0?0:Math.round(e/i))+t.minIndex},getBasePixel:function(){return this.bottom}});e.scaleService.registerScaleType("category",t,{position:"bottom"})}},function(e,t,n){"use strict";var r=n(4),a=n(3),i=n(13);e.exports=function(e){var t={position:"left",ticks:{callback:i.formatters.linear}},n=e.LinearScaleBase.extend({determineDataLimits:function(){var e=this,t=e.options,n=e.chart,r=n.data.datasets,i=e.isHorizontal();function o(t){return i?t.xAxisID===e.id:t.yAxisID===e.id}e.min=null,e.max=null;var s=t.stacked;if(void 0===s&&a.each(r,function(e,t){if(!s){var r=n.getDatasetMeta(t);n.isDatasetVisible(t)&&o(r)&&void 0!==r.stack&&(s=!0)}}),t.stacked||s){var l={};a.each(r,function(r,i){var s=n.getDatasetMeta(i),u=[s.type,void 0===t.stacked&&void 0===s.stack?i:"",s.stack].join(".");void 0===l[u]&&(l[u]={positiveValues:[],negativeValues:[]});var d=l[u].positiveValues,c=l[u].negativeValues;n.isDatasetVisible(i)&&o(s)&&a.each(r.data,function(n,r){var a=+e.getRightValue(n);isNaN(a)||s.data[r].hidden||(d[r]=d[r]||0,c[r]=c[r]||0,t.relativePoints?d[r]=100:a<0?c[r]+=a:d[r]+=a)})}),a.each(l,function(t){var n=t.positiveValues.concat(t.negativeValues),r=a.min(n),i=a.max(n);e.min=null===e.min?r:Math.min(e.min,r),e.max=null===e.max?i:Math.max(e.max,i)})}else a.each(r,function(t,r){var i=n.getDatasetMeta(r);n.isDatasetVisible(r)&&o(i)&&a.each(t.data,function(t,n){var r=+e.getRightValue(t);isNaN(r)||i.data[n].hidden||(null===e.min?e.min=r:r<e.min&&(e.min=r),null===e.max?e.max=r:r>e.max&&(e.max=r))})});e.min=isFinite(e.min)&&!isNaN(e.min)?e.min:0,e.max=isFinite(e.max)&&!isNaN(e.max)?e.max:1,this.handleTickRangeOptions()},getTickLimit:function(){var e,t=this.options.ticks;if(this.isHorizontal())e=Math.min(t.maxTicksLimit?t.maxTicksLimit:11,Math.ceil(this.width/50));else{var n=a.valueOrDefault(t.fontSize,r.global.defaultFontSize);e=Math.min(t.maxTicksLimit?t.maxTicksLimit:11,Math.ceil(this.height/(2*n)))}return e},handleDirectionalChanges:function(){this.isHorizontal()||this.ticks.reverse()},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},getPixelForValue:function(e){var t=this,n=t.start,r=+t.getRightValue(e),a=t.end-n;return t.isHorizontal()?t.left+t.width/a*(r-n):t.bottom-t.height/a*(r-n)},getValueForPixel:function(e){var t=this,n=t.isHorizontal(),r=n?t.width:t.height,a=(n?e-t.left:t.bottom-e)/r;return t.start+(t.end-t.start)*a},getPixelForTick:function(e){return this.getPixelForValue(this.ticksAsNumbers[e])}});e.scaleService.registerScaleType("linear",n,t)}},function(e,t,n){"use strict";var r=n(3),a=n(13);e.exports=function(e){var t={position:"left",ticks:{callback:a.formatters.logarithmic}},n=e.Scale.extend({determineDataLimits:function(){var e=this,t=e.options,n=e.chart,a=n.data.datasets,i=e.isHorizontal();function o(t){return i?t.xAxisID===e.id:t.yAxisID===e.id}e.min=null,e.max=null,e.minNotZero=null;var s=t.stacked;if(void 0===s&&r.each(a,function(e,t){if(!s){var r=n.getDatasetMeta(t);n.isDatasetVisible(t)&&o(r)&&void 0!==r.stack&&(s=!0)}}),t.stacked||s){var l={};r.each(a,function(a,i){var s=n.getDatasetMeta(i),u=[s.type,void 0===t.stacked&&void 0===s.stack?i:"",s.stack].join(".");n.isDatasetVisible(i)&&o(s)&&(void 0===l[u]&&(l[u]=[]),r.each(a.data,function(t,n){var r=l[u],a=+e.getRightValue(t);isNaN(a)||s.data[n].hidden||a<0||(r[n]=r[n]||0,r[n]+=a)}))}),r.each(l,function(t){if(t.length>0){var n=r.min(t),a=r.max(t);e.min=null===e.min?n:Math.min(e.min,n),e.max=null===e.max?a:Math.max(e.max,a)}})}else r.each(a,function(t,a){var i=n.getDatasetMeta(a);n.isDatasetVisible(a)&&o(i)&&r.each(t.data,function(t,n){var r=+e.getRightValue(t);isNaN(r)||i.data[n].hidden||r<0||(null===e.min?e.min=r:r<e.min&&(e.min=r),null===e.max?e.max=r:r>e.max&&(e.max=r),0!==r&&(null===e.minNotZero||r<e.minNotZero)&&(e.minNotZero=r))})});this.handleTickRangeOptions()},handleTickRangeOptions:function(){var e=this,t=e.options.ticks,n=r.valueOrDefault;e.min=n(t.min,e.min),e.max=n(t.max,e.max),e.min===e.max&&(0!==e.min&&null!==e.min?(e.min=Math.pow(10,Math.floor(r.log10(e.min))-1),e.max=Math.pow(10,Math.floor(r.log10(e.max))+1)):(e.min=1,e.max=10)),null===e.min&&(e.min=Math.pow(10,Math.floor(r.log10(e.max))-1)),null===e.max&&(e.max=0!==e.min?Math.pow(10,Math.floor(r.log10(e.min))+1):10),null===e.minNotZero&&(e.min>0?e.minNotZero=e.min:e.max<1?e.minNotZero=Math.pow(10,Math.floor(r.log10(e.max))):e.minNotZero=1)},buildTicks:function(){var e=this,t=e.options.ticks,n=!e.isHorizontal(),a={min:t.min,max:t.max},i=e.ticks=function(e,t){var n,a,i=[],o=r.valueOrDefault,s=o(e.min,Math.pow(10,Math.floor(r.log10(t.min)))),l=Math.floor(r.log10(t.max)),u=Math.ceil(t.max/Math.pow(10,l));0===s?(n=Math.floor(r.log10(t.minNotZero)),a=Math.floor(t.minNotZero/Math.pow(10,n)),i.push(s),s=a*Math.pow(10,n)):(n=Math.floor(r.log10(s)),a=Math.floor(s/Math.pow(10,n)));var d=n<0?Math.pow(10,Math.abs(n)):1;do{i.push(s),10==++a&&(a=1,d=++n>=0?1:d),s=Math.round(a*Math.pow(10,n)*d)/d}while(n<l||n===l&&a<u);var c=o(e.max,s);return i.push(c),i}(a,e);e.max=r.max(i),e.min=r.min(i),t.reverse?(n=!n,e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max),n&&i.reverse()},convertTicksToLabels:function(){this.tickValues=this.ticks.slice(),e.Scale.prototype.convertTicksToLabels.call(this)},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},getPixelForTick:function(e){return this.getPixelForValue(this.tickValues[e])},_getFirstTickValue:function(e){var t=Math.floor(r.log10(e));return Math.floor(e/Math.pow(10,t))*Math.pow(10,t)},getPixelForValue:function(t){var n,a,i,o,s,l=this,u=l.options.ticks.reverse,d=r.log10,c=l._getFirstTickValue(l.minNotZero),f=0;return t=+l.getRightValue(t),u?(i=l.end,o=l.start,s=-1):(i=l.start,o=l.end,s=1),l.isHorizontal()?(n=l.width,a=u?l.right:l.left):(n=l.height,s*=-1,a=u?l.top:l.bottom),t!==i&&(0===i&&(n-=f=r.getValueOrDefault(l.options.ticks.fontSize,e.defaults.global.defaultFontSize),i=c),0!==t&&(f+=n/(d(o)-d(i))*(d(t)-d(i))),a+=s*f),a},getValueForPixel:function(t){var n,a,i,o,s=this,l=s.options.ticks.reverse,u=r.log10,d=s._getFirstTickValue(s.minNotZero);if(l?(a=s.end,i=s.start):(a=s.start,i=s.end),s.isHorizontal()?(n=s.width,o=l?s.right-t:t-s.left):(n=s.height,o=l?t-s.top:s.bottom-t),o!==a){if(0===a){var c=r.getValueOrDefault(s.options.ticks.fontSize,e.defaults.global.defaultFontSize);o-=c,n-=c,a=d}o*=u(i)-u(a),o/=n,o=Math.pow(10,u(a)+o)}return o}});e.scaleService.registerScaleType("logarithmic",n,t)}},function(e,t,n){"use strict";var r=n(4),a=n(3),i=n(13);e.exports=function(e){var t=r.global,n={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1},gridLines:{circular:!1},ticks:{showLabelBackdrop:!0,backdropColor:"rgba(255,255,255,0.75)",backdropPaddingY:2,backdropPaddingX:2,callback:i.formatters.linear},pointLabels:{display:!0,fontSize:10,callback:function(e){return e}}};function o(e){var t=e.options;return t.angleLines.display||t.pointLabels.display?e.chart.data.labels.length:0}function s(e){var n=e.options.pointLabels,r=a.valueOrDefault(n.fontSize,t.defaultFontSize),i=a.valueOrDefault(n.fontStyle,t.defaultFontStyle),o=a.valueOrDefault(n.fontFamily,t.defaultFontFamily);return{size:r,style:i,family:o,font:a.fontString(r,i,o)}}function l(e,t,n){return a.isArray(n)?{w:a.longestText(e,e.font,n),h:n.length*t+1.5*(n.length-1)*t}:{w:e.measureText(n).width,h:t}}function u(e,t,n,r,a){return e===r||e===a?{start:t-n/2,end:t+n/2}:e<r||e>a?{start:t-n-5,end:t}:{start:t,end:t+n+5}}function d(e){return 0===e||180===e?"center":e<180?"left":"right"}function c(e,t,n,r){if(a.isArray(t))for(var i=n.y,o=1.5*r,s=0;s<t.length;++s)e.fillText(t[s],n.x,i),i+=o;else e.fillText(t,n.x,n.y)}function f(e,t,n){90===e||270===e?n.y-=t.h/2:(e>270||e<90)&&(n.y-=t.h)}function h(e){return a.isNumber(e)?e:0}var m=e.LinearScaleBase.extend({setDimensions:function(){var e=this,n=e.options,r=n.ticks;e.width=e.maxWidth,e.height=e.maxHeight,e.xCenter=Math.round(e.width/2),e.yCenter=Math.round(e.height/2);var i=a.min([e.height,e.width]),o=a.valueOrDefault(r.fontSize,t.defaultFontSize);e.drawingArea=n.display?i/2-(o/2+r.backdropPaddingY):i/2},determineDataLimits:function(){var e=this,t=e.chart,n=Number.POSITIVE_INFINITY,r=Number.NEGATIVE_INFINITY;a.each(t.data.datasets,function(i,o){if(t.isDatasetVisible(o)){var s=t.getDatasetMeta(o);a.each(i.data,function(t,a){var i=+e.getRightValue(t);isNaN(i)||s.data[a].hidden||(n=Math.min(i,n),r=Math.max(i,r))})}}),e.min=n===Number.POSITIVE_INFINITY?0:n,e.max=r===Number.NEGATIVE_INFINITY?0:r,e.handleTickRangeOptions()},getTickLimit:function(){var e=this.options.ticks,n=a.valueOrDefault(e.fontSize,t.defaultFontSize);return Math.min(e.maxTicksLimit?e.maxTicksLimit:11,Math.ceil(this.drawingArea/(1.5*n)))},convertTicksToLabels:function(){var t=this;e.LinearScaleBase.prototype.convertTicksToLabels.call(t),t.pointLabels=t.chart.data.labels.map(t.options.pointLabels.callback,t)},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},fit:function(){this.options.pointLabels.display?function(e){var t,n,r,i=s(e),d=Math.min(e.height/2,e.width/2),c={r:e.width,l:0,t:e.height,b:0},f={};e.ctx.font=i.font,e._pointLabelSizes=[];var h=o(e);for(t=0;t<h;t++){r=e.getPointPosition(t,d),n=l(e.ctx,i.size,e.pointLabels[t]||""),e._pointLabelSizes[t]=n;var m=e.getIndexAngle(t),p=a.toDegrees(m)%360,_=u(p,r.x,n.w,0,180),y=u(p,r.y,n.h,90,270);_.start<c.l&&(c.l=_.start,f.l=m),_.end>c.r&&(c.r=_.end,f.r=m),y.start<c.t&&(c.t=y.start,f.t=m),y.end>c.b&&(c.b=y.end,f.b=m)}e.setReductions(d,c,f)}(this):function(e){var t=Math.min(e.height/2,e.width/2);e.drawingArea=Math.round(t),e.setCenterPoint(0,0,0,0)}(this)},setReductions:function(e,t,n){var r=t.l/Math.sin(n.l),a=Math.max(t.r-this.width,0)/Math.sin(n.r),i=-t.t/Math.cos(n.t),o=-Math.max(t.b-this.height,0)/Math.cos(n.b);r=h(r),a=h(a),i=h(i),o=h(o),this.drawingArea=Math.min(Math.round(e-(r+a)/2),Math.round(e-(i+o)/2)),this.setCenterPoint(r,a,i,o)},setCenterPoint:function(e,t,n,r){var a=this,i=a.width-t-a.drawingArea,o=e+a.drawingArea,s=n+a.drawingArea,l=a.height-r-a.drawingArea;a.xCenter=Math.round((o+i)/2+a.left),a.yCenter=Math.round((s+l)/2+a.top)},getIndexAngle:function(e){return e*(2*Math.PI/o(this))+(this.chart.options&&this.chart.options.startAngle?this.chart.options.startAngle:0)*Math.PI*2/360},getDistanceFromCenterForValue:function(e){var t=this;if(null===e)return 0;var n=t.drawingArea/(t.max-t.min);return t.options.ticks.reverse?(t.max-e)*n:(e-t.min)*n},getPointPosition:function(e,t){var n=this.getIndexAngle(e)-Math.PI/2;return{x:Math.round(Math.cos(n)*t)+this.xCenter,y:Math.round(Math.sin(n)*t)+this.yCenter}},getPointPositionForValue:function(e,t){return this.getPointPosition(e,this.getDistanceFromCenterForValue(t))},getBasePosition:function(){var e=this.min,t=this.max;return this.getPointPositionForValue(0,this.beginAtZero?0:e<0&&t<0?t:e>0&&t>0?e:0)},draw:function(){var e=this,n=e.options,r=n.gridLines,i=n.ticks,l=a.valueOrDefault;if(n.display){var u=e.ctx,h=this.getIndexAngle(0),m=l(i.fontSize,t.defaultFontSize),p=l(i.fontStyle,t.defaultFontStyle),_=l(i.fontFamily,t.defaultFontFamily),y=a.fontString(m,p,_);a.each(e.ticks,function(n,s){if(s>0||i.reverse){var d=e.getDistanceFromCenterForValue(e.ticksAsNumbers[s]);if(r.display&&0!==s&&function(e,t,n,r){var i=e.ctx;if(i.strokeStyle=a.valueAtIndexOrDefault(t.color,r-1),i.lineWidth=a.valueAtIndexOrDefault(t.lineWidth,r-1),e.options.gridLines.circular)i.beginPath(),i.arc(e.xCenter,e.yCenter,n,0,2*Math.PI),i.closePath(),i.stroke();else{var s=o(e);if(0===s)return;i.beginPath();var l=e.getPointPosition(0,n);i.moveTo(l.x,l.y);for(var u=1;u<s;u++)l=e.getPointPosition(u,n),i.lineTo(l.x,l.y);i.closePath(),i.stroke()}}(e,r,d,s),i.display){var c=l(i.fontColor,t.defaultFontColor);if(u.font=y,u.save(),u.translate(e.xCenter,e.yCenter),u.rotate(h),i.showLabelBackdrop){var f=u.measureText(n).width;u.fillStyle=i.backdropColor,u.fillRect(-f/2-i.backdropPaddingX,-d-m/2-i.backdropPaddingY,f+2*i.backdropPaddingX,m+2*i.backdropPaddingY)}u.textAlign="center",u.textBaseline="middle",u.fillStyle=c,u.fillText(n,0,-d),u.restore()}}}),(n.angleLines.display||n.pointLabels.display)&&function(e){var n=e.ctx,r=e.options,i=r.angleLines,l=r.pointLabels;n.lineWidth=i.lineWidth,n.strokeStyle=i.color;var u=e.getDistanceFromCenterForValue(r.ticks.reverse?e.min:e.max),h=s(e);n.textBaseline="top";for(var m=o(e)-1;m>=0;m--){if(i.display){var p=e.getPointPosition(m,u);n.beginPath(),n.moveTo(e.xCenter,e.yCenter),n.lineTo(p.x,p.y),n.stroke(),n.closePath()}if(l.display){var _=e.getPointPosition(m,u+5),y=a.valueAtIndexOrDefault(l.fontColor,m,t.defaultFontColor);n.font=h.font,n.fillStyle=y;var g=e.getIndexAngle(m),v=a.toDegrees(g);n.textAlign=d(v),f(v,e._pointLabelSizes[m],_),c(n,e.pointLabels[m]||"",_,h.size)}}}(e)}}});e.scaleService.registerScaleType("radialLinear",m,n)}},function(e,t,n){"use strict";var r=n(0);r="function"==typeof r?r:window.moment;var a=n(4),i=n(3),o=Number.MIN_SAFE_INTEGER||-9007199254740991,s=Number.MAX_SAFE_INTEGER||9007199254740991,l={millisecond:{common:!0,size:1,steps:[1,2,5,10,20,50,100,250,500]},second:{common:!0,size:1e3,steps:[1,2,5,10,30]},minute:{common:!0,size:6e4,steps:[1,2,5,10,30]},hour:{common:!0,size:36e5,steps:[1,2,3,6,12]},day:{common:!0,size:864e5,steps:[1,2,5]},week:{common:!1,size:6048e5,steps:[1,2,3,4]},month:{common:!0,size:2628e6,steps:[1,2,3]},quarter:{common:!1,size:7884e6,steps:[1,2,3,4]},year:{common:!0,size:3154e7}},u=Object.keys(l);function d(e,t){return e-t}function c(e){var t,n,r,a={},i=[];for(t=0,n=e.length;t<n;++t)a[r=e[t]]||(a[r]=!0,i.push(r));return i}function f(e,t,n,r){var a=function(e,t,n){for(var r,a,i,o=0,s=e.length-1;o>=0&&o<=s;){if(a=e[(r=o+s>>1)-1]||null,i=e[r],!a)return{lo:null,hi:i};if(i[t]<n)o=r+1;else{if(!(a[t]>n))return{lo:a,hi:i};s=r-1}}return{lo:i,hi:null}}(e,t,n),i=a.lo?a.hi?a.lo:e[e.length-2]:e[0],o=a.lo?a.hi?a.hi:e[e.length-1]:e[1],s=o[t]-i[t],l=s?(n-i[t])/s:0,u=(o[r]-i[r])*l;return i[r]+u}function h(e,t){var n=t.parser,a=t.parser||t.format;return"function"==typeof n?n(e):"string"==typeof e&&"string"==typeof a?r(e,a):(e instanceof r||(e=r(e)),e.isValid()?e:"function"==typeof a?a(e):e)}function m(e,t){if(i.isNullOrUndef(e))return null;var n=t.options.time,r=h(t.getRightValue(e),n);return r.isValid()?(n.round&&r.startOf(n.round),r.valueOf()):null}function p(e){for(var t=u.indexOf(e)+1,n=u.length;t<n;++t)if(l[u[t]].common)return u[t]}function _(e,t,n,a){var o,d=a.time,c=d.unit||function(e,t,n,r){var a,i,o,d=u.length;for(a=u.indexOf(e);a<d-1;++a)if(o=(i=l[u[a]]).steps?i.steps[i.steps.length-1]:s,i.common&&Math.ceil((n-t)/(o*i.size))<=r)return u[a];return u[d-1]}(d.minUnit,e,t,n),f=p(c),h=i.valueOrDefault(d.stepSize,d.unitStepSize),m="week"===c&&d.isoWeekday,_=a.ticks.major.enabled,y=l[c],g=r(e),v=r(t),M=[];for(h||(h=function(e,t,n,r){var a,i,o,s=t-e,u=l[n],d=u.size,c=u.steps;if(!c)return Math.ceil(s/(r*d));for(a=0,i=c.length;a<i&&(o=c[a],!(Math.ceil(s/(d*o))<=r));++a);return o}(e,t,c,n)),m&&(g=g.isoWeekday(m),v=v.isoWeekday(m)),g=g.startOf(m?"day":c),(v=v.startOf(m?"day":c))<t&&v.add(1,c),o=r(g),_&&f&&!m&&!d.round&&(o.startOf(f),o.add(~~((g-o)/(y.size*h))*h,c));o<v;o.add(h,c))M.push(+o);return M.push(+o),M}e.exports=function(e){var t=e.Scale.extend({initialize:function(){if(!r)throw new Error("Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com");this.mergeTicksOptions(),e.Scale.prototype.initialize.call(this)},update:function(){var t=this.options;return t.time&&t.time.format&&console.warn("options.time.format is deprecated and replaced by options.time.parser."),e.Scale.prototype.update.apply(this,arguments)},getRightValue:function(t){return t&&void 0!==t.t&&(t=t.t),e.Scale.prototype.getRightValue.call(this,t)},determineDataLimits:function(){var e,t,n,a,l,u,f=this,h=f.chart,p=f.options.time,_=p.unit||"day",y=s,g=o,v=[],M=[],b=[];for(e=0,n=h.data.labels.length;e<n;++e)b.push(m(h.data.labels[e],f));for(e=0,n=(h.data.datasets||[]).length;e<n;++e)if(h.isDatasetVisible(e))if(l=h.data.datasets[e].data,i.isObject(l[0]))for(M[e]=[],t=0,a=l.length;t<a;++t)u=m(l[t],f),v.push(u),M[e][t]=u;else v.push.apply(v,b),M[e]=b.slice(0);else M[e]=[];b.length&&(b=c(b).sort(d),y=Math.min(y,b[0]),g=Math.max(g,b[b.length-1])),v.length&&(v=c(v).sort(d),y=Math.min(y,v[0]),g=Math.max(g,v[v.length-1])),y=m(p.min,f)||y,g=m(p.max,f)||g,y=y===s?+r().startOf(_):y,g=g===o?+r().endOf(_)+1:g,f.min=Math.min(y,g),f.max=Math.max(y+1,g),f._horizontal=f.isHorizontal(),f._table=[],f._timestamps={data:v,datasets:M,labels:b}},buildTicks:function(){var e,t,n,a=this,i=a.min,o=a.max,s=a.options,d=s.time,c=[],y=[];switch(s.ticks.source){case"data":c=a._timestamps.data;break;case"labels":c=a._timestamps.labels;break;case"auto":default:c=_(i,o,a.getLabelCapacity(i),s)}for("ticks"===s.bounds&&c.length&&(i=c[0],o=c[c.length-1]),i=m(d.min,a)||i,o=m(d.max,a)||o,e=0,t=c.length;e<t;++e)(n=c[e])>=i&&n<=o&&y.push(n);return a.min=i,a.max=o,a._unit=d.unit||function(e,t,n,a){var i,o,s=r.duration(r(a).diff(r(n)));for(i=u.length-1;i>=u.indexOf(t);i--)if(o=u[i],l[o].common&&s.as(o)>=e.length)return o;return u[t?u.indexOf(t):0]}(y,d.minUnit,a.min,a.max),a._majorUnit=p(a._unit),a._table=function(e,t,n,r){if("linear"===r||!e.length)return[{time:t,pos:0},{time:n,pos:1}];var a,i,o,s,l,u=[],d=[t];for(a=0,i=e.length;a<i;++a)(s=e[a])>t&&s<n&&d.push(s);for(d.push(n),a=0,i=d.length;a<i;++a)l=d[a+1],o=d[a-1],s=d[a],void 0!==o&&void 0!==l&&Math.round((l+o)/2)===s||u.push({time:s,pos:a/(i-1)});return u}(a._timestamps.data,i,o,s.distribution),a._offsets=function(e,t,n,r,a){var i,o,s=0,l=0;return a.offset&&t.length&&(a.time.min||(i=t.length>1?t[1]:r,o=t[0],s=(f(e,"time",i,"pos")-f(e,"time",o,"pos"))/2),a.time.max||(i=t[t.length-1],o=t.length>1?t[t.length-2]:n,l=(f(e,"time",i,"pos")-f(e,"time",o,"pos"))/2)),{left:s,right:l}}(a._table,y,i,o,s),a._labelFormat=function(e,t){var n,r,a,i=e.length;for(n=0;n<i;n++){if(0!==(r=h(e[n],t)).millisecond())return"MMM D, YYYY h:mm:ss.SSS a";0===r.second()&&0===r.minute()&&0===r.hour()||(a=!0)}return a?"MMM D, YYYY h:mm:ss a":"MMM D, YYYY"}(a._timestamps.data,d),function(e,t){var n,a,i,o,s=[];for(n=0,a=e.length;n<a;++n)i=e[n],o=!!t&&i===+r(i).startOf(t),s.push({value:i,major:o});return s}(y,a._majorUnit)},getLabelForIndex:function(e,t){var n=this.chart.data,r=this.options.time,a=n.labels&&e<n.labels.length?n.labels[e]:"",o=n.datasets[t].data[e];return i.isObject(o)&&(a=this.getRightValue(o)),r.tooltipFormat?h(a,r).format(r.tooltipFormat):"string"==typeof a?a:h(a,r).format(this._labelFormat)},tickFormatFunction:function(e,t,n,r){var a=this.options,o=e.valueOf(),s=a.time.displayFormats,l=s[this._unit],u=this._majorUnit,d=s[u],c=e.clone().startOf(u).valueOf(),f=a.ticks.major,h=f.enabled&&u&&d&&o===c,m=e.format(r||(h?d:l)),p=h?f:a.ticks.minor,_=i.valueOrDefault(p.callback,p.userCallback);return _?_(m,t,n):m},convertTicksToLabels:function(e){var t,n,a=[];for(t=0,n=e.length;t<n;++t)a.push(this.tickFormatFunction(r(e[t].value),t,e));return a},getPixelForOffset:function(e){var t=this,n=t._horizontal?t.width:t.height,r=t._horizontal?t.left:t.top,a=f(t._table,"time",e,"pos");return r+n*(t._offsets.left+a)/(t._offsets.left+1+t._offsets.right)},getPixelForValue:function(e,t,n){var r=null;if(void 0!==t&&void 0!==n&&(r=this._timestamps.datasets[n][t]),null===r&&(r=m(e,this)),null!==r)return this.getPixelForOffset(r)},getPixelForTick:function(e){var t=this.getTicks();return e>=0&&e<t.length?this.getPixelForOffset(t[e].value):null},getValueForPixel:function(e){var t=this,n=t._horizontal?t.width:t.height,a=t._horizontal?t.left:t.top,i=(n?(e-a)/n:0)*(t._offsets.left+1+t._offsets.left)-t._offsets.right,o=f(t._table,"pos",i,"time");return r(o)},getLabelWidth:function(e){var t=this.options.ticks,n=this.ctx.measureText(e).width,r=i.toRadians(t.maxRotation),o=Math.cos(r),s=Math.sin(r);return n*o+i.valueOrDefault(t.fontSize,a.global.defaultFontSize)*s},getLabelCapacity:function(e){var t=this,n=t.options.time.displayFormats.millisecond,a=t.tickFormatFunction(r(e),0,[],n),i=t.getLabelWidth(a),o=t.isHorizontal()?t.width:t.height,s=Math.floor(o/i);return s>0?s:1}});e.scaleService.registerScaleType("time",t,{position:"bottom",distribution:"linear",bounds:"data",time:{parser:!1,format:!1,unit:!1,round:!1,displayFormat:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{millisecond:"h:mm:ss.SSS a",second:"h:mm:ss a",minute:"h:mm a",hour:"hA",day:"MMM D",week:"ll",month:"MMM YYYY",quarter:"[Q]Q - YYYY",year:"YYYY"}},ticks:{autoSkip:!1,source:"auto",major:{enabled:!1}}})}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var r={"./af":28,"./af.js":28,"./ar":29,"./ar-dz":30,"./ar-dz.js":30,"./ar-kw":31,"./ar-kw.js":31,"./ar-ly":32,"./ar-ly.js":32,"./ar-ma":33,"./ar-ma.js":33,"./ar-sa":34,"./ar-sa.js":34,"./ar-tn":35,"./ar-tn.js":35,"./ar.js":29,"./az":36,"./az.js":36,"./be":37,"./be.js":37,"./bg":38,"./bg.js":38,"./bm":39,"./bm.js":39,"./bn":40,"./bn.js":40,"./bo":41,"./bo.js":41,"./br":42,"./br.js":42,"./bs":43,"./bs.js":43,"./ca":44,"./ca.js":44,"./cs":45,"./cs.js":45,"./cv":46,"./cv.js":46,"./cy":47,"./cy.js":47,"./da":48,"./da.js":48,"./de":49,"./de-at":50,"./de-at.js":50,"./de-ch":51,"./de-ch.js":51,"./de.js":49,"./dv":52,"./dv.js":52,"./el":53,"./el.js":53,"./en-au":54,"./en-au.js":54,"./en-ca":55,"./en-ca.js":55,"./en-gb":56,"./en-gb.js":56,"./en-ie":57,"./en-ie.js":57,"./en-il":58,"./en-il.js":58,"./en-nz":59,"./en-nz.js":59,"./eo":60,"./eo.js":60,"./es":61,"./es-do":62,"./es-do.js":62,"./es-us":63,"./es-us.js":63,"./es.js":61,"./et":64,"./et.js":64,"./eu":65,"./eu.js":65,"./fa":66,"./fa.js":66,"./fi":67,"./fi.js":67,"./fo":68,"./fo.js":68,"./fr":69,"./fr-ca":70,"./fr-ca.js":70,"./fr-ch":71,"./fr-ch.js":71,"./fr.js":69,"./fy":72,"./fy.js":72,"./gd":73,"./gd.js":73,"./gl":74,"./gl.js":74,"./gom-latn":75,"./gom-latn.js":75,"./gu":76,"./gu.js":76,"./he":77,"./he.js":77,"./hi":78,"./hi.js":78,"./hr":79,"./hr.js":79,"./hu":80,"./hu.js":80,"./hy-am":81,"./hy-am.js":81,"./id":82,"./id.js":82,"./is":83,"./is.js":83,"./it":84,"./it.js":84,"./ja":85,"./ja.js":85,"./jv":86,"./jv.js":86,"./ka":87,"./ka.js":87,"./kk":88,"./kk.js":88,"./km":89,"./km.js":89,"./kn":90,"./kn.js":90,"./ko":91,"./ko.js":91,"./ky":92,"./ky.js":92,"./lb":93,"./lb.js":93,"./lo":94,"./lo.js":94,"./lt":95,"./lt.js":95,"./lv":96,"./lv.js":96,"./me":97,"./me.js":97,"./mi":98,"./mi.js":98,"./mk":99,"./mk.js":99,"./ml":100,"./ml.js":100,"./mn":101,"./mn.js":101,"./mr":102,"./mr.js":102,"./ms":103,"./ms-my":104,"./ms-my.js":104,"./ms.js":103,"./mt":105,"./mt.js":105,"./my":106,"./my.js":106,"./nb":107,"./nb.js":107,"./ne":108,"./ne.js":108,"./nl":109,"./nl-be":110,"./nl-be.js":110,"./nl.js":109,"./nn":111,"./nn.js":111,"./pa-in":112,"./pa-in.js":112,"./pl":113,"./pl.js":113,"./pt":114,"./pt-br":115,"./pt-br.js":115,"./pt.js":114,"./ro":116,"./ro.js":116,"./ru":117,"./ru.js":117,"./sd":118,"./sd.js":118,"./se":119,"./se.js":119,"./si":120,"./si.js":120,"./sk":121,"./sk.js":121,"./sl":122,"./sl.js":122,"./sq":123,"./sq.js":123,"./sr":124,"./sr-cyrl":125,"./sr-cyrl.js":125,"./sr.js":124,"./ss":126,"./ss.js":126,"./sv":127,"./sv.js":127,"./sw":128,"./sw.js":128,"./ta":129,"./ta.js":129,"./te":130,"./te.js":130,"./tet":131,"./tet.js":131,"./tg":132,"./tg.js":132,"./th":133,"./th.js":133,"./tl-ph":134,"./tl-ph.js":134,"./tlh":135,"./tlh.js":135,"./tr":136,"./tr.js":136,"./tzl":137,"./tzl.js":137,"./tzm":138,"./tzm-latn":139,"./tzm-latn.js":139,"./tzm.js":138,"./ug-cn":140,"./ug-cn.js":140,"./uk":141,"./uk.js":141,"./ur":142,"./ur.js":142,"./uz":143,"./uz-latn":144,"./uz-latn.js":144,"./uz.js":143,"./vi":145,"./vi.js":145,"./x-pseudo":146,"./x-pseudo.js":146,"./yo":147,"./yo.js":147,"./zh-cn":148,"./zh-cn.js":148,"./zh-hk":149,"./zh-hk.js":149,"./zh-tw":150,"./zh-tw.js":150};function a(e){var t=i(e);return n(t)}function i(e){var t=r[e];if(!(t+1)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t}a.keys=function(){return Object.keys(r)},a.resolve=i,e.exports=a,a.id=229},function(e,t,n){"use strict";var r=n(4),a=n(11),i=n(3);r._set("bar",{hover:{mode:"label"},scales:{xAxes:[{type:"category",categoryPercentage:.8,barPercentage:.9,offset:!0,gridLines:{offsetGridLines:!0}}],yAxes:[{type:"linear"}]}}),r._set("horizontalBar",{hover:{mode:"index",axis:"y"},scales:{xAxes:[{type:"linear",position:"bottom"}],yAxes:[{position:"left",type:"category",categoryPercentage:.8,barPercentage:.9,offset:!0,gridLines:{offsetGridLines:!0}}]},elements:{rectangle:{borderSkipped:"left"}},tooltips:{callbacks:{title:function(e,t){var n="";return e.length>0&&(e[0].yLabel?n=e[0].yLabel:t.labels.length>0&&e[0].index<t.labels.length&&(n=t.labels[e[0].index])),n},label:function(e,t){return(t.datasets[e.datasetIndex].label||"")+": "+e.xLabel}},mode:"index",axis:"y"}}),e.exports=function(e){e.controllers.bar=e.DatasetController.extend({dataElementType:a.Rectangle,initialize:function(){var t;e.DatasetController.prototype.initialize.apply(this,arguments),(t=this.getMeta()).stack=this.getDataset().stack,t.bar=!0},update:function(e){var t,n,r=this.getMeta().data;for(this._ruler=this.getRuler(),t=0,n=r.length;t<n;++t)this.updateElement(r[t],t,e)},updateElement:function(e,t,n){var r=this,a=r.chart,o=r.getMeta(),s=r.getDataset(),l=e.custom||{},u=a.options.elements.rectangle;e._xScale=r.getScaleForId(o.xAxisID),e._yScale=r.getScaleForId(o.yAxisID),e._datasetIndex=r.index,e._index=t,e._model={datasetLabel:s.label,label:a.data.labels[t],borderSkipped:l.borderSkipped?l.borderSkipped:u.borderSkipped,backgroundColor:l.backgroundColor?l.backgroundColor:i.valueAtIndexOrDefault(s.backgroundColor,t,u.backgroundColor),borderColor:l.borderColor?l.borderColor:i.valueAtIndexOrDefault(s.borderColor,t,u.borderColor),borderWidth:l.borderWidth?l.borderWidth:i.valueAtIndexOrDefault(s.borderWidth,t,u.borderWidth)},r.updateElementGeometry(e,t,n),e.pivot()},updateElementGeometry:function(e,t,n){var r=this,a=e._model,i=r.getValueScale(),o=i.getBasePixel(),s=i.isHorizontal(),l=r._ruler||r.getRuler(),u=r.calculateBarValuePixels(r.index,t),d=r.calculateBarIndexPixels(r.index,t,l);a.horizontal=s,a.base=n?o:u.base,a.x=s?n?o:u.head:d.center,a.y=s?d.center:n?o:u.head,a.height=s?d.size:void 0,a.width=s?void 0:d.size},getValueScaleId:function(){return this.getMeta().yAxisID},getIndexScaleId:function(){return this.getMeta().xAxisID},getValueScale:function(){return this.getScaleForId(this.getValueScaleId())},getIndexScale:function(){return this.getScaleForId(this.getIndexScaleId())},_getStacks:function(e){var t,n,r=this.chart,a=this.getIndexScale().options.stacked,i=void 0===e?r.data.datasets.length:e+1,o=[];for(t=0;t<i;++t)(n=r.getDatasetMeta(t)).bar&&r.isDatasetVisible(t)&&(!1===a||!0===a&&-1===o.indexOf(n.stack)||void 0===a&&(void 0===n.stack||-1===o.indexOf(n.stack)))&&o.push(n.stack);return o},getStackCount:function(){return this._getStacks().length},getStackIndex:function(e,t){var n=this._getStacks(e),r=void 0!==t?n.indexOf(t):-1;return-1===r?n.length-1:r},getRuler:function(){var e,t,n=this.getIndexScale(),r=this.getStackCount(),a=this.index,o=n.isHorizontal(),s=o?n.left:n.top,l=s+(o?n.width:n.height),u=[];for(e=0,t=this.getMeta().data.length;e<t;++e)u.push(n.getPixelForValue(null,e,a));return{min:i.isNullOrUndef(n.options.barThickness)?function(e,t){var n,r,a,i,o=e.isHorizontal()?e.width:e.height,s=e.getTicks();for(a=1,i=t.length;a<i;++a)o=Math.min(o,t[a]-t[a-1]);for(a=0,i=s.length;a<i;++a)r=e.getPixelForTick(a),o=a>0?Math.min(o,r-n):o,n=r;return o}(n,u):-1,pixels:u,start:s,end:l,stackCount:r,scale:n}},calculateBarValuePixels:function(e,t){var n,r,a,i,o,s,l=this.chart,u=this.getMeta(),d=this.getValueScale(),c=l.data.datasets,f=d.getRightValue(c[e].data[t]),h=d.options.stacked,m=u.stack,p=0;if(h||void 0===h&&void 0!==m)for(n=0;n<e;++n)(r=l.getDatasetMeta(n)).bar&&r.stack===m&&r.controller.getValueScaleId()===d.id&&l.isDatasetVisible(n)&&(a=d.getRightValue(c[n].data[t]),(f<0&&a<0||f>=0&&a>0)&&(p+=a));return i=d.getPixelForValue(p),{size:s=((o=d.getPixelForValue(p+f))-i)/2,base:i,head:o,center:o+s/2}},calculateBarIndexPixels:function(e,t,n){var r=n.scale.options,a="flex"===r.barThickness?function(e,t,n){var r,a=t.pixels,i=a[e],o=e>0?a[e-1]:null,s=e<a.length-1?a[e+1]:null,l=n.categoryPercentage;return null===o&&(o=i-(null===s?t.end-i:s-i)),null===s&&(s=i+i-o),r=i-(i-o)/2*l,{chunk:(s-o)/2*l/t.stackCount,ratio:n.barPercentage,start:r}}(t,n,r):function(e,t,n){var r,a,o=n.barThickness,s=t.stackCount,l=t.pixels[e];return i.isNullOrUndef(o)?(r=t.min*n.categoryPercentage,a=n.barPercentage):(r=o*s,a=1),{chunk:r/s,ratio:a,start:l-r/2}}(t,n,r),o=this.getStackIndex(e,this.getMeta().stack),s=a.start+a.chunk*o+a.chunk/2,l=Math.min(i.valueOrDefault(r.maxBarThickness,1/0),a.chunk*a.ratio);return{base:s-l/2,head:s+l/2,center:s,size:l}},draw:function(){var e=this.chart,t=this.getValueScale(),n=this.getMeta().data,r=this.getDataset(),a=n.length,o=0;for(i.canvas.clipArea(e.ctx,e.chartArea);o<a;++o)isNaN(t.getRightValue(r.data[o]))||n[o].draw();i.canvas.unclipArea(e.ctx)},setHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],n=e._index,r=e.custom||{},a=e._model;a.backgroundColor=r.hoverBackgroundColor?r.hoverBackgroundColor:i.valueAtIndexOrDefault(t.hoverBackgroundColor,n,i.getHoverColor(a.backgroundColor)),a.borderColor=r.hoverBorderColor?r.hoverBorderColor:i.valueAtIndexOrDefault(t.hoverBorderColor,n,i.getHoverColor(a.borderColor)),a.borderWidth=r.hoverBorderWidth?r.hoverBorderWidth:i.valueAtIndexOrDefault(t.hoverBorderWidth,n,a.borderWidth)},removeHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],n=e._index,r=e.custom||{},a=e._model,o=this.chart.options.elements.rectangle;a.backgroundColor=r.backgroundColor?r.backgroundColor:i.valueAtIndexOrDefault(t.backgroundColor,n,o.backgroundColor),a.borderColor=r.borderColor?r.borderColor:i.valueAtIndexOrDefault(t.borderColor,n,o.borderColor),a.borderWidth=r.borderWidth?r.borderWidth:i.valueAtIndexOrDefault(t.borderWidth,n,o.borderWidth)}}),e.controllers.horizontalBar=e.controllers.bar.extend({getValueScaleId:function(){return this.getMeta().xAxisID},getIndexScaleId:function(){return this.getMeta().yAxisID}})}},function(e,t,n){"use strict";var r=n(4),a=n(11),i=n(3);r._set("bubble",{hover:{mode:"single"},scales:{xAxes:[{type:"linear",position:"bottom",id:"x-axis-0"}],yAxes:[{type:"linear",position:"left",id:"y-axis-0"}]},tooltips:{callbacks:{title:function(){return""},label:function(e,t){var n=t.datasets[e.datasetIndex].label||"",r=t.datasets[e.datasetIndex].data[e.index];return n+": ("+e.xLabel+", "+e.yLabel+", "+r.r+")"}}}}),e.exports=function(e){e.controllers.bubble=e.DatasetController.extend({dataElementType:a.Point,update:function(e){var t=this,n=t.getMeta().data;i.each(n,function(n,r){t.updateElement(n,r,e)})},updateElement:function(e,t,n){var r=this,a=r.getMeta(),i=e.custom||{},o=r.getScaleForId(a.xAxisID),s=r.getScaleForId(a.yAxisID),l=r._resolveElementOptions(e,t),u=r.getDataset().data[t],d=r.index,c=n?o.getPixelForDecimal(.5):o.getPixelForValue("object"==typeof u?u:NaN,t,d),f=n?s.getBasePixel():s.getPixelForValue(u,t,d);e._xScale=o,e._yScale=s,e._options=l,e._datasetIndex=d,e._index=t,e._model={backgroundColor:l.backgroundColor,borderColor:l.borderColor,borderWidth:l.borderWidth,hitRadius:l.hitRadius,pointStyle:l.pointStyle,radius:n?0:l.radius,skip:i.skip||isNaN(c)||isNaN(f),x:c,y:f},e.pivot()},setHoverStyle:function(e){var t=e._model,n=e._options;t.backgroundColor=i.valueOrDefault(n.hoverBackgroundColor,i.getHoverColor(n.backgroundColor)),t.borderColor=i.valueOrDefault(n.hoverBorderColor,i.getHoverColor(n.borderColor)),t.borderWidth=i.valueOrDefault(n.hoverBorderWidth,n.borderWidth),t.radius=n.radius+n.hoverRadius},removeHoverStyle:function(e){var t=e._model,n=e._options;t.backgroundColor=n.backgroundColor,t.borderColor=n.borderColor,t.borderWidth=n.borderWidth,t.radius=n.radius},_resolveElementOptions:function(e,t){var n,r,a,o=this.chart,s=o.data.datasets[this.index],l=e.custom||{},u=o.options.elements.point,d=i.options.resolve,c=s.data[t],f={},h={chart:o,dataIndex:t,dataset:s,datasetIndex:this.index},m=["backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","hoverRadius","hitRadius","pointStyle"];for(n=0,r=m.length;n<r;++n)f[a=m[n]]=d([l[a],s[a],u[a]],h,t);return f.radius=d([l.radius,c?c.r:void 0,s.radius,u.radius],h,t),f}})}},function(e,t,n){"use strict";var r=n(4),a=n(11),i=n(3);r._set("doughnut",{animation:{animateRotate:!0,animateScale:!1},hover:{mode:"single"},legendCallback:function(e){var t=[];t.push('<ul class="'+e.id+'-legend">');var n=e.data,r=n.datasets,a=n.labels;if(r.length)for(var i=0;i<r[0].data.length;++i)t.push('<li><span style="background-color:'+r[0].backgroundColor[i]+'"></span>'),a[i]&&t.push(a[i]),t.push("</li>");return t.push("</ul>"),t.join("")},legend:{labels:{generateLabels:function(e){var t=e.data;return t.labels.length&&t.datasets.length?t.labels.map(function(n,r){var a=e.getDatasetMeta(0),o=t.datasets[0],s=a.data[r],l=s&&s.custom||{},u=i.valueAtIndexOrDefault,d=e.options.elements.arc;return{text:n,fillStyle:l.backgroundColor?l.backgroundColor:u(o.backgroundColor,r,d.backgroundColor),strokeStyle:l.borderColor?l.borderColor:u(o.borderColor,r,d.borderColor),lineWidth:l.borderWidth?l.borderWidth:u(o.borderWidth,r,d.borderWidth),hidden:isNaN(o.data[r])||a.data[r].hidden,index:r}}):[]}},onClick:function(e,t){var n,r,a,i=t.index,o=this.chart;for(n=0,r=(o.data.datasets||[]).length;n<r;++n)(a=o.getDatasetMeta(n)).data[i]&&(a.data[i].hidden=!a.data[i].hidden);o.update()}},cutoutPercentage:50,rotation:-.5*Math.PI,circumference:2*Math.PI,tooltips:{callbacks:{title:function(){return""},label:function(e,t){var n=t.labels[e.index],r=": "+t.datasets[e.datasetIndex].data[e.index];return i.isArray(n)?(n=n.slice())[0]+=r:n+=r,n}}}}),r._set("pie",i.clone(r.doughnut)),r._set("pie",{cutoutPercentage:0}),e.exports=function(e){e.controllers.doughnut=e.controllers.pie=e.DatasetController.extend({dataElementType:a.Arc,linkScales:i.noop,getRingIndex:function(e){for(var t=0,n=0;n<e;++n)this.chart.isDatasetVisible(n)&&++t;return t},update:function(e){var t=this,n=t.chart,r=n.chartArea,a=n.options,o=a.elements.arc,s=r.right-r.left-o.borderWidth,l=r.bottom-r.top-o.borderWidth,u=Math.min(s,l),d={x:0,y:0},c=t.getMeta(),f=a.cutoutPercentage,h=a.circumference;if(h<2*Math.PI){var m=a.rotation%(2*Math.PI),p=(m+=2*Math.PI*(m>=Math.PI?-1:m<-Math.PI?1:0))+h,_={x:Math.cos(m),y:Math.sin(m)},y={x:Math.cos(p),y:Math.sin(p)},g=m<=0&&p>=0||m<=2*Math.PI&&2*Math.PI<=p,v=m<=.5*Math.PI&&.5*Math.PI<=p||m<=2.5*Math.PI&&2.5*Math.PI<=p,M=m<=-Math.PI&&-Math.PI<=p||m<=Math.PI&&Math.PI<=p,b=m<=.5*-Math.PI&&.5*-Math.PI<=p||m<=1.5*Math.PI&&1.5*Math.PI<=p,L=f/100,k={x:M?-1:Math.min(_.x*(_.x<0?1:L),y.x*(y.x<0?1:L)),y:b?-1:Math.min(_.y*(_.y<0?1:L),y.y*(y.y<0?1:L))},x={x:g?1:Math.max(_.x*(_.x>0?1:L),y.x*(y.x>0?1:L)),y:v?1:Math.max(_.y*(_.y>0?1:L),y.y*(y.y>0?1:L))},w={width:.5*(x.x-k.x),height:.5*(x.y-k.y)};u=Math.min(s/w.width,l/w.height),d={x:-.5*(x.x+k.x),y:-.5*(x.y+k.y)}}n.borderWidth=t.getMaxBorderWidth(c.data),n.outerRadius=Math.max((u-n.borderWidth)/2,0),n.innerRadius=Math.max(f?n.outerRadius/100*f:0,0),n.radiusLength=(n.outerRadius-n.innerRadius)/n.getVisibleDatasetCount(),n.offsetX=d.x*n.outerRadius,n.offsetY=d.y*n.outerRadius,c.total=t.calculateTotal(),t.outerRadius=n.outerRadius-n.radiusLength*t.getRingIndex(t.index),t.innerRadius=Math.max(t.outerRadius-n.radiusLength,0),i.each(c.data,function(n,r){t.updateElement(n,r,e)})},updateElement:function(e,t,n){var r=this,a=r.chart,o=a.chartArea,s=a.options,l=s.animation,u=(o.left+o.right)/2,d=(o.top+o.bottom)/2,c=s.rotation,f=s.rotation,h=r.getDataset(),m=n&&l.animateRotate?0:e.hidden?0:r.calculateCircumference(h.data[t])*(s.circumference/(2*Math.PI)),p=n&&l.animateScale?0:r.innerRadius,_=n&&l.animateScale?0:r.outerRadius,y=i.valueAtIndexOrDefault;i.extend(e,{_datasetIndex:r.index,_index:t,_model:{x:u+a.offsetX,y:d+a.offsetY,startAngle:c,endAngle:f,circumference:m,outerRadius:_,innerRadius:p,label:y(h.label,t,a.data.labels[t])}});var g=e._model;this.removeHoverStyle(e),n&&l.animateRotate||(g.startAngle=0===t?s.rotation:r.getMeta().data[t-1]._model.endAngle,g.endAngle=g.startAngle+g.circumference),e.pivot()},removeHoverStyle:function(t){e.DatasetController.prototype.removeHoverStyle.call(this,t,this.chart.options.elements.arc)},calculateTotal:function(){var e,t=this.getDataset(),n=this.getMeta(),r=0;return i.each(n.data,function(n,a){e=t.data[a],isNaN(e)||n.hidden||(r+=Math.abs(e))}),r},calculateCircumference:function(e){var t=this.getMeta().total;return t>0&&!isNaN(e)?2*Math.PI*(Math.abs(e)/t):0},getMaxBorderWidth:function(e){for(var t,n,r=0,a=this.index,i=e.length,o=0;o<i;o++)t=e[o]._model?e[o]._model.borderWidth:0,r=(n=e[o]._chart?e[o]._chart.config.data.datasets[a].hoverBorderWidth:0)>(r=t>r?t:r)?n:r;return r}})}},function(e,t,n){"use strict";var r=n(4),a=n(11),i=n(3);r._set("line",{showLines:!0,spanGaps:!1,hover:{mode:"label"},scales:{xAxes:[{type:"category",id:"x-axis-0"}],yAxes:[{type:"linear",id:"y-axis-0"}]}}),e.exports=function(e){function t(e,t){return i.valueOrDefault(e.showLine,t.showLines)}e.controllers.line=e.DatasetController.extend({datasetElementType:a.Line,dataElementType:a.Point,update:function(e){var n,r,a,o=this,s=o.getMeta(),l=s.dataset,u=s.data||[],d=o.chart.options,c=d.elements.line,f=o.getScaleForId(s.yAxisID),h=o.getDataset(),m=t(h,d);for(m&&(a=l.custom||{},void 0!==h.tension&&void 0===h.lineTension&&(h.lineTension=h.tension),l._scale=f,l._datasetIndex=o.index,l._children=u,l._model={spanGaps:h.spanGaps?h.spanGaps:d.spanGaps,tension:a.tension?a.tension:i.valueOrDefault(h.lineTension,c.tension),backgroundColor:a.backgroundColor?a.backgroundColor:h.backgroundColor||c.backgroundColor,borderWidth:a.borderWidth?a.borderWidth:h.borderWidth||c.borderWidth,borderColor:a.borderColor?a.borderColor:h.borderColor||c.borderColor,borderCapStyle:a.borderCapStyle?a.borderCapStyle:h.borderCapStyle||c.borderCapStyle,borderDash:a.borderDash?a.borderDash:h.borderDash||c.borderDash,borderDashOffset:a.borderDashOffset?a.borderDashOffset:h.borderDashOffset||c.borderDashOffset,borderJoinStyle:a.borderJoinStyle?a.borderJoinStyle:h.borderJoinStyle||c.borderJoinStyle,fill:a.fill?a.fill:void 0!==h.fill?h.fill:c.fill,steppedLine:a.steppedLine?a.steppedLine:i.valueOrDefault(h.steppedLine,c.stepped),cubicInterpolationMode:a.cubicInterpolationMode?a.cubicInterpolationMode:i.valueOrDefault(h.cubicInterpolationMode,c.cubicInterpolationMode)},l.pivot()),n=0,r=u.length;n<r;++n)o.updateElement(u[n],n,e);for(m&&0!==l._model.tension&&o.updateBezierControlPoints(),n=0,r=u.length;n<r;++n)u[n].pivot()},getPointBackgroundColor:function(e,t){var n=this.chart.options.elements.point.backgroundColor,r=this.getDataset(),a=e.custom||{};return a.backgroundColor?n=a.backgroundColor:r.pointBackgroundColor?n=i.valueAtIndexOrDefault(r.pointBackgroundColor,t,n):r.backgroundColor&&(n=r.backgroundColor),n},getPointBorderColor:function(e,t){var n=this.chart.options.elements.point.borderColor,r=this.getDataset(),a=e.custom||{};return a.borderColor?n=a.borderColor:r.pointBorderColor?n=i.valueAtIndexOrDefault(r.pointBorderColor,t,n):r.borderColor&&(n=r.borderColor),n},getPointBorderWidth:function(e,t){var n=this.chart.options.elements.point.borderWidth,r=this.getDataset(),a=e.custom||{};return isNaN(a.borderWidth)?!isNaN(r.pointBorderWidth)||i.isArray(r.pointBorderWidth)?n=i.valueAtIndexOrDefault(r.pointBorderWidth,t,n):isNaN(r.borderWidth)||(n=r.borderWidth):n=a.borderWidth,n},updateElement:function(e,t,n){var r,a,o=this,s=o.getMeta(),l=e.custom||{},u=o.getDataset(),d=o.index,c=u.data[t],f=o.getScaleForId(s.yAxisID),h=o.getScaleForId(s.xAxisID),m=o.chart.options.elements.point;void 0!==u.radius&&void 0===u.pointRadius&&(u.pointRadius=u.radius),void 0!==u.hitRadius&&void 0===u.pointHitRadius&&(u.pointHitRadius=u.hitRadius),r=h.getPixelForValue("object"==typeof c?c:NaN,t,d),a=n?f.getBasePixel():o.calculatePointY(c,t,d),e._xScale=h,e._yScale=f,e._datasetIndex=d,e._index=t,e._model={x:r,y:a,skip:l.skip||isNaN(r)||isNaN(a),radius:l.radius||i.valueAtIndexOrDefault(u.pointRadius,t,m.radius),pointStyle:l.pointStyle||i.valueAtIndexOrDefault(u.pointStyle,t,m.pointStyle),backgroundColor:o.getPointBackgroundColor(e,t),borderColor:o.getPointBorderColor(e,t),borderWidth:o.getPointBorderWidth(e,t),tension:s.dataset._model?s.dataset._model.tension:0,steppedLine:!!s.dataset._model&&s.dataset._model.steppedLine,hitRadius:l.hitRadius||i.valueAtIndexOrDefault(u.pointHitRadius,t,m.hitRadius)}},calculatePointY:function(e,t,n){var r,a,i,o=this.chart,s=this.getMeta(),l=this.getScaleForId(s.yAxisID),u=0,d=0;if(l.options.stacked){for(r=0;r<n;r++)if(a=o.data.datasets[r],"line"===(i=o.getDatasetMeta(r)).type&&i.yAxisID===l.id&&o.isDatasetVisible(r)){var c=Number(l.getRightValue(a.data[t]));c<0?d+=c||0:u+=c||0}var f=Number(l.getRightValue(e));return f<0?l.getPixelForValue(d+f):l.getPixelForValue(u+f)}return l.getPixelForValue(e)},updateBezierControlPoints:function(){var e,t,n,r,a=this.getMeta(),o=this.chart.chartArea,s=a.data||[];function l(e,t,n){return Math.max(Math.min(e,n),t)}if(a.dataset._model.spanGaps&&(s=s.filter(function(e){return!e._model.skip})),"monotone"===a.dataset._model.cubicInterpolationMode)i.splineCurveMonotone(s);else for(e=0,t=s.length;e<t;++e)n=s[e]._model,r=i.splineCurve(i.previousItem(s,e)._model,n,i.nextItem(s,e)._model,a.dataset._model.tension),n.controlPointPreviousX=r.previous.x,n.controlPointPreviousY=r.previous.y,n.controlPointNextX=r.next.x,n.controlPointNextY=r.next.y;if(this.chart.options.elements.line.capBezierPoints)for(e=0,t=s.length;e<t;++e)(n=s[e]._model).controlPointPreviousX=l(n.controlPointPreviousX,o.left,o.right),n.controlPointPreviousY=l(n.controlPointPreviousY,o.top,o.bottom),n.controlPointNextX=l(n.controlPointNextX,o.left,o.right),n.controlPointNextY=l(n.controlPointNextY,o.top,o.bottom)},draw:function(){var e=this.chart,n=this.getMeta(),r=n.data||[],a=e.chartArea,o=r.length,s=0;for(i.canvas.clipArea(e.ctx,a),t(this.getDataset(),e.options)&&n.dataset.draw(),i.canvas.unclipArea(e.ctx);s<o;++s)r[s].draw(a)},setHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],n=e._index,r=e.custom||{},a=e._model;a.radius=r.hoverRadius||i.valueAtIndexOrDefault(t.pointHoverRadius,n,this.chart.options.elements.point.hoverRadius),a.backgroundColor=r.hoverBackgroundColor||i.valueAtIndexOrDefault(t.pointHoverBackgroundColor,n,i.getHoverColor(a.backgroundColor)),a.borderColor=r.hoverBorderColor||i.valueAtIndexOrDefault(t.pointHoverBorderColor,n,i.getHoverColor(a.borderColor)),a.borderWidth=r.hoverBorderWidth||i.valueAtIndexOrDefault(t.pointHoverBorderWidth,n,a.borderWidth)},removeHoverStyle:function(e){var t=this,n=t.chart.data.datasets[e._datasetIndex],r=e._index,a=e.custom||{},o=e._model;void 0!==n.radius&&void 0===n.pointRadius&&(n.pointRadius=n.radius),o.radius=a.radius||i.valueAtIndexOrDefault(n.pointRadius,r,t.chart.options.elements.point.radius),o.backgroundColor=t.getPointBackgroundColor(e,r),o.borderColor=t.getPointBorderColor(e,r),o.borderWidth=t.getPointBorderWidth(e,r)}})}},function(e,t,n){"use strict";var r=n(4),a=n(11),i=n(3);r._set("polarArea",{scale:{type:"radialLinear",angleLines:{display:!1},gridLines:{circular:!0},pointLabels:{display:!1},ticks:{beginAtZero:!0}},animation:{animateRotate:!0,animateScale:!0},startAngle:-.5*Math.PI,legendCallback:function(e){var t=[];t.push('<ul class="'+e.id+'-legend">');var n=e.data,r=n.datasets,a=n.labels;if(r.length)for(var i=0;i<r[0].data.length;++i)t.push('<li><span style="background-color:'+r[0].backgroundColor[i]+'"></span>'),a[i]&&t.push(a[i]),t.push("</li>");return t.push("</ul>"),t.join("")},legend:{labels:{generateLabels:function(e){var t=e.data;return t.labels.length&&t.datasets.length?t.labels.map(function(n,r){var a=e.getDatasetMeta(0),o=t.datasets[0],s=a.data[r].custom||{},l=i.valueAtIndexOrDefault,u=e.options.elements.arc;return{text:n,fillStyle:s.backgroundColor?s.backgroundColor:l(o.backgroundColor,r,u.backgroundColor),strokeStyle:s.borderColor?s.borderColor:l(o.borderColor,r,u.borderColor),lineWidth:s.borderWidth?s.borderWidth:l(o.borderWidth,r,u.borderWidth),hidden:isNaN(o.data[r])||a.data[r].hidden,index:r}}):[]}},onClick:function(e,t){var n,r,a,i=t.index,o=this.chart;for(n=0,r=(o.data.datasets||[]).length;n<r;++n)(a=o.getDatasetMeta(n)).data[i].hidden=!a.data[i].hidden;o.update()}},tooltips:{callbacks:{title:function(){return""},label:function(e,t){return t.labels[e.index]+": "+e.yLabel}}}}),e.exports=function(e){e.controllers.polarArea=e.DatasetController.extend({dataElementType:a.Arc,linkScales:i.noop,update:function(e){var t=this,n=t.chart,r=n.chartArea,a=t.getMeta(),o=n.options,s=o.elements.arc,l=Math.min(r.right-r.left,r.bottom-r.top);n.outerRadius=Math.max((l-s.borderWidth/2)/2,0),n.innerRadius=Math.max(o.cutoutPercentage?n.outerRadius/100*o.cutoutPercentage:1,0),n.radiusLength=(n.outerRadius-n.innerRadius)/n.getVisibleDatasetCount(),t.outerRadius=n.outerRadius-n.radiusLength*t.index,t.innerRadius=t.outerRadius-n.radiusLength,a.count=t.countVisibleElements(),i.each(a.data,function(n,r){t.updateElement(n,r,e)})},updateElement:function(e,t,n){for(var r=this,a=r.chart,o=r.getDataset(),s=a.options,l=s.animation,u=a.scale,d=a.data.labels,c=r.calculateCircumference(o.data[t]),f=u.xCenter,h=u.yCenter,m=0,p=r.getMeta(),_=0;_<t;++_)isNaN(o.data[_])||p.data[_].hidden||++m;var y=s.startAngle,g=e.hidden?0:u.getDistanceFromCenterForValue(o.data[t]),v=y+c*m,M=v+(e.hidden?0:c),b=l.animateScale?0:u.getDistanceFromCenterForValue(o.data[t]);i.extend(e,{_datasetIndex:r.index,_index:t,_scale:u,_model:{x:f,y:h,innerRadius:0,outerRadius:n?b:g,startAngle:n&&l.animateRotate?y:v,endAngle:n&&l.animateRotate?y:M,label:i.valueAtIndexOrDefault(d,t,d[t])}}),r.removeHoverStyle(e),e.pivot()},removeHoverStyle:function(t){e.DatasetController.prototype.removeHoverStyle.call(this,t,this.chart.options.elements.arc)},countVisibleElements:function(){var e=this.getDataset(),t=this.getMeta(),n=0;return i.each(t.data,function(t,r){isNaN(e.data[r])||t.hidden||n++}),n},calculateCircumference:function(e){var t=this.getMeta().count;return t>0&&!isNaN(e)?2*Math.PI/t:0}})}},function(e,t,n){"use strict";var r=n(4),a=n(11),i=n(3);r._set("radar",{scale:{type:"radialLinear"},elements:{line:{tension:0}}}),e.exports=function(e){e.controllers.radar=e.DatasetController.extend({datasetElementType:a.Line,dataElementType:a.Point,linkScales:i.noop,update:function(e){var t=this,n=t.getMeta(),r=n.dataset,a=n.data,o=r.custom||{},s=t.getDataset(),l=t.chart.options.elements.line,u=t.chart.scale;void 0!==s.tension&&void 0===s.lineTension&&(s.lineTension=s.tension),i.extend(n.dataset,{_datasetIndex:t.index,_scale:u,_children:a,_loop:!0,_model:{tension:o.tension?o.tension:i.valueOrDefault(s.lineTension,l.tension),backgroundColor:o.backgroundColor?o.backgroundColor:s.backgroundColor||l.backgroundColor,borderWidth:o.borderWidth?o.borderWidth:s.borderWidth||l.borderWidth,borderColor:o.borderColor?o.borderColor:s.borderColor||l.borderColor,fill:o.fill?o.fill:void 0!==s.fill?s.fill:l.fill,borderCapStyle:o.borderCapStyle?o.borderCapStyle:s.borderCapStyle||l.borderCapStyle,borderDash:o.borderDash?o.borderDash:s.borderDash||l.borderDash,borderDashOffset:o.borderDashOffset?o.borderDashOffset:s.borderDashOffset||l.borderDashOffset,borderJoinStyle:o.borderJoinStyle?o.borderJoinStyle:s.borderJoinStyle||l.borderJoinStyle}}),n.dataset.pivot(),i.each(a,function(n,r){t.updateElement(n,r,e)},t),t.updateBezierControlPoints()},updateElement:function(e,t,n){var r=this,a=e.custom||{},o=r.getDataset(),s=r.chart.scale,l=r.chart.options.elements.point,u=s.getPointPositionForValue(t,o.data[t]);void 0!==o.radius&&void 0===o.pointRadius&&(o.pointRadius=o.radius),void 0!==o.hitRadius&&void 0===o.pointHitRadius&&(o.pointHitRadius=o.hitRadius),i.extend(e,{_datasetIndex:r.index,_index:t,_scale:s,_model:{x:n?s.xCenter:u.x,y:n?s.yCenter:u.y,tension:a.tension?a.tension:i.valueOrDefault(o.lineTension,r.chart.options.elements.line.tension),radius:a.radius?a.radius:i.valueAtIndexOrDefault(o.pointRadius,t,l.radius),backgroundColor:a.backgroundColor?a.backgroundColor:i.valueAtIndexOrDefault(o.pointBackgroundColor,t,l.backgroundColor),borderColor:a.borderColor?a.borderColor:i.valueAtIndexOrDefault(o.pointBorderColor,t,l.borderColor),borderWidth:a.borderWidth?a.borderWidth:i.valueAtIndexOrDefault(o.pointBorderWidth,t,l.borderWidth),pointStyle:a.pointStyle?a.pointStyle:i.valueAtIndexOrDefault(o.pointStyle,t,l.pointStyle),hitRadius:a.hitRadius?a.hitRadius:i.valueAtIndexOrDefault(o.pointHitRadius,t,l.hitRadius)}}),e._model.skip=a.skip?a.skip:isNaN(e._model.x)||isNaN(e._model.y)},updateBezierControlPoints:function(){var e=this.chart.chartArea,t=this.getMeta();i.each(t.data,function(n,r){var a=n._model,o=i.splineCurve(i.previousItem(t.data,r,!0)._model,a,i.nextItem(t.data,r,!0)._model,a.tension);a.controlPointPreviousX=Math.max(Math.min(o.previous.x,e.right),e.left),a.controlPointPreviousY=Math.max(Math.min(o.previous.y,e.bottom),e.top),a.controlPointNextX=Math.max(Math.min(o.next.x,e.right),e.left),a.controlPointNextY=Math.max(Math.min(o.next.y,e.bottom),e.top),n.pivot()})},setHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],n=e.custom||{},r=e._index,a=e._model;a.radius=n.hoverRadius?n.hoverRadius:i.valueAtIndexOrDefault(t.pointHoverRadius,r,this.chart.options.elements.point.hoverRadius),a.backgroundColor=n.hoverBackgroundColor?n.hoverBackgroundColor:i.valueAtIndexOrDefault(t.pointHoverBackgroundColor,r,i.getHoverColor(a.backgroundColor)),a.borderColor=n.hoverBorderColor?n.hoverBorderColor:i.valueAtIndexOrDefault(t.pointHoverBorderColor,r,i.getHoverColor(a.borderColor)),a.borderWidth=n.hoverBorderWidth?n.hoverBorderWidth:i.valueAtIndexOrDefault(t.pointHoverBorderWidth,r,a.borderWidth)},removeHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],n=e.custom||{},r=e._index,a=e._model,o=this.chart.options.elements.point;a.radius=n.radius?n.radius:i.valueAtIndexOrDefault(t.pointRadius,r,o.radius),a.backgroundColor=n.backgroundColor?n.backgroundColor:i.valueAtIndexOrDefault(t.pointBackgroundColor,r,o.backgroundColor),a.borderColor=n.borderColor?n.borderColor:i.valueAtIndexOrDefault(t.pointBorderColor,r,o.borderColor),a.borderWidth=n.borderWidth?n.borderWidth:i.valueAtIndexOrDefault(t.pointBorderWidth,r,o.borderWidth)}})}},function(e,t,n){"use strict";n(4)._set("scatter",{hover:{mode:"single"},scales:{xAxes:[{id:"x-axis-1",type:"linear",position:"bottom"}],yAxes:[{id:"y-axis-1",type:"linear",position:"left"}]},showLines:!1,tooltips:{callbacks:{title:function(){return""},label:function(e){return"("+e.xLabel+", "+e.yLabel+")"}}}}),e.exports=function(e){e.controllers.scatter=e.controllers.line}},function(e,t,n){"use strict";e.exports=function(e){e.Bar=function(t,n){return n.type="bar",new e(t,n)}}},function(e,t,n){"use strict";e.exports=function(e){e.Bubble=function(t,n){return n.type="bubble",new e(t,n)}}},function(e,t,n){"use strict";e.exports=function(e){e.Doughnut=function(t,n){return n.type="doughnut",new e(t,n)}}},function(e,t,n){"use strict";e.exports=function(e){e.Line=function(t,n){return n.type="line",new e(t,n)}}},function(e,t,n){"use strict";e.exports=function(e){e.PolarArea=function(t,n){return n.type="polarArea",new e(t,n)}}},function(e,t,n){"use strict";e.exports=function(e){e.Radar=function(t,n){return n.type="radar",new e(t,n)}}},function(e,t,n){"use strict";e.exports=function(e){e.Scatter=function(t,n){return n.type="scatter",new e(t,n)}}},function(e,t,n){"use strict";e.exports={},e.exports.filler=n(245),e.exports.legend=n(246),e.exports.title=n(247)},function(e,t,n){"use strict";var r=n(4),a=n(11),i=n(3);r._set("global",{plugins:{filler:{propagate:!0}}});var o={dataset:function(e){var t=e.fill,n=e.chart,r=n.getDatasetMeta(t),a=r&&n.isDatasetVisible(t)&&r.dataset._children||[],i=a.length||0;return i?function(e,t){return t<i&&a[t]._view||null}:null},boundary:function(e){var t=e.boundary,n=t?t.x:null,r=t?t.y:null;return function(e){return{x:null===n?e.x:n,y:null===r?e.y:r}}}};function s(e,t,n){var r,a=e._model||{},i=a.fill;if(void 0===i&&(i=!!a.backgroundColor),!1===i||null===i)return!1;if(!0===i)return"origin";if(r=parseFloat(i,10),isFinite(r)&&Math.floor(r)===r)return"-"!==i[0]&&"+"!==i[0]||(r=t+r),!(r===t||r<0||r>=n)&&r;switch(i){case"bottom":return"start";case"top":return"end";case"zero":return"origin";case"origin":case"start":case"end":return i;default:return!1}}function l(e){var t,n=e.el._model||{},r=e.el._scale||{},a=e.fill,i=null;if(isFinite(a))return null;if("start"===a?i=void 0===n.scaleBottom?r.bottom:n.scaleBottom:"end"===a?i=void 0===n.scaleTop?r.top:n.scaleTop:void 0!==n.scaleZero?i=n.scaleZero:r.getBasePosition?i=r.getBasePosition():r.getBasePixel&&(i=r.getBasePixel()),void 0!==i&&null!==i){if(void 0!==i.x&&void 0!==i.y)return i;if("number"==typeof i&&isFinite(i))return{x:(t=r.isHorizontal())?i:null,y:t?null:i}}return null}function u(e,t,n){var r,a=e[t].fill,i=[t];if(!n)return a;for(;!1!==a&&-1===i.indexOf(a);){if(!isFinite(a))return a;if(!(r=e[a]))return!1;if(r.visible)return a;i.push(a),a=r.fill}return!1}function d(e){var t=e.fill,n="dataset";return!1===t?null:(isFinite(t)||(n="boundary"),o[n](e))}function c(e){return e&&!e.skip}function f(e,t,n,r,a){var o;if(r&&a){for(e.moveTo(t[0].x,t[0].y),o=1;o<r;++o)i.canvas.lineTo(e,t[o-1],t[o]);for(e.lineTo(n[a-1].x,n[a-1].y),o=a-1;o>0;--o)i.canvas.lineTo(e,n[o],n[o-1],!0)}}e.exports={id:"filler",afterDatasetsUpdate:function(e,t){var n,r,i,o,c=(e.data.datasets||[]).length,f=t.propagate,h=[];for(r=0;r<c;++r)o=null,(i=(n=e.getDatasetMeta(r)).dataset)&&i._model&&i instanceof a.Line&&(o={visible:e.isDatasetVisible(r),fill:s(i,r,c),chart:e,el:i}),n.$filler=o,h.push(o);for(r=0;r<c;++r)(o=h[r])&&(o.fill=u(h,r,f),o.boundary=l(o),o.mapper=d(o))},beforeDatasetDraw:function(e,t){var n=t.meta.$filler;if(n){var a=e.ctx,o=n.el,s=o._view,l=o._children||[],u=n.mapper,d=s.backgroundColor||r.global.defaultColor;u&&d&&l.length&&(i.canvas.clipArea(a,e.chartArea),function(e,t,n,r,a,i){var o,s,l,u,d,h,m,p=t.length,_=r.spanGaps,y=[],g=[],v=0,M=0;for(e.beginPath(),o=0,s=p+!!i;o<s;++o)d=n(u=t[l=o%p]._view,l,r),h=c(u),m=c(d),h&&m?(v=y.push(u),M=g.push(d)):v&&M&&(_?(h&&y.push(u),m&&g.push(d)):(f(e,y,g,v,M),v=M=0,y=[],g=[]));f(e,y,g,v,M),e.closePath(),e.fillStyle=a,e.fill()}(a,l,u,s,d,o._loop),i.canvas.unclipArea(a))}}}},function(e,t,n){"use strict";var r=n(4),a=n(10),i=n(3),o=n(12),s=i.noop;function l(e,t){return e.usePointStyle?t*Math.SQRT2:e.boxWidth}r._set("global",{legend:{display:!0,position:"top",fullWidth:!0,reverse:!1,weight:1e3,onClick:function(e,t){var n=t.datasetIndex,r=this.chart,a=r.getDatasetMeta(n);a.hidden=null===a.hidden?!r.data.datasets[n].hidden:null,r.update()},onHover:null,labels:{boxWidth:40,padding:10,generateLabels:function(e){var t=e.data;return i.isArray(t.datasets)?t.datasets.map(function(t,n){return{text:t.label,fillStyle:i.isArray(t.backgroundColor)?t.backgroundColor[0]:t.backgroundColor,hidden:!e.isDatasetVisible(n),lineCap:t.borderCapStyle,lineDash:t.borderDash,lineDashOffset:t.borderDashOffset,lineJoin:t.borderJoinStyle,lineWidth:t.borderWidth,strokeStyle:t.borderColor,pointStyle:t.pointStyle,datasetIndex:n}},this):[]}}},legendCallback:function(e){var t=[];t.push('<ul class="'+e.id+'-legend">');for(var n=0;n<e.data.datasets.length;n++)t.push('<li><span style="background-color:'+e.data.datasets[n].backgroundColor+'"></span>'),e.data.datasets[n].label&&t.push(e.data.datasets[n].label),t.push("</li>");return t.push("</ul>"),t.join("")}});var u=a.extend({initialize:function(e){i.extend(this,e),this.legendHitBoxes=[],this.doughnutMode=!1},beforeUpdate:s,update:function(e,t,n){var r=this;return r.beforeUpdate(),r.maxWidth=e,r.maxHeight=t,r.margins=n,r.beforeSetDimensions(),r.setDimensions(),r.afterSetDimensions(),r.beforeBuildLabels(),r.buildLabels(),r.afterBuildLabels(),r.beforeFit(),r.fit(),r.afterFit(),r.afterUpdate(),r.minSize},afterUpdate:s,beforeSetDimensions:s,setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0,e.minSize={width:0,height:0}},afterSetDimensions:s,beforeBuildLabels:s,buildLabels:function(){var e=this,t=e.options.labels||{},n=i.callback(t.generateLabels,[e.chart],e)||[];t.filter&&(n=n.filter(function(n){return t.filter(n,e.chart.data)})),e.options.reverse&&n.reverse(),e.legendItems=n},afterBuildLabels:s,beforeFit:s,fit:function(){var e=this,t=e.options,n=t.labels,a=t.display,o=e.ctx,s=r.global,u=i.valueOrDefault,d=u(n.fontSize,s.defaultFontSize),c=u(n.fontStyle,s.defaultFontStyle),f=u(n.fontFamily,s.defaultFontFamily),h=i.fontString(d,c,f),m=e.legendHitBoxes=[],p=e.minSize,_=e.isHorizontal();if(_?(p.width=e.maxWidth,p.height=a?10:0):(p.width=a?10:0,p.height=e.maxHeight),a)if(o.font=h,_){var y=e.lineWidths=[0],g=e.legendItems.length?d+n.padding:0;o.textAlign="left",o.textBaseline="top",i.each(e.legendItems,function(t,r){var a=l(n,d)+d/2+o.measureText(t.text).width;y[y.length-1]+a+n.padding>=e.width&&(g+=d+n.padding,y[y.length]=e.left),m[r]={left:0,top:0,width:a,height:d},y[y.length-1]+=a+n.padding}),p.height+=g}else{var v=n.padding,M=e.columnWidths=[],b=n.padding,L=0,k=0,x=d+v;i.each(e.legendItems,function(e,t){var r=l(n,d)+d/2+o.measureText(e.text).width;k+x>p.height&&(b+=L+n.padding,M.push(L),L=0,k=0),L=Math.max(L,r),k+=x,m[t]={left:0,top:0,width:r,height:d}}),b+=L,M.push(L),p.width+=b}e.width=p.width,e.height=p.height},afterFit:s,isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},draw:function(){var e=this,t=e.options,n=t.labels,a=r.global,o=a.elements.line,s=e.width,u=e.lineWidths;if(t.display){var d,c=e.ctx,f=i.valueOrDefault,h=f(n.fontColor,a.defaultFontColor),m=f(n.fontSize,a.defaultFontSize),p=f(n.fontStyle,a.defaultFontStyle),_=f(n.fontFamily,a.defaultFontFamily),y=i.fontString(m,p,_);c.textAlign="left",c.textBaseline="middle",c.lineWidth=.5,c.strokeStyle=h,c.fillStyle=h,c.font=y;var g=l(n,m),v=e.legendHitBoxes,M=e.isHorizontal();d=M?{x:e.left+(s-u[0])/2,y:e.top+n.padding,line:0}:{x:e.left+n.padding,y:e.top+n.padding,line:0};var b=m+n.padding;i.each(e.legendItems,function(r,l){var h=c.measureText(r.text).width,p=g+m/2+h,_=d.x,y=d.y;M?_+p>=s&&(y=d.y+=b,d.line++,_=d.x=e.left+(s-u[d.line])/2):y+b>e.bottom&&(_=d.x=_+e.columnWidths[d.line]+n.padding,y=d.y=e.top+n.padding,d.line++),function(e,n,r){if(!(isNaN(g)||g<=0)){c.save(),c.fillStyle=f(r.fillStyle,a.defaultColor),c.lineCap=f(r.lineCap,o.borderCapStyle),c.lineDashOffset=f(r.lineDashOffset,o.borderDashOffset),c.lineJoin=f(r.lineJoin,o.borderJoinStyle),c.lineWidth=f(r.lineWidth,o.borderWidth),c.strokeStyle=f(r.strokeStyle,a.defaultColor);var s=0===f(r.lineWidth,o.borderWidth);if(c.setLineDash&&c.setLineDash(f(r.lineDash,o.borderDash)),t.labels&&t.labels.usePointStyle){var l=m*Math.SQRT2/2,u=l/Math.SQRT2,d=e+u,h=n+u;i.canvas.drawPoint(c,r.pointStyle,l,d,h)}else s||c.strokeRect(e,n,g,m),c.fillRect(e,n,g,m);c.restore()}}(_,y,r),v[l].left=_,v[l].top=y,function(e,t,n,r){var a=m/2,i=g+a+e,o=t+a;c.fillText(n.text,i,o),n.hidden&&(c.beginPath(),c.lineWidth=2,c.moveTo(i,o),c.lineTo(i+r,o),c.stroke())}(_,y,r,h),M?d.x+=p+n.padding:d.y+=b})}},handleEvent:function(e){var t=this,n=t.options,r="mouseup"===e.type?"click":e.type,a=!1;if("mousemove"===r){if(!n.onHover)return}else{if("click"!==r)return;if(!n.onClick)return}var i=e.x,o=e.y;if(i>=t.left&&i<=t.right&&o>=t.top&&o<=t.bottom)for(var s=t.legendHitBoxes,l=0;l<s.length;++l){var u=s[l];if(i>=u.left&&i<=u.left+u.width&&o>=u.top&&o<=u.top+u.height){if("click"===r){n.onClick.call(t,e.native,t.legendItems[l]),a=!0;break}if("mousemove"===r){n.onHover.call(t,e.native,t.legendItems[l]),a=!0;break}}}return a}});function d(e,t){var n=new u({ctx:e.ctx,options:t,chart:e});o.configure(e,n,t),o.addBox(e,n),e.legend=n}e.exports={id:"legend",_element:u,beforeInit:function(e){var t=e.options.legend;t&&d(e,t)},beforeUpdate:function(e){var t=e.options.legend,n=e.legend;t?(i.mergeIf(t,r.global.legend),n?(o.configure(e,n,t),n.options=t):d(e,t)):n&&(o.removeBox(e,n),delete e.legend)},afterEvent:function(e,t){var n=e.legend;n&&n.handleEvent(t)}}},function(e,t,n){"use strict";var r=n(4),a=n(10),i=n(3),o=n(12),s=i.noop;r._set("global",{title:{display:!1,fontStyle:"bold",fullWidth:!0,lineHeight:1.2,padding:10,position:"top",text:"",weight:2e3}});var l=a.extend({initialize:function(e){i.extend(this,e),this.legendHitBoxes=[]},beforeUpdate:s,update:function(e,t,n){var r=this;return r.beforeUpdate(),r.maxWidth=e,r.maxHeight=t,r.margins=n,r.beforeSetDimensions(),r.setDimensions(),r.afterSetDimensions(),r.beforeBuildLabels(),r.buildLabels(),r.afterBuildLabels(),r.beforeFit(),r.fit(),r.afterFit(),r.afterUpdate(),r.minSize},afterUpdate:s,beforeSetDimensions:s,setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0,e.minSize={width:0,height:0}},afterSetDimensions:s,beforeBuildLabels:s,buildLabels:s,afterBuildLabels:s,beforeFit:s,fit:function(){var e=this,t=i.valueOrDefault,n=e.options,a=n.display,o=t(n.fontSize,r.global.defaultFontSize),s=e.minSize,l=i.isArray(n.text)?n.text.length:1,u=i.options.toLineHeight(n.lineHeight,o),d=a?l*u+2*n.padding:0;e.isHorizontal()?(s.width=e.maxWidth,s.height=d):(s.width=d,s.height=e.maxHeight),e.width=s.width,e.height=s.height},afterFit:s,isHorizontal:function(){var e=this.options.position;return"top"===e||"bottom"===e},draw:function(){var e=this,t=e.ctx,n=i.valueOrDefault,a=e.options,o=r.global;if(a.display){var s,l,u,d=n(a.fontSize,o.defaultFontSize),c=n(a.fontStyle,o.defaultFontStyle),f=n(a.fontFamily,o.defaultFontFamily),h=i.fontString(d,c,f),m=i.options.toLineHeight(a.lineHeight,d),p=m/2+a.padding,_=0,y=e.top,g=e.left,v=e.bottom,M=e.right;t.fillStyle=n(a.fontColor,o.defaultFontColor),t.font=h,e.isHorizontal()?(l=g+(M-g)/2,u=y+p,s=M-g):(l="left"===a.position?g+p:M-p,u=y+(v-y)/2,s=v-y,_=Math.PI*("left"===a.position?-.5:.5)),t.save(),t.translate(l,u),t.rotate(_),t.textAlign="center",t.textBaseline="middle";var b=a.text;if(i.isArray(b))for(var L=0,k=0;k<b.length;++k)t.fillText(b[k],0,L,s),L+=m;else t.fillText(b,0,0,s);t.restore()}}});function u(e,t){var n=new l({ctx:e.ctx,options:t,chart:e});o.configure(e,n,t),o.addBox(e,n),e.titleBlock=n}e.exports={id:"title",_element:l,beforeInit:function(e){var t=e.options.title;t&&u(e,t)},beforeUpdate:function(e){var t=e.options.title,n=e.titleBlock;t?(i.mergeIf(t,r.global.title),n?(o.configure(e,n,t),n.options=t):u(e,t)):n&&(o.removeBox(e,n),delete e.titleBlock)}}},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";var n={}.hasOwnProperty;function a(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(r);else if(Array.isArray(r)&&r.length){var o=a.apply(null,r);o&&e.push(o)}else if("object"===i)for(var s in r)n.call(r,s)&&r[s]&&e.push(s)}}return e.join(" ")}void 0!==e&&e.exports?(a.default=a,e.exports=a):void 0===(r=function(){return a}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){var r=n(250);"string"==typeof r&&(r=[[e.i,r,""]]);var a={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(9)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(8)(!0)).push([e.i,"._3V5UOuVJYci_63nzpqC1N6 {\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n  font-size: 14px;\n  background-color: white;\n  border: 3px black solid;\n}","",{version:3,sources:["/Users/Grayson/alchemy/career-track/search-all-the-things/src/components/companies/LineChart.css"],names:[],mappings:"AAAA;EACE,uHAAuH;EACvH,gBAAgB;EAChB,wBAAwB;EACxB,wBAAwB;CACzB",file:"LineChart.css",sourcesContent:[":local(.lineChart) {\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n  font-size: 14px;\n  background-color: white;\n  border: 3px black solid;\n}"],sourceRoot:""}]),t.locals={lineChart:"_3V5UOuVJYci_63nzpqC1N6"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),a=l(r),i=n(23),o=l(n(252)),s=l(n(253));function l(e){return e&&e.__esModule?e:{default:e}}t.default=class extends r.Component{constructor(...e){var t;return t=super(...e),this.state={favorites:null},t}componentDidMount(){(0,i.getFavorites)().then(e=>{this.setState({favorites:e})}).catch(console.log)}render(){const{favorites:e}=this.state;return e?a.default.createElement("div",{className:s.default.favorites},a.default.createElement("h2",null,"Current favorites:"),a.default.createElement("ul",null,e.map(e=>a.default.createElement(o.default,{key:e.symbol,company:e})))):null}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),a=s(r),i=s(n(1)),o=n(15);function s(e){return e&&e.__esModule?e:{default:e}}class l extends r.Component{render(){const{company:e}=this.props;return a.default.createElement("li",null,a.default.createElement(o.Link,{to:`/companies/${e.symbol}`},a.default.createElement("h2",null,e.companyName,"  (",e.symbol,")")))}}t.default=l,l.propTypes={company:i.default.object.isRequired}},function(e,t,n){var r=n(254);"string"==typeof r&&(r=[[e.i,r,""]]);var a={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(9)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(8)(!0)).push([e.i,".v0efMz18L4GAqWSJp9pbV {\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n  font-size: 10px;\n}\n\n  .v0efMz18L4GAqWSJp9pbV h2 {\n    margin: 0px;\n  }","",{version:3,sources:["/Users/Grayson/alchemy/career-track/search-all-the-things/src/components/favorites/Favorites.css"],names:[],mappings:"AAAA;EACE,uHAAuH;EACvH,gBAAgB;CAKjB;;EAHC;IACE,YAAY;GACb",file:"Favorites.css",sourcesContent:[":local(.favorites) {\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n  font-size: 10px;\n\n  h2 {\n    margin: 0px;\n  }\n}"],sourceRoot:""}]),t.locals={favorites:"v0efMz18L4GAqWSJp9pbV"}},function(e,t,n){var r=n(256);"string"==typeof r&&(r=[[e.i,r,""]]);var a={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(9)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(8)(!0)).push([e.i,"._3l6tUHbCLjVyxilYRqe0PJ {\n  padding: 20px;\n  margin: 10px;\n  margin-top: 20px;\n  color: white;\n  background-color: #85bb65;\n  border-radius: 10px;\n  min-height: 650px;\n  min-width: 430px;\n}\n\n  ._3l6tUHbCLjVyxilYRqe0PJ a {\n    color: rgb(255, 255, 255);\n    text-decoration: none; \n  }\n\n  ._3l6tUHbCLjVyxilYRqe0PJ a:hover {\n    color: #0a87f4;\n  }","",{version:3,sources:["/Users/Grayson/alchemy/career-track/search-all-the-things/src/components/App.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,aAAa;EACb,iBAAiB;EACjB,aAAa;EACb,0BAA0B;EAC1B,oBAAoB;EACpB,kBAAkB;EAClB,iBAAiB;CAUlB;;EARC;IACE,0BAA0B;IAC1B,sBAAsB;GACvB;;EAED;IACE,eAAe;GAChB",file:"App.css",sourcesContent:[":local(.app) {\n  padding: 20px;\n  margin: 10px;\n  margin-top: 20px;\n  color: white;\n  background-color: #85bb65;\n  border-radius: 10px;\n  min-height: 650px;\n  min-width: 430px;\n\n  a {\n    color: rgb(255, 255, 255);\n    text-decoration: none; \n  }\n\n  a:hover {\n    color: #0a87f4;\n  }\n}"],sourceRoot:""}]),t.locals={app:"_3l6tUHbCLjVyxilYRqe0PJ"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,